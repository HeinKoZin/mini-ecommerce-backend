// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


generator nestgraphql {
    provider = "node node_modules/prisma-nestjs-graphql"
    output = "../src/generated/prisma-nestjs-graphql"
    fields_Validator_from = "class-validator"
    fields_Validator_input = true
}


generator dbml {
  provider = "prisma-dbml-generator"
  output = "./dbml"
}


model User {
  id          Int @id @default(autoincrement())
  /// @Validator.MinLength(3)
  name        String
  email       String @unique
  /// @Validator.MinLength(8)
  password    String
  role        UserType @default(value: USER)
  shops       UsersOnShops[]
  wishlists   UsersOnWishlists[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
  @@index([email, id])
}

enum UserType {
  ADMIN 
  USER
}


model Product {
  id           Int           @id @unique @default(autoincrement())
  name         String
  description  String
  quantity     Int
  product_code String
  shop         Shop          @relation(fields: [shopId], references: [id])
  status       ProductStatus
  shopId       Int
  currencies   CurrenciesOnProducts[]  
  wishlistedBy UsersOnWishlists[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("products")
  @@index([name, id, product_code])
}

model Currency {
  id        Int @id @default(autoincrement())
  name      String
  code      String @unique
  products  CurrenciesOnProducts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currencies")
  @@index([name, id])
}

model CurrenciesOnProducts {
  id        Int @id @default(autoincrement())
  sell_price Float
  product   Product @relation(fields: [productId], references: [id])
  currency  Currency @relation(fields: [currencyId], references: [id])
  productId Int
  currencyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currencies_on_products")
  @@index([productId, currencyId])
}

enum ProductStatus {
  AVAILABLE
  STOCK_OUT
  PRE_ORDER
}

model Shop {
  id                Int       @id @unique @default(autoincrement())
  name              String
  slug              String    @unique
  address           String?
  phone_numbers     PhoneOnShops[]    
  products          Product[]
  owners            UsersOnShops[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("shops")
  @@index([name, id])
}

model UsersOnShops{
  shop        Shop      @relation(fields: [shopId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  shopId      Int
  userId      Int
  assignedby  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("owners_on_shops")
  @@index([shopId, userId])
  @@id([shopId, userId])
}


model UsersOnWishlists {
  id        Int       @unique @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
  userId    Int
  productId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("wish_lists")
  @@index([userId, productId])
  @@id([id, userId, productId])
}





model PhoneOnShops {
  id        Int       @unique @default(autoincrement())
  shop      Shop      @relation(fields: [shopId], references: [id])
  phone     String
  shopId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("phone_on_shops")
  @@index([shopId, id])
  @@id([id, shopId])
}