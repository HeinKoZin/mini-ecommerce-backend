// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  // decorate_1_type = "CreateOneUserArgs"
  // decorate_1_field = data
  // decorate_1_name = ValidateNested
  // decorate_1_from = "class-validator"
  // decorate_1_arguments = "[]"
  // decorate_2_type = "CreateOneUserArgs"
  // decorate_2_field = data
  // decorate_2_from = "class-transformer"
  // decorate_2_arguments = "['() => {propertyType.0}']"
  // decorate_2_name = Type
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}

model User {
  id        Int                @id @default(autoincrement())
  /// @Validator.MinLength(3)
  name      String
  /// @Validator.IsEmail()
  email     String             @unique
  /// @Validator.MinLength(8)
  password  String
  addresses Address[]
  role      UserType           @default(value: USER)
  shops     UsersOnShops[]
  wishlists Wishlist[]
  orders    Order[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([email, id])
  @@map("users")
}

enum UserType {
  ADMIN
  USER
}

model Product {
  id           Int                    @id @unique @default(autoincrement())
  name         String
  description  String
  product_code String
  shop         Shop                   @relation(fields: [shopId], references: [id])
  status       ProductStatus
  shopId       Int
  currencies   CurrenciesOnProducts[]
  Wishlist Wishlist?
  stock        Stock?
  cover_photo  String
  featured_photos FeaturedPhoto[]
  options      Option[]
  OrderedProduct OrderedProduct?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  @@index([name, id, product_code])
  @@map("products")
}

model Currency {
  id        Int                    @id @default(autoincrement())
  name      String
  code      String                 @unique
  products  CurrenciesOnProducts[]
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@index([name, id])
  @@map("currencies")
}

model CurrenciesOnProducts {
  id         Int      @id @default(autoincrement())
  sell_price Float
  product    Product  @relation(fields: [productId], references: [id])
  currency   Currency @relation(fields: [currencyId], references: [id])
  productId  Int
  currencyId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId, currencyId])
  @@map("currencies_on_products")
}

enum ProductStatus {
  AVAILABLE
  STOCK_OUT
  PRE_ORDER
}

model Shop {
  id            Int            @id @unique @default(autoincrement())
  name          String
  slug          String         @unique
  address       String?
  phone_numbers PhoneShop[]
  products      Product[]
  owners        UsersOnShops[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([name, id])
  @@map("shops")
}

model UsersOnShops {
  shop       Shop     @relation(fields: [shopId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  shopId     Int
  userId     Int
  assignedby String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([shopId, userId])
  @@index([shopId, userId])
  @@map("owners_on_shops")
}

model Wishlist {
  id        Int      @unique @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId, productId])
  @@index([userId, productId])
  @@map("wishlists")
}

model PhoneShop {
  id        Int      @unique @default(autoincrement())
  shop      Shop     @relation(fields: [shopId], references: [id])
  phone     String
  shopId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, shopId])
  @@index([shopId, id])
  @@map("phone_shops")
}

model Stock {
  id        Int      @unique @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, productId])
  @@index([ productId])
  @@map("stocks")
}


model FeaturedPhoto {
  id        Int      @unique @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  photo     String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, productId])
  @@index([productId, id])
  @@map("featured_photos")
}

model Order{
  id        Int      @unique @default(autoincrement())
  userId    Int
  productId Int
  products  OrderedProduct[]
  shipping_address ShippingAddress?
  total_price Float
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId, productId])
  @@index([userId, productId])
  @@map("orders")
}


model OrderedProduct{
  id        Int      @unique @default(autoincrement())
  quantity  Int
  price     Float
  total     Float
  sub_total Float
  discount  Float
  orderId   Int
  productId Int
  optionId  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  option    Option @relation(fields: [optionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, orderId, productId])
  @@index([orderId, productId])
  @@map("ordered_products")
}



model Option{
  id        Int      @unique @default(autoincrement())
  name      String
  value     String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  OrderedProduct OrderedProduct[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, productId])
  @@index([productId, id])
  @@map("options")
}


model Address{
  id        Int      @unique @default(autoincrement())
  name      String
  adress    String
  townshipId Int
  township   Township @relation(fields: [townshipId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  ShippingAddress ShippingAddress?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, userId])
  @@index([userId, id])
  @@map("addresses")
}

model State{
  id        Int      @unique @default(autoincrement())
  name      String
  townships Township[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id])
  @@index([name])
  @@map("states")
}

model Township{
  id        Int      @unique @default(autoincrement())
  name      String
  stateId   Int
  state     State    @relation(fields: [stateId], references: [id])
  addresses Address[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id])
  @@index([name])
  @@map("townships")
}



model ShippingAddress {
  id        Int      @unique @default(autoincrement())
  addressId Int
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  address   Address  @relation(fields: [addressId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, orderId])
  @@index([orderId, id])
  @@map("shipping_address")
}