
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  /**
   * @Validator.MinLength(3)
   */
  name: string
  /**
   * @Validator.IsEmail()
   */
  email: string
  /**
   * @Validator.MinLength(8)
   */
  password: string
  role: UserType
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Product
 * 
 */
export type Product = {
  id: number
  name: string
  description: string
  product_code: string
  status: ProductStatus
  shopId: number
  cover_photo: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Currency
 * 
 */
export type Currency = {
  id: number
  name: string
  code: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model CurrenciesOnProducts
 * 
 */
export type CurrenciesOnProducts = {
  id: number
  sell_price: number
  productId: number
  currencyId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Shop
 * 
 */
export type Shop = {
  id: number
  name: string
  slug: string
  address: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model UsersOnShops
 * 
 */
export type UsersOnShops = {
  shopId: number
  userId: number
  assignedby: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Wishlist
 * 
 */
export type Wishlist = {
  id: number
  userId: number
  productId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model PhoneShop
 * 
 */
export type PhoneShop = {
  id: number
  phone: string
  shopId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Stock
 * 
 */
export type Stock = {
  id: number
  quantity: number
  productId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FeaturedPhoto
 * 
 */
export type FeaturedPhoto = {
  id: number
  photo: string
  productId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Order
 * 
 */
export type Order = {
  id: number
  userId: number
  productId: number
  total_price: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model OrderedProduct
 * 
 */
export type OrderedProduct = {
  id: number
  quantity: number
  price: number
  total: number
  sub_total: number
  discount: number
  orderId: number
  productId: number
  optionId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Option
 * 
 */
export type Option = {
  id: number
  name: string
  value: string
  productId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Address
 * 
 */
export type Address = {
  id: number
  name: string
  adress: string
  townshipId: number
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model State
 * 
 */
export type State = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Township
 * 
 */
export type Township = {
  id: number
  name: string
  stateId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model ShippingAddress
 * 
 */
export type ShippingAddress = {
  id: number
  addressId: number
  orderId: number
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const UserType: {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const ProductStatus: {
  AVAILABLE: 'AVAILABLE',
  STOCK_OUT: 'STOCK_OUT',
  PRE_ORDER: 'PRE_ORDER'
};

export type ProductStatus = (typeof ProductStatus)[keyof typeof ProductStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.currency`: Exposes CRUD operations for the **Currency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Currencies
    * const currencies = await prisma.currency.findMany()
    * ```
    */
  get currency(): Prisma.CurrencyDelegate<GlobalReject>;

  /**
   * `prisma.currenciesOnProducts`: Exposes CRUD operations for the **CurrenciesOnProducts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CurrenciesOnProducts
    * const currenciesOnProducts = await prisma.currenciesOnProducts.findMany()
    * ```
    */
  get currenciesOnProducts(): Prisma.CurrenciesOnProductsDelegate<GlobalReject>;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **Shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): Prisma.ShopDelegate<GlobalReject>;

  /**
   * `prisma.usersOnShops`: Exposes CRUD operations for the **UsersOnShops** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersOnShops
    * const usersOnShops = await prisma.usersOnShops.findMany()
    * ```
    */
  get usersOnShops(): Prisma.UsersOnShopsDelegate<GlobalReject>;

  /**
   * `prisma.wishlist`: Exposes CRUD operations for the **Wishlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wishlists
    * const wishlists = await prisma.wishlist.findMany()
    * ```
    */
  get wishlist(): Prisma.WishlistDelegate<GlobalReject>;

  /**
   * `prisma.phoneShop`: Exposes CRUD operations for the **PhoneShop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PhoneShops
    * const phoneShops = await prisma.phoneShop.findMany()
    * ```
    */
  get phoneShop(): Prisma.PhoneShopDelegate<GlobalReject>;

  /**
   * `prisma.stock`: Exposes CRUD operations for the **Stock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stocks
    * const stocks = await prisma.stock.findMany()
    * ```
    */
  get stock(): Prisma.StockDelegate<GlobalReject>;

  /**
   * `prisma.featuredPhoto`: Exposes CRUD operations for the **FeaturedPhoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeaturedPhotos
    * const featuredPhotos = await prisma.featuredPhoto.findMany()
    * ```
    */
  get featuredPhoto(): Prisma.FeaturedPhotoDelegate<GlobalReject>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<GlobalReject>;

  /**
   * `prisma.orderedProduct`: Exposes CRUD operations for the **OrderedProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderedProducts
    * const orderedProducts = await prisma.orderedProduct.findMany()
    * ```
    */
  get orderedProduct(): Prisma.OrderedProductDelegate<GlobalReject>;

  /**
   * `prisma.option`: Exposes CRUD operations for the **Option** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Options
    * const options = await prisma.option.findMany()
    * ```
    */
  get option(): Prisma.OptionDelegate<GlobalReject>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<GlobalReject>;

  /**
   * `prisma.state`: Exposes CRUD operations for the **State** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more States
    * const states = await prisma.state.findMany()
    * ```
    */
  get state(): Prisma.StateDelegate<GlobalReject>;

  /**
   * `prisma.township`: Exposes CRUD operations for the **Township** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Townships
    * const townships = await prisma.township.findMany()
    * ```
    */
  get township(): Prisma.TownshipDelegate<GlobalReject>;

  /**
   * `prisma.shippingAddress`: Exposes CRUD operations for the **ShippingAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShippingAddresses
    * const shippingAddresses = await prisma.shippingAddress.findMany()
    * ```
    */
  get shippingAddress(): Prisma.ShippingAddressDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.10.0
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Product: 'Product',
    Currency: 'Currency',
    CurrenciesOnProducts: 'CurrenciesOnProducts',
    Shop: 'Shop',
    UsersOnShops: 'UsersOnShops',
    Wishlist: 'Wishlist',
    PhoneShop: 'PhoneShop',
    Stock: 'Stock',
    FeaturedPhoto: 'FeaturedPhoto',
    Order: 'Order',
    OrderedProduct: 'OrderedProduct',
    Option: 'Option',
    Address: 'Address',
    State: 'State',
    Township: 'Township',
    ShippingAddress: 'ShippingAddress'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    addresses: number
    shops: number
    wishlists: number
    orders: number
  }

  export type UserCountOutputTypeSelect = {
    addresses?: boolean
    shops?: boolean
    wishlists?: boolean
    orders?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    currencies: number
    featured_photos: number
    options: number
  }

  export type ProductCountOutputTypeSelect = {
    currencies?: boolean
    featured_photos?: boolean
    options?: boolean
  }

  export type ProductCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProductCountOutputType
    : S extends undefined
    ? never
    : S extends ProductCountOutputTypeArgs
    ?'include' extends U
    ? ProductCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProductCountOutputType ? ProductCountOutputType[P] : never
  } 
    : ProductCountOutputType
  : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     * 
    **/
    select?: ProductCountOutputTypeSelect | null
  }



  /**
   * Count Type CurrencyCountOutputType
   */


  export type CurrencyCountOutputType = {
    products: number
  }

  export type CurrencyCountOutputTypeSelect = {
    products?: boolean
  }

  export type CurrencyCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CurrencyCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CurrencyCountOutputType
    : S extends undefined
    ? never
    : S extends CurrencyCountOutputTypeArgs
    ?'include' extends U
    ? CurrencyCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CurrencyCountOutputType ? CurrencyCountOutputType[P] : never
  } 
    : CurrencyCountOutputType
  : CurrencyCountOutputType




  // Custom InputTypes

  /**
   * CurrencyCountOutputType without action
   */
  export type CurrencyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CurrencyCountOutputType
     * 
    **/
    select?: CurrencyCountOutputTypeSelect | null
  }



  /**
   * Count Type ShopCountOutputType
   */


  export type ShopCountOutputType = {
    phone_numbers: number
    products: number
    owners: number
  }

  export type ShopCountOutputTypeSelect = {
    phone_numbers?: boolean
    products?: boolean
    owners?: boolean
  }

  export type ShopCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ShopCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ShopCountOutputType
    : S extends undefined
    ? never
    : S extends ShopCountOutputTypeArgs
    ?'include' extends U
    ? ShopCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ShopCountOutputType ? ShopCountOutputType[P] : never
  } 
    : ShopCountOutputType
  : ShopCountOutputType




  // Custom InputTypes

  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ShopCountOutputType
     * 
    **/
    select?: ShopCountOutputTypeSelect | null
  }



  /**
   * Count Type OrderCountOutputType
   */


  export type OrderCountOutputType = {
    products: number
  }

  export type OrderCountOutputTypeSelect = {
    products?: boolean
  }

  export type OrderCountOutputTypeGetPayload<
    S extends boolean | null | undefined | OrderCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? OrderCountOutputType
    : S extends undefined
    ? never
    : S extends OrderCountOutputTypeArgs
    ?'include' extends U
    ? OrderCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof OrderCountOutputType ? OrderCountOutputType[P] : never
  } 
    : OrderCountOutputType
  : OrderCountOutputType




  // Custom InputTypes

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     * 
    **/
    select?: OrderCountOutputTypeSelect | null
  }



  /**
   * Count Type OptionCountOutputType
   */


  export type OptionCountOutputType = {
    OrderedProduct: number
  }

  export type OptionCountOutputTypeSelect = {
    OrderedProduct?: boolean
  }

  export type OptionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | OptionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? OptionCountOutputType
    : S extends undefined
    ? never
    : S extends OptionCountOutputTypeArgs
    ?'include' extends U
    ? OptionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof OptionCountOutputType ? OptionCountOutputType[P] : never
  } 
    : OptionCountOutputType
  : OptionCountOutputType




  // Custom InputTypes

  /**
   * OptionCountOutputType without action
   */
  export type OptionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OptionCountOutputType
     * 
    **/
    select?: OptionCountOutputTypeSelect | null
  }



  /**
   * Count Type StateCountOutputType
   */


  export type StateCountOutputType = {
    townships: number
  }

  export type StateCountOutputTypeSelect = {
    townships?: boolean
  }

  export type StateCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StateCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StateCountOutputType
    : S extends undefined
    ? never
    : S extends StateCountOutputTypeArgs
    ?'include' extends U
    ? StateCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StateCountOutputType ? StateCountOutputType[P] : never
  } 
    : StateCountOutputType
  : StateCountOutputType




  // Custom InputTypes

  /**
   * StateCountOutputType without action
   */
  export type StateCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StateCountOutputType
     * 
    **/
    select?: StateCountOutputTypeSelect | null
  }



  /**
   * Count Type TownshipCountOutputType
   */


  export type TownshipCountOutputType = {
    addresses: number
  }

  export type TownshipCountOutputTypeSelect = {
    addresses?: boolean
  }

  export type TownshipCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TownshipCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TownshipCountOutputType
    : S extends undefined
    ? never
    : S extends TownshipCountOutputTypeArgs
    ?'include' extends U
    ? TownshipCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TownshipCountOutputType ? TownshipCountOutputType[P] : never
  } 
    : TownshipCountOutputType
  : TownshipCountOutputType




  // Custom InputTypes

  /**
   * TownshipCountOutputType without action
   */
  export type TownshipCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TownshipCountOutputType
     * 
    **/
    select?: TownshipCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: UserType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: UserType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    role: UserType
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    addresses?: boolean | AddressFindManyArgs
    role?: boolean
    shops?: boolean | UsersOnShopsFindManyArgs
    wishlists?: boolean | WishlistFindManyArgs
    orders?: boolean | OrderFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    addresses?: boolean | AddressFindManyArgs
    shops?: boolean | UsersOnShopsFindManyArgs
    wishlists?: boolean | WishlistFindManyArgs
    orders?: boolean | OrderFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'addresses' ? Array < AddressGetPayload<S['include'][P]>>  :
        P extends 'shops' ? Array < UsersOnShopsGetPayload<S['include'][P]>>  :
        P extends 'wishlists' ? Array < WishlistGetPayload<S['include'][P]>>  :
        P extends 'orders' ? Array < OrderGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'addresses' ? Array < AddressGetPayload<S['select'][P]>>  :
        P extends 'shops' ? Array < UsersOnShopsGetPayload<S['select'][P]>>  :
        P extends 'wishlists' ? Array < WishlistGetPayload<S['select'][P]>>  :
        P extends 'orders' ? Array < OrderGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    addresses<T extends AddressFindManyArgs = {}>(args?: Subset<T, AddressFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Address>>, PrismaPromise<Array<AddressGetPayload<T>>>>;

    shops<T extends UsersOnShopsFindManyArgs = {}>(args?: Subset<T, UsersOnShopsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UsersOnShops>>, PrismaPromise<Array<UsersOnShopsGetPayload<T>>>>;

    wishlists<T extends WishlistFindManyArgs = {}>(args?: Subset<T, WishlistFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Wishlist>>, PrismaPromise<Array<WishlistGetPayload<T>>>>;

    orders<T extends OrderFindManyArgs = {}>(args?: Subset<T, OrderFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Order>>, PrismaPromise<Array<OrderGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    shopId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    shopId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    product_code: string | null
    status: ProductStatus | null
    shopId: number | null
    cover_photo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    product_code: string | null
    status: ProductStatus | null
    shopId: number | null
    cover_photo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    product_code: number
    status: number
    shopId: number
    cover_photo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    shopId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    shopId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    product_code?: true
    status?: true
    shopId?: true
    cover_photo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    product_code?: true
    status?: true
    shopId?: true
    cover_photo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    product_code?: true
    status?: true
    shopId?: true
    cover_photo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>
    by: Array<ProductScalarFieldEnum>
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    shopId: number
    cover_photo: string
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    product_code?: boolean
    shop?: boolean | ShopArgs
    status?: boolean
    shopId?: boolean
    currencies?: boolean | CurrenciesOnProductsFindManyArgs
    Wishlist?: boolean | WishlistArgs
    stock?: boolean | StockArgs
    cover_photo?: boolean
    featured_photos?: boolean | FeaturedPhotoFindManyArgs
    options?: boolean | OptionFindManyArgs
    OrderedProduct?: boolean | OrderedProductArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type ProductInclude = {
    shop?: boolean | ShopArgs
    currencies?: boolean | CurrenciesOnProductsFindManyArgs
    Wishlist?: boolean | WishlistArgs
    stock?: boolean | StockArgs
    featured_photos?: boolean | FeaturedPhotoFindManyArgs
    options?: boolean | OptionFindManyArgs
    OrderedProduct?: boolean | OrderedProductArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type ProductGetPayload<
    S extends boolean | null | undefined | ProductArgs,
    U = keyof S
      > = S extends true
        ? Product
    : S extends undefined
    ? never
    : S extends ProductArgs | ProductFindManyArgs
    ?'include' extends U
    ? Product  & {
    [P in TrueKeys<S['include']>]:
        P extends 'shop' ? ShopGetPayload<S['include'][P]> :
        P extends 'currencies' ? Array < CurrenciesOnProductsGetPayload<S['include'][P]>>  :
        P extends 'Wishlist' ? WishlistGetPayload<S['include'][P]> | null :
        P extends 'stock' ? StockGetPayload<S['include'][P]> | null :
        P extends 'featured_photos' ? Array < FeaturedPhotoGetPayload<S['include'][P]>>  :
        P extends 'options' ? Array < OptionGetPayload<S['include'][P]>>  :
        P extends 'OrderedProduct' ? OrderedProductGetPayload<S['include'][P]> | null :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'shop' ? ShopGetPayload<S['select'][P]> :
        P extends 'currencies' ? Array < CurrenciesOnProductsGetPayload<S['select'][P]>>  :
        P extends 'Wishlist' ? WishlistGetPayload<S['select'][P]> | null :
        P extends 'stock' ? StockGetPayload<S['select'][P]> | null :
        P extends 'featured_photos' ? Array < FeaturedPhotoGetPayload<S['select'][P]>>  :
        P extends 'options' ? Array < OptionGetPayload<S['select'][P]>>  :
        P extends 'OrderedProduct' ? OrderedProductGetPayload<S['select'][P]> | null :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Product ? Product[P] : never
  } 
    : Product
  : Product


  type ProductCountArgs = Merge<
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface ProductDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    shop<T extends ShopArgs = {}>(args?: Subset<T, ShopArgs>): CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>;

    currencies<T extends CurrenciesOnProductsFindManyArgs = {}>(args?: Subset<T, CurrenciesOnProductsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CurrenciesOnProducts>>, PrismaPromise<Array<CurrenciesOnProductsGetPayload<T>>>>;

    Wishlist<T extends WishlistArgs = {}>(args?: Subset<T, WishlistArgs>): CheckSelect<T, Prisma__WishlistClient<Wishlist | null >, Prisma__WishlistClient<WishlistGetPayload<T> | null >>;

    stock<T extends StockArgs = {}>(args?: Subset<T, StockArgs>): CheckSelect<T, Prisma__StockClient<Stock | null >, Prisma__StockClient<StockGetPayload<T> | null >>;

    featured_photos<T extends FeaturedPhotoFindManyArgs = {}>(args?: Subset<T, FeaturedPhotoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<FeaturedPhoto>>, PrismaPromise<Array<FeaturedPhotoGetPayload<T>>>>;

    options<T extends OptionFindManyArgs = {}>(args?: Subset<T, OptionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Option>>, PrismaPromise<Array<OptionGetPayload<T>>>>;

    OrderedProduct<T extends OrderedProductArgs = {}>(args?: Subset<T, OrderedProductArgs>): CheckSelect<T, Prisma__OrderedProductClient<OrderedProduct | null >, Prisma__OrderedProductClient<OrderedProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Throw an Error if a Product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Throw an Error if a Product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The data needed to create a Product.
     * 
    **/
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    /**
     * The data used to create many Products.
     * 
    **/
    data: Enumerable<ProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The data needed to update a Product.
     * 
    **/
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    /**
     * The data used to update Products.
     * 
    **/
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The filter to search for the Product to update in case it exists.
     * 
    **/
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     * 
    **/
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter which Product to delete.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    /**
     * Filter which Products to delete
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
  }



  /**
   * Model Currency
   */


  export type AggregateCurrency = {
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  export type CurrencyAvgAggregateOutputType = {
    id: number | null
  }

  export type CurrencySumAggregateOutputType = {
    id: number | null
  }

  export type CurrencyMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurrencyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurrencyCountAggregateOutputType = {
    id: number
    name: number
    code: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CurrencyAvgAggregateInputType = {
    id?: true
  }

  export type CurrencySumAggregateInputType = {
    id?: true
  }

  export type CurrencyMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurrencyMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurrencyCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CurrencyAggregateArgs = {
    /**
     * Filter which Currency to aggregate.
     * 
    **/
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     * 
    **/
    orderBy?: Enumerable<CurrencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Currencies
    **/
    _count?: true | CurrencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurrencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurrencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurrencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurrencyMaxAggregateInputType
  }

  export type GetCurrencyAggregateType<T extends CurrencyAggregateArgs> = {
        [P in keyof T & keyof AggregateCurrency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurrency[P]>
      : GetScalarType<T[P], AggregateCurrency[P]>
  }




  export type CurrencyGroupByArgs = {
    where?: CurrencyWhereInput
    orderBy?: Enumerable<CurrencyOrderByWithAggregationInput>
    by: Array<CurrencyScalarFieldEnum>
    having?: CurrencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurrencyCountAggregateInputType | true
    _avg?: CurrencyAvgAggregateInputType
    _sum?: CurrencySumAggregateInputType
    _min?: CurrencyMinAggregateInputType
    _max?: CurrencyMaxAggregateInputType
  }


  export type CurrencyGroupByOutputType = {
    id: number
    name: string
    code: string
    createdAt: Date
    updatedAt: Date
    _count: CurrencyCountAggregateOutputType | null
    _avg: CurrencyAvgAggregateOutputType | null
    _sum: CurrencySumAggregateOutputType | null
    _min: CurrencyMinAggregateOutputType | null
    _max: CurrencyMaxAggregateOutputType | null
  }

  type GetCurrencyGroupByPayload<T extends CurrencyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CurrencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurrencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
            : GetScalarType<T[P], CurrencyGroupByOutputType[P]>
        }
      >
    >


  export type CurrencySelect = {
    id?: boolean
    name?: boolean
    code?: boolean
    products?: boolean | CurrenciesOnProductsFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | CurrencyCountOutputTypeArgs
  }

  export type CurrencyInclude = {
    products?: boolean | CurrenciesOnProductsFindManyArgs
    _count?: boolean | CurrencyCountOutputTypeArgs
  }

  export type CurrencyGetPayload<
    S extends boolean | null | undefined | CurrencyArgs,
    U = keyof S
      > = S extends true
        ? Currency
    : S extends undefined
    ? never
    : S extends CurrencyArgs | CurrencyFindManyArgs
    ?'include' extends U
    ? Currency  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? Array < CurrenciesOnProductsGetPayload<S['include'][P]>>  :
        P extends '_count' ? CurrencyCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? Array < CurrenciesOnProductsGetPayload<S['select'][P]>>  :
        P extends '_count' ? CurrencyCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Currency ? Currency[P] : never
  } 
    : Currency
  : Currency


  type CurrencyCountArgs = Merge<
    Omit<CurrencyFindManyArgs, 'select' | 'include'> & {
      select?: CurrencyCountAggregateInputType | true
    }
  >

  export interface CurrencyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Currency that matches the filter.
     * @param {CurrencyFindUniqueArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CurrencyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CurrencyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Currency'> extends True ? CheckSelect<T, Prisma__CurrencyClient<Currency>, Prisma__CurrencyClient<CurrencyGetPayload<T>>> : CheckSelect<T, Prisma__CurrencyClient<Currency | null >, Prisma__CurrencyClient<CurrencyGetPayload<T> | null >>

    /**
     * Find the first Currency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindFirstArgs} args - Arguments to find a Currency
     * @example
     * // Get one Currency
     * const currency = await prisma.currency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CurrencyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CurrencyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Currency'> extends True ? CheckSelect<T, Prisma__CurrencyClient<Currency>, Prisma__CurrencyClient<CurrencyGetPayload<T>>> : CheckSelect<T, Prisma__CurrencyClient<Currency | null >, Prisma__CurrencyClient<CurrencyGetPayload<T> | null >>

    /**
     * Find zero or more Currencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Currencies
     * const currencies = await prisma.currency.findMany()
     * 
     * // Get first 10 Currencies
     * const currencies = await prisma.currency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const currencyWithIdOnly = await prisma.currency.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CurrencyFindManyArgs>(
      args?: SelectSubset<T, CurrencyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Currency>>, PrismaPromise<Array<CurrencyGetPayload<T>>>>

    /**
     * Create a Currency.
     * @param {CurrencyCreateArgs} args - Arguments to create a Currency.
     * @example
     * // Create one Currency
     * const Currency = await prisma.currency.create({
     *   data: {
     *     // ... data to create a Currency
     *   }
     * })
     * 
    **/
    create<T extends CurrencyCreateArgs>(
      args: SelectSubset<T, CurrencyCreateArgs>
    ): CheckSelect<T, Prisma__CurrencyClient<Currency>, Prisma__CurrencyClient<CurrencyGetPayload<T>>>

    /**
     * Create many Currencies.
     *     @param {CurrencyCreateManyArgs} args - Arguments to create many Currencies.
     *     @example
     *     // Create many Currencies
     *     const currency = await prisma.currency.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CurrencyCreateManyArgs>(
      args?: SelectSubset<T, CurrencyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Currency.
     * @param {CurrencyDeleteArgs} args - Arguments to delete one Currency.
     * @example
     * // Delete one Currency
     * const Currency = await prisma.currency.delete({
     *   where: {
     *     // ... filter to delete one Currency
     *   }
     * })
     * 
    **/
    delete<T extends CurrencyDeleteArgs>(
      args: SelectSubset<T, CurrencyDeleteArgs>
    ): CheckSelect<T, Prisma__CurrencyClient<Currency>, Prisma__CurrencyClient<CurrencyGetPayload<T>>>

    /**
     * Update one Currency.
     * @param {CurrencyUpdateArgs} args - Arguments to update one Currency.
     * @example
     * // Update one Currency
     * const currency = await prisma.currency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CurrencyUpdateArgs>(
      args: SelectSubset<T, CurrencyUpdateArgs>
    ): CheckSelect<T, Prisma__CurrencyClient<Currency>, Prisma__CurrencyClient<CurrencyGetPayload<T>>>

    /**
     * Delete zero or more Currencies.
     * @param {CurrencyDeleteManyArgs} args - Arguments to filter Currencies to delete.
     * @example
     * // Delete a few Currencies
     * const { count } = await prisma.currency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CurrencyDeleteManyArgs>(
      args?: SelectSubset<T, CurrencyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Currencies
     * const currency = await prisma.currency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CurrencyUpdateManyArgs>(
      args: SelectSubset<T, CurrencyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Currency.
     * @param {CurrencyUpsertArgs} args - Arguments to update or create a Currency.
     * @example
     * // Update or create a Currency
     * const currency = await prisma.currency.upsert({
     *   create: {
     *     // ... data to create a Currency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Currency we want to update
     *   }
     * })
    **/
    upsert<T extends CurrencyUpsertArgs>(
      args: SelectSubset<T, CurrencyUpsertArgs>
    ): CheckSelect<T, Prisma__CurrencyClient<Currency>, Prisma__CurrencyClient<CurrencyGetPayload<T>>>

    /**
     * Count the number of Currencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyCountArgs} args - Arguments to filter Currencies to count.
     * @example
     * // Count the number of Currencies
     * const count = await prisma.currency.count({
     *   where: {
     *     // ... the filter for the Currencies we want to count
     *   }
     * })
    **/
    count<T extends CurrencyCountArgs>(
      args?: Subset<T, CurrencyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurrencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurrencyAggregateArgs>(args: Subset<T, CurrencyAggregateArgs>): PrismaPromise<GetCurrencyAggregateType<T>>

    /**
     * Group by Currency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurrencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurrencyGroupByArgs['orderBy'] }
        : { orderBy?: CurrencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurrencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurrencyGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Currency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CurrencyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends CurrenciesOnProductsFindManyArgs = {}>(args?: Subset<T, CurrenciesOnProductsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CurrenciesOnProducts>>, PrismaPromise<Array<CurrenciesOnProductsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Currency findUnique
   */
  export type CurrencyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Currency
     * 
    **/
    select?: CurrencySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrencyInclude | null
    /**
     * Throw an Error if a Currency can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Currency to fetch.
     * 
    **/
    where: CurrencyWhereUniqueInput
  }


  /**
   * Currency findFirst
   */
  export type CurrencyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Currency
     * 
    **/
    select?: CurrencySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrencyInclude | null
    /**
     * Throw an Error if a Currency can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Currency to fetch.
     * 
    **/
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     * 
    **/
    orderBy?: Enumerable<CurrencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Currencies.
     * 
    **/
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Currencies.
     * 
    **/
    distinct?: Enumerable<CurrencyScalarFieldEnum>
  }


  /**
   * Currency findMany
   */
  export type CurrencyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Currency
     * 
    **/
    select?: CurrencySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrencyInclude | null
    /**
     * Filter, which Currencies to fetch.
     * 
    **/
    where?: CurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Currencies to fetch.
     * 
    **/
    orderBy?: Enumerable<CurrencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Currencies.
     * 
    **/
    cursor?: CurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Currencies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Currencies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CurrencyScalarFieldEnum>
  }


  /**
   * Currency create
   */
  export type CurrencyCreateArgs = {
    /**
     * Select specific fields to fetch from the Currency
     * 
    **/
    select?: CurrencySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrencyInclude | null
    /**
     * The data needed to create a Currency.
     * 
    **/
    data: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
  }


  /**
   * Currency createMany
   */
  export type CurrencyCreateManyArgs = {
    /**
     * The data used to create many Currencies.
     * 
    **/
    data: Enumerable<CurrencyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Currency update
   */
  export type CurrencyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Currency
     * 
    **/
    select?: CurrencySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrencyInclude | null
    /**
     * The data needed to update a Currency.
     * 
    **/
    data: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
    /**
     * Choose, which Currency to update.
     * 
    **/
    where: CurrencyWhereUniqueInput
  }


  /**
   * Currency updateMany
   */
  export type CurrencyUpdateManyArgs = {
    /**
     * The data used to update Currencies.
     * 
    **/
    data: XOR<CurrencyUpdateManyMutationInput, CurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Currencies to update
     * 
    **/
    where?: CurrencyWhereInput
  }


  /**
   * Currency upsert
   */
  export type CurrencyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Currency
     * 
    **/
    select?: CurrencySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrencyInclude | null
    /**
     * The filter to search for the Currency to update in case it exists.
     * 
    **/
    where: CurrencyWhereUniqueInput
    /**
     * In case the Currency found by the `where` argument doesn't exist, create a new Currency with this data.
     * 
    **/
    create: XOR<CurrencyCreateInput, CurrencyUncheckedCreateInput>
    /**
     * In case the Currency was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CurrencyUpdateInput, CurrencyUncheckedUpdateInput>
  }


  /**
   * Currency delete
   */
  export type CurrencyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Currency
     * 
    **/
    select?: CurrencySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrencyInclude | null
    /**
     * Filter which Currency to delete.
     * 
    **/
    where: CurrencyWhereUniqueInput
  }


  /**
   * Currency deleteMany
   */
  export type CurrencyDeleteManyArgs = {
    /**
     * Filter which Currencies to delete
     * 
    **/
    where?: CurrencyWhereInput
  }


  /**
   * Currency without action
   */
  export type CurrencyArgs = {
    /**
     * Select specific fields to fetch from the Currency
     * 
    **/
    select?: CurrencySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrencyInclude | null
  }



  /**
   * Model CurrenciesOnProducts
   */


  export type AggregateCurrenciesOnProducts = {
    _count: CurrenciesOnProductsCountAggregateOutputType | null
    _avg: CurrenciesOnProductsAvgAggregateOutputType | null
    _sum: CurrenciesOnProductsSumAggregateOutputType | null
    _min: CurrenciesOnProductsMinAggregateOutputType | null
    _max: CurrenciesOnProductsMaxAggregateOutputType | null
  }

  export type CurrenciesOnProductsAvgAggregateOutputType = {
    id: number | null
    sell_price: number | null
    productId: number | null
    currencyId: number | null
  }

  export type CurrenciesOnProductsSumAggregateOutputType = {
    id: number | null
    sell_price: number | null
    productId: number | null
    currencyId: number | null
  }

  export type CurrenciesOnProductsMinAggregateOutputType = {
    id: number | null
    sell_price: number | null
    productId: number | null
    currencyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurrenciesOnProductsMaxAggregateOutputType = {
    id: number | null
    sell_price: number | null
    productId: number | null
    currencyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CurrenciesOnProductsCountAggregateOutputType = {
    id: number
    sell_price: number
    productId: number
    currencyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CurrenciesOnProductsAvgAggregateInputType = {
    id?: true
    sell_price?: true
    productId?: true
    currencyId?: true
  }

  export type CurrenciesOnProductsSumAggregateInputType = {
    id?: true
    sell_price?: true
    productId?: true
    currencyId?: true
  }

  export type CurrenciesOnProductsMinAggregateInputType = {
    id?: true
    sell_price?: true
    productId?: true
    currencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurrenciesOnProductsMaxAggregateInputType = {
    id?: true
    sell_price?: true
    productId?: true
    currencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CurrenciesOnProductsCountAggregateInputType = {
    id?: true
    sell_price?: true
    productId?: true
    currencyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CurrenciesOnProductsAggregateArgs = {
    /**
     * Filter which CurrenciesOnProducts to aggregate.
     * 
    **/
    where?: CurrenciesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrenciesOnProducts to fetch.
     * 
    **/
    orderBy?: Enumerable<CurrenciesOnProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CurrenciesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrenciesOnProducts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrenciesOnProducts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CurrenciesOnProducts
    **/
    _count?: true | CurrenciesOnProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurrenciesOnProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurrenciesOnProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurrenciesOnProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurrenciesOnProductsMaxAggregateInputType
  }

  export type GetCurrenciesOnProductsAggregateType<T extends CurrenciesOnProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateCurrenciesOnProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurrenciesOnProducts[P]>
      : GetScalarType<T[P], AggregateCurrenciesOnProducts[P]>
  }




  export type CurrenciesOnProductsGroupByArgs = {
    where?: CurrenciesOnProductsWhereInput
    orderBy?: Enumerable<CurrenciesOnProductsOrderByWithAggregationInput>
    by: Array<CurrenciesOnProductsScalarFieldEnum>
    having?: CurrenciesOnProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurrenciesOnProductsCountAggregateInputType | true
    _avg?: CurrenciesOnProductsAvgAggregateInputType
    _sum?: CurrenciesOnProductsSumAggregateInputType
    _min?: CurrenciesOnProductsMinAggregateInputType
    _max?: CurrenciesOnProductsMaxAggregateInputType
  }


  export type CurrenciesOnProductsGroupByOutputType = {
    id: number
    sell_price: number
    productId: number
    currencyId: number
    createdAt: Date
    updatedAt: Date
    _count: CurrenciesOnProductsCountAggregateOutputType | null
    _avg: CurrenciesOnProductsAvgAggregateOutputType | null
    _sum: CurrenciesOnProductsSumAggregateOutputType | null
    _min: CurrenciesOnProductsMinAggregateOutputType | null
    _max: CurrenciesOnProductsMaxAggregateOutputType | null
  }

  type GetCurrenciesOnProductsGroupByPayload<T extends CurrenciesOnProductsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CurrenciesOnProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurrenciesOnProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurrenciesOnProductsGroupByOutputType[P]>
            : GetScalarType<T[P], CurrenciesOnProductsGroupByOutputType[P]>
        }
      >
    >


  export type CurrenciesOnProductsSelect = {
    id?: boolean
    sell_price?: boolean
    product?: boolean | ProductArgs
    currency?: boolean | CurrencyArgs
    productId?: boolean
    currencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CurrenciesOnProductsInclude = {
    product?: boolean | ProductArgs
    currency?: boolean | CurrencyArgs
  }

  export type CurrenciesOnProductsGetPayload<
    S extends boolean | null | undefined | CurrenciesOnProductsArgs,
    U = keyof S
      > = S extends true
        ? CurrenciesOnProducts
    : S extends undefined
    ? never
    : S extends CurrenciesOnProductsArgs | CurrenciesOnProductsFindManyArgs
    ?'include' extends U
    ? CurrenciesOnProducts  & {
    [P in TrueKeys<S['include']>]:
        P extends 'product' ? ProductGetPayload<S['include'][P]> :
        P extends 'currency' ? CurrencyGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'product' ? ProductGetPayload<S['select'][P]> :
        P extends 'currency' ? CurrencyGetPayload<S['select'][P]> :  P extends keyof CurrenciesOnProducts ? CurrenciesOnProducts[P] : never
  } 
    : CurrenciesOnProducts
  : CurrenciesOnProducts


  type CurrenciesOnProductsCountArgs = Merge<
    Omit<CurrenciesOnProductsFindManyArgs, 'select' | 'include'> & {
      select?: CurrenciesOnProductsCountAggregateInputType | true
    }
  >

  export interface CurrenciesOnProductsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CurrenciesOnProducts that matches the filter.
     * @param {CurrenciesOnProductsFindUniqueArgs} args - Arguments to find a CurrenciesOnProducts
     * @example
     * // Get one CurrenciesOnProducts
     * const currenciesOnProducts = await prisma.currenciesOnProducts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CurrenciesOnProductsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CurrenciesOnProductsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CurrenciesOnProducts'> extends True ? CheckSelect<T, Prisma__CurrenciesOnProductsClient<CurrenciesOnProducts>, Prisma__CurrenciesOnProductsClient<CurrenciesOnProductsGetPayload<T>>> : CheckSelect<T, Prisma__CurrenciesOnProductsClient<CurrenciesOnProducts | null >, Prisma__CurrenciesOnProductsClient<CurrenciesOnProductsGetPayload<T> | null >>

    /**
     * Find the first CurrenciesOnProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrenciesOnProductsFindFirstArgs} args - Arguments to find a CurrenciesOnProducts
     * @example
     * // Get one CurrenciesOnProducts
     * const currenciesOnProducts = await prisma.currenciesOnProducts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CurrenciesOnProductsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CurrenciesOnProductsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CurrenciesOnProducts'> extends True ? CheckSelect<T, Prisma__CurrenciesOnProductsClient<CurrenciesOnProducts>, Prisma__CurrenciesOnProductsClient<CurrenciesOnProductsGetPayload<T>>> : CheckSelect<T, Prisma__CurrenciesOnProductsClient<CurrenciesOnProducts | null >, Prisma__CurrenciesOnProductsClient<CurrenciesOnProductsGetPayload<T> | null >>

    /**
     * Find zero or more CurrenciesOnProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrenciesOnProductsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CurrenciesOnProducts
     * const currenciesOnProducts = await prisma.currenciesOnProducts.findMany()
     * 
     * // Get first 10 CurrenciesOnProducts
     * const currenciesOnProducts = await prisma.currenciesOnProducts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const currenciesOnProductsWithIdOnly = await prisma.currenciesOnProducts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CurrenciesOnProductsFindManyArgs>(
      args?: SelectSubset<T, CurrenciesOnProductsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CurrenciesOnProducts>>, PrismaPromise<Array<CurrenciesOnProductsGetPayload<T>>>>

    /**
     * Create a CurrenciesOnProducts.
     * @param {CurrenciesOnProductsCreateArgs} args - Arguments to create a CurrenciesOnProducts.
     * @example
     * // Create one CurrenciesOnProducts
     * const CurrenciesOnProducts = await prisma.currenciesOnProducts.create({
     *   data: {
     *     // ... data to create a CurrenciesOnProducts
     *   }
     * })
     * 
    **/
    create<T extends CurrenciesOnProductsCreateArgs>(
      args: SelectSubset<T, CurrenciesOnProductsCreateArgs>
    ): CheckSelect<T, Prisma__CurrenciesOnProductsClient<CurrenciesOnProducts>, Prisma__CurrenciesOnProductsClient<CurrenciesOnProductsGetPayload<T>>>

    /**
     * Create many CurrenciesOnProducts.
     *     @param {CurrenciesOnProductsCreateManyArgs} args - Arguments to create many CurrenciesOnProducts.
     *     @example
     *     // Create many CurrenciesOnProducts
     *     const currenciesOnProducts = await prisma.currenciesOnProducts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CurrenciesOnProductsCreateManyArgs>(
      args?: SelectSubset<T, CurrenciesOnProductsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CurrenciesOnProducts.
     * @param {CurrenciesOnProductsDeleteArgs} args - Arguments to delete one CurrenciesOnProducts.
     * @example
     * // Delete one CurrenciesOnProducts
     * const CurrenciesOnProducts = await prisma.currenciesOnProducts.delete({
     *   where: {
     *     // ... filter to delete one CurrenciesOnProducts
     *   }
     * })
     * 
    **/
    delete<T extends CurrenciesOnProductsDeleteArgs>(
      args: SelectSubset<T, CurrenciesOnProductsDeleteArgs>
    ): CheckSelect<T, Prisma__CurrenciesOnProductsClient<CurrenciesOnProducts>, Prisma__CurrenciesOnProductsClient<CurrenciesOnProductsGetPayload<T>>>

    /**
     * Update one CurrenciesOnProducts.
     * @param {CurrenciesOnProductsUpdateArgs} args - Arguments to update one CurrenciesOnProducts.
     * @example
     * // Update one CurrenciesOnProducts
     * const currenciesOnProducts = await prisma.currenciesOnProducts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CurrenciesOnProductsUpdateArgs>(
      args: SelectSubset<T, CurrenciesOnProductsUpdateArgs>
    ): CheckSelect<T, Prisma__CurrenciesOnProductsClient<CurrenciesOnProducts>, Prisma__CurrenciesOnProductsClient<CurrenciesOnProductsGetPayload<T>>>

    /**
     * Delete zero or more CurrenciesOnProducts.
     * @param {CurrenciesOnProductsDeleteManyArgs} args - Arguments to filter CurrenciesOnProducts to delete.
     * @example
     * // Delete a few CurrenciesOnProducts
     * const { count } = await prisma.currenciesOnProducts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CurrenciesOnProductsDeleteManyArgs>(
      args?: SelectSubset<T, CurrenciesOnProductsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CurrenciesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrenciesOnProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CurrenciesOnProducts
     * const currenciesOnProducts = await prisma.currenciesOnProducts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CurrenciesOnProductsUpdateManyArgs>(
      args: SelectSubset<T, CurrenciesOnProductsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CurrenciesOnProducts.
     * @param {CurrenciesOnProductsUpsertArgs} args - Arguments to update or create a CurrenciesOnProducts.
     * @example
     * // Update or create a CurrenciesOnProducts
     * const currenciesOnProducts = await prisma.currenciesOnProducts.upsert({
     *   create: {
     *     // ... data to create a CurrenciesOnProducts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CurrenciesOnProducts we want to update
     *   }
     * })
    **/
    upsert<T extends CurrenciesOnProductsUpsertArgs>(
      args: SelectSubset<T, CurrenciesOnProductsUpsertArgs>
    ): CheckSelect<T, Prisma__CurrenciesOnProductsClient<CurrenciesOnProducts>, Prisma__CurrenciesOnProductsClient<CurrenciesOnProductsGetPayload<T>>>

    /**
     * Count the number of CurrenciesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrenciesOnProductsCountArgs} args - Arguments to filter CurrenciesOnProducts to count.
     * @example
     * // Count the number of CurrenciesOnProducts
     * const count = await prisma.currenciesOnProducts.count({
     *   where: {
     *     // ... the filter for the CurrenciesOnProducts we want to count
     *   }
     * })
    **/
    count<T extends CurrenciesOnProductsCountArgs>(
      args?: Subset<T, CurrenciesOnProductsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurrenciesOnProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CurrenciesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrenciesOnProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurrenciesOnProductsAggregateArgs>(args: Subset<T, CurrenciesOnProductsAggregateArgs>): PrismaPromise<GetCurrenciesOnProductsAggregateType<T>>

    /**
     * Group by CurrenciesOnProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrenciesOnProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurrenciesOnProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurrenciesOnProductsGroupByArgs['orderBy'] }
        : { orderBy?: CurrenciesOnProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurrenciesOnProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurrenciesOnProductsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CurrenciesOnProducts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CurrenciesOnProductsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    currency<T extends CurrencyArgs = {}>(args?: Subset<T, CurrencyArgs>): CheckSelect<T, Prisma__CurrencyClient<Currency | null >, Prisma__CurrencyClient<CurrencyGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CurrenciesOnProducts findUnique
   */
  export type CurrenciesOnProductsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CurrenciesOnProducts
     * 
    **/
    select?: CurrenciesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrenciesOnProductsInclude | null
    /**
     * Throw an Error if a CurrenciesOnProducts can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CurrenciesOnProducts to fetch.
     * 
    **/
    where: CurrenciesOnProductsWhereUniqueInput
  }


  /**
   * CurrenciesOnProducts findFirst
   */
  export type CurrenciesOnProductsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CurrenciesOnProducts
     * 
    **/
    select?: CurrenciesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrenciesOnProductsInclude | null
    /**
     * Throw an Error if a CurrenciesOnProducts can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CurrenciesOnProducts to fetch.
     * 
    **/
    where?: CurrenciesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrenciesOnProducts to fetch.
     * 
    **/
    orderBy?: Enumerable<CurrenciesOnProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CurrenciesOnProducts.
     * 
    **/
    cursor?: CurrenciesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrenciesOnProducts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrenciesOnProducts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CurrenciesOnProducts.
     * 
    **/
    distinct?: Enumerable<CurrenciesOnProductsScalarFieldEnum>
  }


  /**
   * CurrenciesOnProducts findMany
   */
  export type CurrenciesOnProductsFindManyArgs = {
    /**
     * Select specific fields to fetch from the CurrenciesOnProducts
     * 
    **/
    select?: CurrenciesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrenciesOnProductsInclude | null
    /**
     * Filter, which CurrenciesOnProducts to fetch.
     * 
    **/
    where?: CurrenciesOnProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrenciesOnProducts to fetch.
     * 
    **/
    orderBy?: Enumerable<CurrenciesOnProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CurrenciesOnProducts.
     * 
    **/
    cursor?: CurrenciesOnProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrenciesOnProducts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrenciesOnProducts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CurrenciesOnProductsScalarFieldEnum>
  }


  /**
   * CurrenciesOnProducts create
   */
  export type CurrenciesOnProductsCreateArgs = {
    /**
     * Select specific fields to fetch from the CurrenciesOnProducts
     * 
    **/
    select?: CurrenciesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrenciesOnProductsInclude | null
    /**
     * The data needed to create a CurrenciesOnProducts.
     * 
    **/
    data: XOR<CurrenciesOnProductsCreateInput, CurrenciesOnProductsUncheckedCreateInput>
  }


  /**
   * CurrenciesOnProducts createMany
   */
  export type CurrenciesOnProductsCreateManyArgs = {
    /**
     * The data used to create many CurrenciesOnProducts.
     * 
    **/
    data: Enumerable<CurrenciesOnProductsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CurrenciesOnProducts update
   */
  export type CurrenciesOnProductsUpdateArgs = {
    /**
     * Select specific fields to fetch from the CurrenciesOnProducts
     * 
    **/
    select?: CurrenciesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrenciesOnProductsInclude | null
    /**
     * The data needed to update a CurrenciesOnProducts.
     * 
    **/
    data: XOR<CurrenciesOnProductsUpdateInput, CurrenciesOnProductsUncheckedUpdateInput>
    /**
     * Choose, which CurrenciesOnProducts to update.
     * 
    **/
    where: CurrenciesOnProductsWhereUniqueInput
  }


  /**
   * CurrenciesOnProducts updateMany
   */
  export type CurrenciesOnProductsUpdateManyArgs = {
    /**
     * The data used to update CurrenciesOnProducts.
     * 
    **/
    data: XOR<CurrenciesOnProductsUpdateManyMutationInput, CurrenciesOnProductsUncheckedUpdateManyInput>
    /**
     * Filter which CurrenciesOnProducts to update
     * 
    **/
    where?: CurrenciesOnProductsWhereInput
  }


  /**
   * CurrenciesOnProducts upsert
   */
  export type CurrenciesOnProductsUpsertArgs = {
    /**
     * Select specific fields to fetch from the CurrenciesOnProducts
     * 
    **/
    select?: CurrenciesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrenciesOnProductsInclude | null
    /**
     * The filter to search for the CurrenciesOnProducts to update in case it exists.
     * 
    **/
    where: CurrenciesOnProductsWhereUniqueInput
    /**
     * In case the CurrenciesOnProducts found by the `where` argument doesn't exist, create a new CurrenciesOnProducts with this data.
     * 
    **/
    create: XOR<CurrenciesOnProductsCreateInput, CurrenciesOnProductsUncheckedCreateInput>
    /**
     * In case the CurrenciesOnProducts was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CurrenciesOnProductsUpdateInput, CurrenciesOnProductsUncheckedUpdateInput>
  }


  /**
   * CurrenciesOnProducts delete
   */
  export type CurrenciesOnProductsDeleteArgs = {
    /**
     * Select specific fields to fetch from the CurrenciesOnProducts
     * 
    **/
    select?: CurrenciesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrenciesOnProductsInclude | null
    /**
     * Filter which CurrenciesOnProducts to delete.
     * 
    **/
    where: CurrenciesOnProductsWhereUniqueInput
  }


  /**
   * CurrenciesOnProducts deleteMany
   */
  export type CurrenciesOnProductsDeleteManyArgs = {
    /**
     * Filter which CurrenciesOnProducts to delete
     * 
    **/
    where?: CurrenciesOnProductsWhereInput
  }


  /**
   * CurrenciesOnProducts without action
   */
  export type CurrenciesOnProductsArgs = {
    /**
     * Select specific fields to fetch from the CurrenciesOnProducts
     * 
    **/
    select?: CurrenciesOnProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CurrenciesOnProductsInclude | null
  }



  /**
   * Model Shop
   */


  export type AggregateShop = {
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  export type ShopAvgAggregateOutputType = {
    id: number | null
  }

  export type ShopSumAggregateOutputType = {
    id: number | null
  }

  export type ShopMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShopMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShopCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    address: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShopAvgAggregateInputType = {
    id?: true
  }

  export type ShopSumAggregateInputType = {
    id?: true
  }

  export type ShopMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShopMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShopCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShopAggregateArgs = {
    /**
     * Filter which Shop to aggregate.
     * 
    **/
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shops
    **/
    _count?: true | ShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopMaxAggregateInputType
  }

  export type GetShopAggregateType<T extends ShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop[P]>
      : GetScalarType<T[P], AggregateShop[P]>
  }




  export type ShopGroupByArgs = {
    where?: ShopWhereInput
    orderBy?: Enumerable<ShopOrderByWithAggregationInput>
    by: Array<ShopScalarFieldEnum>
    having?: ShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopCountAggregateInputType | true
    _avg?: ShopAvgAggregateInputType
    _sum?: ShopSumAggregateInputType
    _min?: ShopMinAggregateInputType
    _max?: ShopMaxAggregateInputType
  }


  export type ShopGroupByOutputType = {
    id: number
    name: string
    slug: string
    address: string | null
    createdAt: Date
    updatedAt: Date
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  type GetShopGroupByPayload<T extends ShopGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopGroupByOutputType[P]>
        }
      >
    >


  export type ShopSelect = {
    id?: boolean
    name?: boolean
    slug?: boolean
    address?: boolean
    phone_numbers?: boolean | PhoneShopFindManyArgs
    products?: boolean | ProductFindManyArgs
    owners?: boolean | UsersOnShopsFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | ShopCountOutputTypeArgs
  }

  export type ShopInclude = {
    phone_numbers?: boolean | PhoneShopFindManyArgs
    products?: boolean | ProductFindManyArgs
    owners?: boolean | UsersOnShopsFindManyArgs
    _count?: boolean | ShopCountOutputTypeArgs
  }

  export type ShopGetPayload<
    S extends boolean | null | undefined | ShopArgs,
    U = keyof S
      > = S extends true
        ? Shop
    : S extends undefined
    ? never
    : S extends ShopArgs | ShopFindManyArgs
    ?'include' extends U
    ? Shop  & {
    [P in TrueKeys<S['include']>]:
        P extends 'phone_numbers' ? Array < PhoneShopGetPayload<S['include'][P]>>  :
        P extends 'products' ? Array < ProductGetPayload<S['include'][P]>>  :
        P extends 'owners' ? Array < UsersOnShopsGetPayload<S['include'][P]>>  :
        P extends '_count' ? ShopCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'phone_numbers' ? Array < PhoneShopGetPayload<S['select'][P]>>  :
        P extends 'products' ? Array < ProductGetPayload<S['select'][P]>>  :
        P extends 'owners' ? Array < UsersOnShopsGetPayload<S['select'][P]>>  :
        P extends '_count' ? ShopCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Shop ? Shop[P] : never
  } 
    : Shop
  : Shop


  type ShopCountArgs = Merge<
    Omit<ShopFindManyArgs, 'select' | 'include'> & {
      select?: ShopCountAggregateInputType | true
    }
  >

  export interface ShopDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Shop that matches the filter.
     * @param {ShopFindUniqueArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShopFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShopFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Shop'> extends True ? CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>> : CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>

    /**
     * Find the first Shop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShopFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShopFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Shop'> extends True ? CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>> : CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>

    /**
     * Find zero or more Shops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shops
     * const shops = await prisma.shop.findMany()
     * 
     * // Get first 10 Shops
     * const shops = await prisma.shop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopWithIdOnly = await prisma.shop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShopFindManyArgs>(
      args?: SelectSubset<T, ShopFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Shop>>, PrismaPromise<Array<ShopGetPayload<T>>>>

    /**
     * Create a Shop.
     * @param {ShopCreateArgs} args - Arguments to create a Shop.
     * @example
     * // Create one Shop
     * const Shop = await prisma.shop.create({
     *   data: {
     *     // ... data to create a Shop
     *   }
     * })
     * 
    **/
    create<T extends ShopCreateArgs>(
      args: SelectSubset<T, ShopCreateArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Create many Shops.
     *     @param {ShopCreateManyArgs} args - Arguments to create many Shops.
     *     @example
     *     // Create many Shops
     *     const shop = await prisma.shop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShopCreateManyArgs>(
      args?: SelectSubset<T, ShopCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Shop.
     * @param {ShopDeleteArgs} args - Arguments to delete one Shop.
     * @example
     * // Delete one Shop
     * const Shop = await prisma.shop.delete({
     *   where: {
     *     // ... filter to delete one Shop
     *   }
     * })
     * 
    **/
    delete<T extends ShopDeleteArgs>(
      args: SelectSubset<T, ShopDeleteArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Update one Shop.
     * @param {ShopUpdateArgs} args - Arguments to update one Shop.
     * @example
     * // Update one Shop
     * const shop = await prisma.shop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShopUpdateArgs>(
      args: SelectSubset<T, ShopUpdateArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Delete zero or more Shops.
     * @param {ShopDeleteManyArgs} args - Arguments to filter Shops to delete.
     * @example
     * // Delete a few Shops
     * const { count } = await prisma.shop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShopDeleteManyArgs>(
      args?: SelectSubset<T, ShopDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShopUpdateManyArgs>(
      args: SelectSubset<T, ShopUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Shop.
     * @param {ShopUpsertArgs} args - Arguments to update or create a Shop.
     * @example
     * // Update or create a Shop
     * const shop = await prisma.shop.upsert({
     *   create: {
     *     // ... data to create a Shop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop we want to update
     *   }
     * })
    **/
    upsert<T extends ShopUpsertArgs>(
      args: SelectSubset<T, ShopUpsertArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Count the number of Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopCountArgs} args - Arguments to filter Shops to count.
     * @example
     * // Count the number of Shops
     * const count = await prisma.shop.count({
     *   where: {
     *     // ... the filter for the Shops we want to count
     *   }
     * })
    **/
    count<T extends ShopCountArgs>(
      args?: Subset<T, ShopCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopAggregateArgs>(args: Subset<T, ShopAggregateArgs>): PrismaPromise<GetShopAggregateType<T>>

    /**
     * Group by Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShopClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    phone_numbers<T extends PhoneShopFindManyArgs = {}>(args?: Subset<T, PhoneShopFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PhoneShop>>, PrismaPromise<Array<PhoneShopGetPayload<T>>>>;

    products<T extends ProductFindManyArgs = {}>(args?: Subset<T, ProductFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>;

    owners<T extends UsersOnShopsFindManyArgs = {}>(args?: Subset<T, UsersOnShopsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UsersOnShops>>, PrismaPromise<Array<UsersOnShopsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Shop findUnique
   */
  export type ShopFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * Throw an Error if a Shop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Shop to fetch.
     * 
    **/
    where: ShopWhereUniqueInput
  }


  /**
   * Shop findFirst
   */
  export type ShopFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * Throw an Error if a Shop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Shop to fetch.
     * 
    **/
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     * 
    **/
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     * 
    **/
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * Shop findMany
   */
  export type ShopFindManyArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * Filter, which Shops to fetch.
     * 
    **/
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shops.
     * 
    **/
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * Shop create
   */
  export type ShopCreateArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * The data needed to create a Shop.
     * 
    **/
    data: XOR<ShopCreateInput, ShopUncheckedCreateInput>
  }


  /**
   * Shop createMany
   */
  export type ShopCreateManyArgs = {
    /**
     * The data used to create many Shops.
     * 
    **/
    data: Enumerable<ShopCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Shop update
   */
  export type ShopUpdateArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * The data needed to update a Shop.
     * 
    **/
    data: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
    /**
     * Choose, which Shop to update.
     * 
    **/
    where: ShopWhereUniqueInput
  }


  /**
   * Shop updateMany
   */
  export type ShopUpdateManyArgs = {
    /**
     * The data used to update Shops.
     * 
    **/
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyInput>
    /**
     * Filter which Shops to update
     * 
    **/
    where?: ShopWhereInput
  }


  /**
   * Shop upsert
   */
  export type ShopUpsertArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * The filter to search for the Shop to update in case it exists.
     * 
    **/
    where: ShopWhereUniqueInput
    /**
     * In case the Shop found by the `where` argument doesn't exist, create a new Shop with this data.
     * 
    **/
    create: XOR<ShopCreateInput, ShopUncheckedCreateInput>
    /**
     * In case the Shop was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
  }


  /**
   * Shop delete
   */
  export type ShopDeleteArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
    /**
     * Filter which Shop to delete.
     * 
    **/
    where: ShopWhereUniqueInput
  }


  /**
   * Shop deleteMany
   */
  export type ShopDeleteManyArgs = {
    /**
     * Filter which Shops to delete
     * 
    **/
    where?: ShopWhereInput
  }


  /**
   * Shop without action
   */
  export type ShopArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShopInclude | null
  }



  /**
   * Model UsersOnShops
   */


  export type AggregateUsersOnShops = {
    _count: UsersOnShopsCountAggregateOutputType | null
    _avg: UsersOnShopsAvgAggregateOutputType | null
    _sum: UsersOnShopsSumAggregateOutputType | null
    _min: UsersOnShopsMinAggregateOutputType | null
    _max: UsersOnShopsMaxAggregateOutputType | null
  }

  export type UsersOnShopsAvgAggregateOutputType = {
    shopId: number | null
    userId: number | null
  }

  export type UsersOnShopsSumAggregateOutputType = {
    shopId: number | null
    userId: number | null
  }

  export type UsersOnShopsMinAggregateOutputType = {
    shopId: number | null
    userId: number | null
    assignedby: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersOnShopsMaxAggregateOutputType = {
    shopId: number | null
    userId: number | null
    assignedby: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersOnShopsCountAggregateOutputType = {
    shopId: number
    userId: number
    assignedby: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsersOnShopsAvgAggregateInputType = {
    shopId?: true
    userId?: true
  }

  export type UsersOnShopsSumAggregateInputType = {
    shopId?: true
    userId?: true
  }

  export type UsersOnShopsMinAggregateInputType = {
    shopId?: true
    userId?: true
    assignedby?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersOnShopsMaxAggregateInputType = {
    shopId?: true
    userId?: true
    assignedby?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersOnShopsCountAggregateInputType = {
    shopId?: true
    userId?: true
    assignedby?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersOnShopsAggregateArgs = {
    /**
     * Filter which UsersOnShops to aggregate.
     * 
    **/
    where?: UsersOnShopsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersOnShops to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOnShopsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsersOnShopsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersOnShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersOnShops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsersOnShops
    **/
    _count?: true | UsersOnShopsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersOnShopsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersOnShopsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersOnShopsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersOnShopsMaxAggregateInputType
  }

  export type GetUsersOnShopsAggregateType<T extends UsersOnShopsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersOnShops]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersOnShops[P]>
      : GetScalarType<T[P], AggregateUsersOnShops[P]>
  }




  export type UsersOnShopsGroupByArgs = {
    where?: UsersOnShopsWhereInput
    orderBy?: Enumerable<UsersOnShopsOrderByWithAggregationInput>
    by: Array<UsersOnShopsScalarFieldEnum>
    having?: UsersOnShopsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersOnShopsCountAggregateInputType | true
    _avg?: UsersOnShopsAvgAggregateInputType
    _sum?: UsersOnShopsSumAggregateInputType
    _min?: UsersOnShopsMinAggregateInputType
    _max?: UsersOnShopsMaxAggregateInputType
  }


  export type UsersOnShopsGroupByOutputType = {
    shopId: number
    userId: number
    assignedby: string
    createdAt: Date
    updatedAt: Date
    _count: UsersOnShopsCountAggregateOutputType | null
    _avg: UsersOnShopsAvgAggregateOutputType | null
    _sum: UsersOnShopsSumAggregateOutputType | null
    _min: UsersOnShopsMinAggregateOutputType | null
    _max: UsersOnShopsMaxAggregateOutputType | null
  }

  type GetUsersOnShopsGroupByPayload<T extends UsersOnShopsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersOnShopsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersOnShopsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersOnShopsGroupByOutputType[P]>
            : GetScalarType<T[P], UsersOnShopsGroupByOutputType[P]>
        }
      >
    >


  export type UsersOnShopsSelect = {
    shop?: boolean | ShopArgs
    user?: boolean | UserArgs
    shopId?: boolean
    userId?: boolean
    assignedby?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UsersOnShopsInclude = {
    shop?: boolean | ShopArgs
    user?: boolean | UserArgs
  }

  export type UsersOnShopsGetPayload<
    S extends boolean | null | undefined | UsersOnShopsArgs,
    U = keyof S
      > = S extends true
        ? UsersOnShops
    : S extends undefined
    ? never
    : S extends UsersOnShopsArgs | UsersOnShopsFindManyArgs
    ?'include' extends U
    ? UsersOnShops  & {
    [P in TrueKeys<S['include']>]:
        P extends 'shop' ? ShopGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'shop' ? ShopGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof UsersOnShops ? UsersOnShops[P] : never
  } 
    : UsersOnShops
  : UsersOnShops


  type UsersOnShopsCountArgs = Merge<
    Omit<UsersOnShopsFindManyArgs, 'select' | 'include'> & {
      select?: UsersOnShopsCountAggregateInputType | true
    }
  >

  export interface UsersOnShopsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UsersOnShops that matches the filter.
     * @param {UsersOnShopsFindUniqueArgs} args - Arguments to find a UsersOnShops
     * @example
     * // Get one UsersOnShops
     * const usersOnShops = await prisma.usersOnShops.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersOnShopsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersOnShopsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UsersOnShops'> extends True ? CheckSelect<T, Prisma__UsersOnShopsClient<UsersOnShops>, Prisma__UsersOnShopsClient<UsersOnShopsGetPayload<T>>> : CheckSelect<T, Prisma__UsersOnShopsClient<UsersOnShops | null >, Prisma__UsersOnShopsClient<UsersOnShopsGetPayload<T> | null >>

    /**
     * Find the first UsersOnShops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnShopsFindFirstArgs} args - Arguments to find a UsersOnShops
     * @example
     * // Get one UsersOnShops
     * const usersOnShops = await prisma.usersOnShops.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersOnShopsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersOnShopsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UsersOnShops'> extends True ? CheckSelect<T, Prisma__UsersOnShopsClient<UsersOnShops>, Prisma__UsersOnShopsClient<UsersOnShopsGetPayload<T>>> : CheckSelect<T, Prisma__UsersOnShopsClient<UsersOnShops | null >, Prisma__UsersOnShopsClient<UsersOnShopsGetPayload<T> | null >>

    /**
     * Find zero or more UsersOnShops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnShopsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersOnShops
     * const usersOnShops = await prisma.usersOnShops.findMany()
     * 
     * // Get first 10 UsersOnShops
     * const usersOnShops = await prisma.usersOnShops.findMany({ take: 10 })
     * 
     * // Only select the `shopId`
     * const usersOnShopsWithShopIdOnly = await prisma.usersOnShops.findMany({ select: { shopId: true } })
     * 
    **/
    findMany<T extends UsersOnShopsFindManyArgs>(
      args?: SelectSubset<T, UsersOnShopsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UsersOnShops>>, PrismaPromise<Array<UsersOnShopsGetPayload<T>>>>

    /**
     * Create a UsersOnShops.
     * @param {UsersOnShopsCreateArgs} args - Arguments to create a UsersOnShops.
     * @example
     * // Create one UsersOnShops
     * const UsersOnShops = await prisma.usersOnShops.create({
     *   data: {
     *     // ... data to create a UsersOnShops
     *   }
     * })
     * 
    **/
    create<T extends UsersOnShopsCreateArgs>(
      args: SelectSubset<T, UsersOnShopsCreateArgs>
    ): CheckSelect<T, Prisma__UsersOnShopsClient<UsersOnShops>, Prisma__UsersOnShopsClient<UsersOnShopsGetPayload<T>>>

    /**
     * Create many UsersOnShops.
     *     @param {UsersOnShopsCreateManyArgs} args - Arguments to create many UsersOnShops.
     *     @example
     *     // Create many UsersOnShops
     *     const usersOnShops = await prisma.usersOnShops.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersOnShopsCreateManyArgs>(
      args?: SelectSubset<T, UsersOnShopsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UsersOnShops.
     * @param {UsersOnShopsDeleteArgs} args - Arguments to delete one UsersOnShops.
     * @example
     * // Delete one UsersOnShops
     * const UsersOnShops = await prisma.usersOnShops.delete({
     *   where: {
     *     // ... filter to delete one UsersOnShops
     *   }
     * })
     * 
    **/
    delete<T extends UsersOnShopsDeleteArgs>(
      args: SelectSubset<T, UsersOnShopsDeleteArgs>
    ): CheckSelect<T, Prisma__UsersOnShopsClient<UsersOnShops>, Prisma__UsersOnShopsClient<UsersOnShopsGetPayload<T>>>

    /**
     * Update one UsersOnShops.
     * @param {UsersOnShopsUpdateArgs} args - Arguments to update one UsersOnShops.
     * @example
     * // Update one UsersOnShops
     * const usersOnShops = await prisma.usersOnShops.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersOnShopsUpdateArgs>(
      args: SelectSubset<T, UsersOnShopsUpdateArgs>
    ): CheckSelect<T, Prisma__UsersOnShopsClient<UsersOnShops>, Prisma__UsersOnShopsClient<UsersOnShopsGetPayload<T>>>

    /**
     * Delete zero or more UsersOnShops.
     * @param {UsersOnShopsDeleteManyArgs} args - Arguments to filter UsersOnShops to delete.
     * @example
     * // Delete a few UsersOnShops
     * const { count } = await prisma.usersOnShops.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersOnShopsDeleteManyArgs>(
      args?: SelectSubset<T, UsersOnShopsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersOnShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnShopsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersOnShops
     * const usersOnShops = await prisma.usersOnShops.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersOnShopsUpdateManyArgs>(
      args: SelectSubset<T, UsersOnShopsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersOnShops.
     * @param {UsersOnShopsUpsertArgs} args - Arguments to update or create a UsersOnShops.
     * @example
     * // Update or create a UsersOnShops
     * const usersOnShops = await prisma.usersOnShops.upsert({
     *   create: {
     *     // ... data to create a UsersOnShops
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersOnShops we want to update
     *   }
     * })
    **/
    upsert<T extends UsersOnShopsUpsertArgs>(
      args: SelectSubset<T, UsersOnShopsUpsertArgs>
    ): CheckSelect<T, Prisma__UsersOnShopsClient<UsersOnShops>, Prisma__UsersOnShopsClient<UsersOnShopsGetPayload<T>>>

    /**
     * Count the number of UsersOnShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnShopsCountArgs} args - Arguments to filter UsersOnShops to count.
     * @example
     * // Count the number of UsersOnShops
     * const count = await prisma.usersOnShops.count({
     *   where: {
     *     // ... the filter for the UsersOnShops we want to count
     *   }
     * })
    **/
    count<T extends UsersOnShopsCountArgs>(
      args?: Subset<T, UsersOnShopsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersOnShopsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersOnShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnShopsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersOnShopsAggregateArgs>(args: Subset<T, UsersOnShopsAggregateArgs>): PrismaPromise<GetUsersOnShopsAggregateType<T>>

    /**
     * Group by UsersOnShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersOnShopsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersOnShopsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersOnShopsGroupByArgs['orderBy'] }
        : { orderBy?: UsersOnShopsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersOnShopsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersOnShopsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsersOnShops.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersOnShopsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    shop<T extends ShopArgs = {}>(args?: Subset<T, ShopArgs>): CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UsersOnShops findUnique
   */
  export type UsersOnShopsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UsersOnShops
     * 
    **/
    select?: UsersOnShopsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersOnShopsInclude | null
    /**
     * Throw an Error if a UsersOnShops can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UsersOnShops to fetch.
     * 
    **/
    where: UsersOnShopsWhereUniqueInput
  }


  /**
   * UsersOnShops findFirst
   */
  export type UsersOnShopsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UsersOnShops
     * 
    **/
    select?: UsersOnShopsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersOnShopsInclude | null
    /**
     * Throw an Error if a UsersOnShops can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UsersOnShops to fetch.
     * 
    **/
    where?: UsersOnShopsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersOnShops to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOnShopsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsersOnShops.
     * 
    **/
    cursor?: UsersOnShopsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersOnShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersOnShops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsersOnShops.
     * 
    **/
    distinct?: Enumerable<UsersOnShopsScalarFieldEnum>
  }


  /**
   * UsersOnShops findMany
   */
  export type UsersOnShopsFindManyArgs = {
    /**
     * Select specific fields to fetch from the UsersOnShops
     * 
    **/
    select?: UsersOnShopsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersOnShopsInclude | null
    /**
     * Filter, which UsersOnShops to fetch.
     * 
    **/
    where?: UsersOnShopsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsersOnShops to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOnShopsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsersOnShops.
     * 
    **/
    cursor?: UsersOnShopsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsersOnShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsersOnShops.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersOnShopsScalarFieldEnum>
  }


  /**
   * UsersOnShops create
   */
  export type UsersOnShopsCreateArgs = {
    /**
     * Select specific fields to fetch from the UsersOnShops
     * 
    **/
    select?: UsersOnShopsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersOnShopsInclude | null
    /**
     * The data needed to create a UsersOnShops.
     * 
    **/
    data: XOR<UsersOnShopsCreateInput, UsersOnShopsUncheckedCreateInput>
  }


  /**
   * UsersOnShops createMany
   */
  export type UsersOnShopsCreateManyArgs = {
    /**
     * The data used to create many UsersOnShops.
     * 
    **/
    data: Enumerable<UsersOnShopsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UsersOnShops update
   */
  export type UsersOnShopsUpdateArgs = {
    /**
     * Select specific fields to fetch from the UsersOnShops
     * 
    **/
    select?: UsersOnShopsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersOnShopsInclude | null
    /**
     * The data needed to update a UsersOnShops.
     * 
    **/
    data: XOR<UsersOnShopsUpdateInput, UsersOnShopsUncheckedUpdateInput>
    /**
     * Choose, which UsersOnShops to update.
     * 
    **/
    where: UsersOnShopsWhereUniqueInput
  }


  /**
   * UsersOnShops updateMany
   */
  export type UsersOnShopsUpdateManyArgs = {
    /**
     * The data used to update UsersOnShops.
     * 
    **/
    data: XOR<UsersOnShopsUpdateManyMutationInput, UsersOnShopsUncheckedUpdateManyInput>
    /**
     * Filter which UsersOnShops to update
     * 
    **/
    where?: UsersOnShopsWhereInput
  }


  /**
   * UsersOnShops upsert
   */
  export type UsersOnShopsUpsertArgs = {
    /**
     * Select specific fields to fetch from the UsersOnShops
     * 
    **/
    select?: UsersOnShopsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersOnShopsInclude | null
    /**
     * The filter to search for the UsersOnShops to update in case it exists.
     * 
    **/
    where: UsersOnShopsWhereUniqueInput
    /**
     * In case the UsersOnShops found by the `where` argument doesn't exist, create a new UsersOnShops with this data.
     * 
    **/
    create: XOR<UsersOnShopsCreateInput, UsersOnShopsUncheckedCreateInput>
    /**
     * In case the UsersOnShops was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsersOnShopsUpdateInput, UsersOnShopsUncheckedUpdateInput>
  }


  /**
   * UsersOnShops delete
   */
  export type UsersOnShopsDeleteArgs = {
    /**
     * Select specific fields to fetch from the UsersOnShops
     * 
    **/
    select?: UsersOnShopsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersOnShopsInclude | null
    /**
     * Filter which UsersOnShops to delete.
     * 
    **/
    where: UsersOnShopsWhereUniqueInput
  }


  /**
   * UsersOnShops deleteMany
   */
  export type UsersOnShopsDeleteManyArgs = {
    /**
     * Filter which UsersOnShops to delete
     * 
    **/
    where?: UsersOnShopsWhereInput
  }


  /**
   * UsersOnShops without action
   */
  export type UsersOnShopsArgs = {
    /**
     * Select specific fields to fetch from the UsersOnShops
     * 
    **/
    select?: UsersOnShopsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersOnShopsInclude | null
  }



  /**
   * Model Wishlist
   */


  export type AggregateWishlist = {
    _count: WishlistCountAggregateOutputType | null
    _avg: WishlistAvgAggregateOutputType | null
    _sum: WishlistSumAggregateOutputType | null
    _min: WishlistMinAggregateOutputType | null
    _max: WishlistMaxAggregateOutputType | null
  }

  export type WishlistAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
  }

  export type WishlistSumAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
  }

  export type WishlistMinAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WishlistMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WishlistCountAggregateOutputType = {
    id: number
    userId: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WishlistAvgAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
  }

  export type WishlistSumAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
  }

  export type WishlistMinAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WishlistMaxAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WishlistCountAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WishlistAggregateArgs = {
    /**
     * Filter which Wishlist to aggregate.
     * 
    **/
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     * 
    **/
    orderBy?: Enumerable<WishlistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wishlists
    **/
    _count?: true | WishlistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WishlistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WishlistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WishlistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WishlistMaxAggregateInputType
  }

  export type GetWishlistAggregateType<T extends WishlistAggregateArgs> = {
        [P in keyof T & keyof AggregateWishlist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWishlist[P]>
      : GetScalarType<T[P], AggregateWishlist[P]>
  }




  export type WishlistGroupByArgs = {
    where?: WishlistWhereInput
    orderBy?: Enumerable<WishlistOrderByWithAggregationInput>
    by: Array<WishlistScalarFieldEnum>
    having?: WishlistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WishlistCountAggregateInputType | true
    _avg?: WishlistAvgAggregateInputType
    _sum?: WishlistSumAggregateInputType
    _min?: WishlistMinAggregateInputType
    _max?: WishlistMaxAggregateInputType
  }


  export type WishlistGroupByOutputType = {
    id: number
    userId: number
    productId: number
    createdAt: Date
    updatedAt: Date
    _count: WishlistCountAggregateOutputType | null
    _avg: WishlistAvgAggregateOutputType | null
    _sum: WishlistSumAggregateOutputType | null
    _min: WishlistMinAggregateOutputType | null
    _max: WishlistMaxAggregateOutputType | null
  }

  type GetWishlistGroupByPayload<T extends WishlistGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WishlistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WishlistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WishlistGroupByOutputType[P]>
            : GetScalarType<T[P], WishlistGroupByOutputType[P]>
        }
      >
    >


  export type WishlistSelect = {
    id?: boolean
    user?: boolean | UserArgs
    product?: boolean | ProductArgs
    userId?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WishlistInclude = {
    user?: boolean | UserArgs
    product?: boolean | ProductArgs
  }

  export type WishlistGetPayload<
    S extends boolean | null | undefined | WishlistArgs,
    U = keyof S
      > = S extends true
        ? Wishlist
    : S extends undefined
    ? never
    : S extends WishlistArgs | WishlistFindManyArgs
    ?'include' extends U
    ? Wishlist  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'product' ? ProductGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'product' ? ProductGetPayload<S['select'][P]> :  P extends keyof Wishlist ? Wishlist[P] : never
  } 
    : Wishlist
  : Wishlist


  type WishlistCountArgs = Merge<
    Omit<WishlistFindManyArgs, 'select' | 'include'> & {
      select?: WishlistCountAggregateInputType | true
    }
  >

  export interface WishlistDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Wishlist that matches the filter.
     * @param {WishlistFindUniqueArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WishlistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WishlistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Wishlist'> extends True ? CheckSelect<T, Prisma__WishlistClient<Wishlist>, Prisma__WishlistClient<WishlistGetPayload<T>>> : CheckSelect<T, Prisma__WishlistClient<Wishlist | null >, Prisma__WishlistClient<WishlistGetPayload<T> | null >>

    /**
     * Find the first Wishlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindFirstArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WishlistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WishlistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Wishlist'> extends True ? CheckSelect<T, Prisma__WishlistClient<Wishlist>, Prisma__WishlistClient<WishlistGetPayload<T>>> : CheckSelect<T, Prisma__WishlistClient<Wishlist | null >, Prisma__WishlistClient<WishlistGetPayload<T> | null >>

    /**
     * Find zero or more Wishlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wishlists
     * const wishlists = await prisma.wishlist.findMany()
     * 
     * // Get first 10 Wishlists
     * const wishlists = await prisma.wishlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wishlistWithIdOnly = await prisma.wishlist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WishlistFindManyArgs>(
      args?: SelectSubset<T, WishlistFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Wishlist>>, PrismaPromise<Array<WishlistGetPayload<T>>>>

    /**
     * Create a Wishlist.
     * @param {WishlistCreateArgs} args - Arguments to create a Wishlist.
     * @example
     * // Create one Wishlist
     * const Wishlist = await prisma.wishlist.create({
     *   data: {
     *     // ... data to create a Wishlist
     *   }
     * })
     * 
    **/
    create<T extends WishlistCreateArgs>(
      args: SelectSubset<T, WishlistCreateArgs>
    ): CheckSelect<T, Prisma__WishlistClient<Wishlist>, Prisma__WishlistClient<WishlistGetPayload<T>>>

    /**
     * Create many Wishlists.
     *     @param {WishlistCreateManyArgs} args - Arguments to create many Wishlists.
     *     @example
     *     // Create many Wishlists
     *     const wishlist = await prisma.wishlist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WishlistCreateManyArgs>(
      args?: SelectSubset<T, WishlistCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Wishlist.
     * @param {WishlistDeleteArgs} args - Arguments to delete one Wishlist.
     * @example
     * // Delete one Wishlist
     * const Wishlist = await prisma.wishlist.delete({
     *   where: {
     *     // ... filter to delete one Wishlist
     *   }
     * })
     * 
    **/
    delete<T extends WishlistDeleteArgs>(
      args: SelectSubset<T, WishlistDeleteArgs>
    ): CheckSelect<T, Prisma__WishlistClient<Wishlist>, Prisma__WishlistClient<WishlistGetPayload<T>>>

    /**
     * Update one Wishlist.
     * @param {WishlistUpdateArgs} args - Arguments to update one Wishlist.
     * @example
     * // Update one Wishlist
     * const wishlist = await prisma.wishlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WishlistUpdateArgs>(
      args: SelectSubset<T, WishlistUpdateArgs>
    ): CheckSelect<T, Prisma__WishlistClient<Wishlist>, Prisma__WishlistClient<WishlistGetPayload<T>>>

    /**
     * Delete zero or more Wishlists.
     * @param {WishlistDeleteManyArgs} args - Arguments to filter Wishlists to delete.
     * @example
     * // Delete a few Wishlists
     * const { count } = await prisma.wishlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WishlistDeleteManyArgs>(
      args?: SelectSubset<T, WishlistDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wishlists
     * const wishlist = await prisma.wishlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WishlistUpdateManyArgs>(
      args: SelectSubset<T, WishlistUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Wishlist.
     * @param {WishlistUpsertArgs} args - Arguments to update or create a Wishlist.
     * @example
     * // Update or create a Wishlist
     * const wishlist = await prisma.wishlist.upsert({
     *   create: {
     *     // ... data to create a Wishlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wishlist we want to update
     *   }
     * })
    **/
    upsert<T extends WishlistUpsertArgs>(
      args: SelectSubset<T, WishlistUpsertArgs>
    ): CheckSelect<T, Prisma__WishlistClient<Wishlist>, Prisma__WishlistClient<WishlistGetPayload<T>>>

    /**
     * Count the number of Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistCountArgs} args - Arguments to filter Wishlists to count.
     * @example
     * // Count the number of Wishlists
     * const count = await prisma.wishlist.count({
     *   where: {
     *     // ... the filter for the Wishlists we want to count
     *   }
     * })
    **/
    count<T extends WishlistCountArgs>(
      args?: Subset<T, WishlistCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WishlistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WishlistAggregateArgs>(args: Subset<T, WishlistAggregateArgs>): PrismaPromise<GetWishlistAggregateType<T>>

    /**
     * Group by Wishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WishlistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WishlistGroupByArgs['orderBy'] }
        : { orderBy?: WishlistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WishlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWishlistGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wishlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WishlistClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Wishlist findUnique
   */
  export type WishlistFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Wishlist
     * 
    **/
    select?: WishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WishlistInclude | null
    /**
     * Throw an Error if a Wishlist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Wishlist to fetch.
     * 
    **/
    where: WishlistWhereUniqueInput
  }


  /**
   * Wishlist findFirst
   */
  export type WishlistFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Wishlist
     * 
    **/
    select?: WishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WishlistInclude | null
    /**
     * Throw an Error if a Wishlist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Wishlist to fetch.
     * 
    **/
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     * 
    **/
    orderBy?: Enumerable<WishlistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wishlists.
     * 
    **/
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wishlists.
     * 
    **/
    distinct?: Enumerable<WishlistScalarFieldEnum>
  }


  /**
   * Wishlist findMany
   */
  export type WishlistFindManyArgs = {
    /**
     * Select specific fields to fetch from the Wishlist
     * 
    **/
    select?: WishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WishlistInclude | null
    /**
     * Filter, which Wishlists to fetch.
     * 
    **/
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     * 
    **/
    orderBy?: Enumerable<WishlistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wishlists.
     * 
    **/
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WishlistScalarFieldEnum>
  }


  /**
   * Wishlist create
   */
  export type WishlistCreateArgs = {
    /**
     * Select specific fields to fetch from the Wishlist
     * 
    **/
    select?: WishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WishlistInclude | null
    /**
     * The data needed to create a Wishlist.
     * 
    **/
    data: XOR<WishlistCreateInput, WishlistUncheckedCreateInput>
  }


  /**
   * Wishlist createMany
   */
  export type WishlistCreateManyArgs = {
    /**
     * The data used to create many Wishlists.
     * 
    **/
    data: Enumerable<WishlistCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Wishlist update
   */
  export type WishlistUpdateArgs = {
    /**
     * Select specific fields to fetch from the Wishlist
     * 
    **/
    select?: WishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WishlistInclude | null
    /**
     * The data needed to update a Wishlist.
     * 
    **/
    data: XOR<WishlistUpdateInput, WishlistUncheckedUpdateInput>
    /**
     * Choose, which Wishlist to update.
     * 
    **/
    where: WishlistWhereUniqueInput
  }


  /**
   * Wishlist updateMany
   */
  export type WishlistUpdateManyArgs = {
    /**
     * The data used to update Wishlists.
     * 
    **/
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyInput>
    /**
     * Filter which Wishlists to update
     * 
    **/
    where?: WishlistWhereInput
  }


  /**
   * Wishlist upsert
   */
  export type WishlistUpsertArgs = {
    /**
     * Select specific fields to fetch from the Wishlist
     * 
    **/
    select?: WishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WishlistInclude | null
    /**
     * The filter to search for the Wishlist to update in case it exists.
     * 
    **/
    where: WishlistWhereUniqueInput
    /**
     * In case the Wishlist found by the `where` argument doesn't exist, create a new Wishlist with this data.
     * 
    **/
    create: XOR<WishlistCreateInput, WishlistUncheckedCreateInput>
    /**
     * In case the Wishlist was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WishlistUpdateInput, WishlistUncheckedUpdateInput>
  }


  /**
   * Wishlist delete
   */
  export type WishlistDeleteArgs = {
    /**
     * Select specific fields to fetch from the Wishlist
     * 
    **/
    select?: WishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WishlistInclude | null
    /**
     * Filter which Wishlist to delete.
     * 
    **/
    where: WishlistWhereUniqueInput
  }


  /**
   * Wishlist deleteMany
   */
  export type WishlistDeleteManyArgs = {
    /**
     * Filter which Wishlists to delete
     * 
    **/
    where?: WishlistWhereInput
  }


  /**
   * Wishlist without action
   */
  export type WishlistArgs = {
    /**
     * Select specific fields to fetch from the Wishlist
     * 
    **/
    select?: WishlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WishlistInclude | null
  }



  /**
   * Model PhoneShop
   */


  export type AggregatePhoneShop = {
    _count: PhoneShopCountAggregateOutputType | null
    _avg: PhoneShopAvgAggregateOutputType | null
    _sum: PhoneShopSumAggregateOutputType | null
    _min: PhoneShopMinAggregateOutputType | null
    _max: PhoneShopMaxAggregateOutputType | null
  }

  export type PhoneShopAvgAggregateOutputType = {
    id: number | null
    shopId: number | null
  }

  export type PhoneShopSumAggregateOutputType = {
    id: number | null
    shopId: number | null
  }

  export type PhoneShopMinAggregateOutputType = {
    id: number | null
    phone: string | null
    shopId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PhoneShopMaxAggregateOutputType = {
    id: number | null
    phone: string | null
    shopId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PhoneShopCountAggregateOutputType = {
    id: number
    phone: number
    shopId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PhoneShopAvgAggregateInputType = {
    id?: true
    shopId?: true
  }

  export type PhoneShopSumAggregateInputType = {
    id?: true
    shopId?: true
  }

  export type PhoneShopMinAggregateInputType = {
    id?: true
    phone?: true
    shopId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PhoneShopMaxAggregateInputType = {
    id?: true
    phone?: true
    shopId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PhoneShopCountAggregateInputType = {
    id?: true
    phone?: true
    shopId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PhoneShopAggregateArgs = {
    /**
     * Filter which PhoneShop to aggregate.
     * 
    **/
    where?: PhoneShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhoneShops to fetch.
     * 
    **/
    orderBy?: Enumerable<PhoneShopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PhoneShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhoneShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhoneShops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PhoneShops
    **/
    _count?: true | PhoneShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhoneShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhoneShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhoneShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhoneShopMaxAggregateInputType
  }

  export type GetPhoneShopAggregateType<T extends PhoneShopAggregateArgs> = {
        [P in keyof T & keyof AggregatePhoneShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhoneShop[P]>
      : GetScalarType<T[P], AggregatePhoneShop[P]>
  }




  export type PhoneShopGroupByArgs = {
    where?: PhoneShopWhereInput
    orderBy?: Enumerable<PhoneShopOrderByWithAggregationInput>
    by: Array<PhoneShopScalarFieldEnum>
    having?: PhoneShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhoneShopCountAggregateInputType | true
    _avg?: PhoneShopAvgAggregateInputType
    _sum?: PhoneShopSumAggregateInputType
    _min?: PhoneShopMinAggregateInputType
    _max?: PhoneShopMaxAggregateInputType
  }


  export type PhoneShopGroupByOutputType = {
    id: number
    phone: string
    shopId: number
    createdAt: Date
    updatedAt: Date
    _count: PhoneShopCountAggregateOutputType | null
    _avg: PhoneShopAvgAggregateOutputType | null
    _sum: PhoneShopSumAggregateOutputType | null
    _min: PhoneShopMinAggregateOutputType | null
    _max: PhoneShopMaxAggregateOutputType | null
  }

  type GetPhoneShopGroupByPayload<T extends PhoneShopGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PhoneShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhoneShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhoneShopGroupByOutputType[P]>
            : GetScalarType<T[P], PhoneShopGroupByOutputType[P]>
        }
      >
    >


  export type PhoneShopSelect = {
    id?: boolean
    shop?: boolean | ShopArgs
    phone?: boolean
    shopId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PhoneShopInclude = {
    shop?: boolean | ShopArgs
  }

  export type PhoneShopGetPayload<
    S extends boolean | null | undefined | PhoneShopArgs,
    U = keyof S
      > = S extends true
        ? PhoneShop
    : S extends undefined
    ? never
    : S extends PhoneShopArgs | PhoneShopFindManyArgs
    ?'include' extends U
    ? PhoneShop  & {
    [P in TrueKeys<S['include']>]:
        P extends 'shop' ? ShopGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'shop' ? ShopGetPayload<S['select'][P]> :  P extends keyof PhoneShop ? PhoneShop[P] : never
  } 
    : PhoneShop
  : PhoneShop


  type PhoneShopCountArgs = Merge<
    Omit<PhoneShopFindManyArgs, 'select' | 'include'> & {
      select?: PhoneShopCountAggregateInputType | true
    }
  >

  export interface PhoneShopDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PhoneShop that matches the filter.
     * @param {PhoneShopFindUniqueArgs} args - Arguments to find a PhoneShop
     * @example
     * // Get one PhoneShop
     * const phoneShop = await prisma.phoneShop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PhoneShopFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PhoneShopFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PhoneShop'> extends True ? CheckSelect<T, Prisma__PhoneShopClient<PhoneShop>, Prisma__PhoneShopClient<PhoneShopGetPayload<T>>> : CheckSelect<T, Prisma__PhoneShopClient<PhoneShop | null >, Prisma__PhoneShopClient<PhoneShopGetPayload<T> | null >>

    /**
     * Find the first PhoneShop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneShopFindFirstArgs} args - Arguments to find a PhoneShop
     * @example
     * // Get one PhoneShop
     * const phoneShop = await prisma.phoneShop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PhoneShopFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PhoneShopFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PhoneShop'> extends True ? CheckSelect<T, Prisma__PhoneShopClient<PhoneShop>, Prisma__PhoneShopClient<PhoneShopGetPayload<T>>> : CheckSelect<T, Prisma__PhoneShopClient<PhoneShop | null >, Prisma__PhoneShopClient<PhoneShopGetPayload<T> | null >>

    /**
     * Find zero or more PhoneShops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneShopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PhoneShops
     * const phoneShops = await prisma.phoneShop.findMany()
     * 
     * // Get first 10 PhoneShops
     * const phoneShops = await prisma.phoneShop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const phoneShopWithIdOnly = await prisma.phoneShop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PhoneShopFindManyArgs>(
      args?: SelectSubset<T, PhoneShopFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PhoneShop>>, PrismaPromise<Array<PhoneShopGetPayload<T>>>>

    /**
     * Create a PhoneShop.
     * @param {PhoneShopCreateArgs} args - Arguments to create a PhoneShop.
     * @example
     * // Create one PhoneShop
     * const PhoneShop = await prisma.phoneShop.create({
     *   data: {
     *     // ... data to create a PhoneShop
     *   }
     * })
     * 
    **/
    create<T extends PhoneShopCreateArgs>(
      args: SelectSubset<T, PhoneShopCreateArgs>
    ): CheckSelect<T, Prisma__PhoneShopClient<PhoneShop>, Prisma__PhoneShopClient<PhoneShopGetPayload<T>>>

    /**
     * Create many PhoneShops.
     *     @param {PhoneShopCreateManyArgs} args - Arguments to create many PhoneShops.
     *     @example
     *     // Create many PhoneShops
     *     const phoneShop = await prisma.phoneShop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PhoneShopCreateManyArgs>(
      args?: SelectSubset<T, PhoneShopCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PhoneShop.
     * @param {PhoneShopDeleteArgs} args - Arguments to delete one PhoneShop.
     * @example
     * // Delete one PhoneShop
     * const PhoneShop = await prisma.phoneShop.delete({
     *   where: {
     *     // ... filter to delete one PhoneShop
     *   }
     * })
     * 
    **/
    delete<T extends PhoneShopDeleteArgs>(
      args: SelectSubset<T, PhoneShopDeleteArgs>
    ): CheckSelect<T, Prisma__PhoneShopClient<PhoneShop>, Prisma__PhoneShopClient<PhoneShopGetPayload<T>>>

    /**
     * Update one PhoneShop.
     * @param {PhoneShopUpdateArgs} args - Arguments to update one PhoneShop.
     * @example
     * // Update one PhoneShop
     * const phoneShop = await prisma.phoneShop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PhoneShopUpdateArgs>(
      args: SelectSubset<T, PhoneShopUpdateArgs>
    ): CheckSelect<T, Prisma__PhoneShopClient<PhoneShop>, Prisma__PhoneShopClient<PhoneShopGetPayload<T>>>

    /**
     * Delete zero or more PhoneShops.
     * @param {PhoneShopDeleteManyArgs} args - Arguments to filter PhoneShops to delete.
     * @example
     * // Delete a few PhoneShops
     * const { count } = await prisma.phoneShop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PhoneShopDeleteManyArgs>(
      args?: SelectSubset<T, PhoneShopDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PhoneShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PhoneShops
     * const phoneShop = await prisma.phoneShop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PhoneShopUpdateManyArgs>(
      args: SelectSubset<T, PhoneShopUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PhoneShop.
     * @param {PhoneShopUpsertArgs} args - Arguments to update or create a PhoneShop.
     * @example
     * // Update or create a PhoneShop
     * const phoneShop = await prisma.phoneShop.upsert({
     *   create: {
     *     // ... data to create a PhoneShop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PhoneShop we want to update
     *   }
     * })
    **/
    upsert<T extends PhoneShopUpsertArgs>(
      args: SelectSubset<T, PhoneShopUpsertArgs>
    ): CheckSelect<T, Prisma__PhoneShopClient<PhoneShop>, Prisma__PhoneShopClient<PhoneShopGetPayload<T>>>

    /**
     * Count the number of PhoneShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneShopCountArgs} args - Arguments to filter PhoneShops to count.
     * @example
     * // Count the number of PhoneShops
     * const count = await prisma.phoneShop.count({
     *   where: {
     *     // ... the filter for the PhoneShops we want to count
     *   }
     * })
    **/
    count<T extends PhoneShopCountArgs>(
      args?: Subset<T, PhoneShopCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhoneShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PhoneShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhoneShopAggregateArgs>(args: Subset<T, PhoneShopAggregateArgs>): PrismaPromise<GetPhoneShopAggregateType<T>>

    /**
     * Group by PhoneShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhoneShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhoneShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhoneShopGroupByArgs['orderBy'] }
        : { orderBy?: PhoneShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhoneShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhoneShopGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PhoneShop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PhoneShopClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    shop<T extends ShopArgs = {}>(args?: Subset<T, ShopArgs>): CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PhoneShop findUnique
   */
  export type PhoneShopFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PhoneShop
     * 
    **/
    select?: PhoneShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneShopInclude | null
    /**
     * Throw an Error if a PhoneShop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PhoneShop to fetch.
     * 
    **/
    where: PhoneShopWhereUniqueInput
  }


  /**
   * PhoneShop findFirst
   */
  export type PhoneShopFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PhoneShop
     * 
    **/
    select?: PhoneShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneShopInclude | null
    /**
     * Throw an Error if a PhoneShop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PhoneShop to fetch.
     * 
    **/
    where?: PhoneShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhoneShops to fetch.
     * 
    **/
    orderBy?: Enumerable<PhoneShopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhoneShops.
     * 
    **/
    cursor?: PhoneShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhoneShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhoneShops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhoneShops.
     * 
    **/
    distinct?: Enumerable<PhoneShopScalarFieldEnum>
  }


  /**
   * PhoneShop findMany
   */
  export type PhoneShopFindManyArgs = {
    /**
     * Select specific fields to fetch from the PhoneShop
     * 
    **/
    select?: PhoneShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneShopInclude | null
    /**
     * Filter, which PhoneShops to fetch.
     * 
    **/
    where?: PhoneShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhoneShops to fetch.
     * 
    **/
    orderBy?: Enumerable<PhoneShopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PhoneShops.
     * 
    **/
    cursor?: PhoneShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhoneShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhoneShops.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PhoneShopScalarFieldEnum>
  }


  /**
   * PhoneShop create
   */
  export type PhoneShopCreateArgs = {
    /**
     * Select specific fields to fetch from the PhoneShop
     * 
    **/
    select?: PhoneShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneShopInclude | null
    /**
     * The data needed to create a PhoneShop.
     * 
    **/
    data: XOR<PhoneShopCreateInput, PhoneShopUncheckedCreateInput>
  }


  /**
   * PhoneShop createMany
   */
  export type PhoneShopCreateManyArgs = {
    /**
     * The data used to create many PhoneShops.
     * 
    **/
    data: Enumerable<PhoneShopCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PhoneShop update
   */
  export type PhoneShopUpdateArgs = {
    /**
     * Select specific fields to fetch from the PhoneShop
     * 
    **/
    select?: PhoneShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneShopInclude | null
    /**
     * The data needed to update a PhoneShop.
     * 
    **/
    data: XOR<PhoneShopUpdateInput, PhoneShopUncheckedUpdateInput>
    /**
     * Choose, which PhoneShop to update.
     * 
    **/
    where: PhoneShopWhereUniqueInput
  }


  /**
   * PhoneShop updateMany
   */
  export type PhoneShopUpdateManyArgs = {
    /**
     * The data used to update PhoneShops.
     * 
    **/
    data: XOR<PhoneShopUpdateManyMutationInput, PhoneShopUncheckedUpdateManyInput>
    /**
     * Filter which PhoneShops to update
     * 
    **/
    where?: PhoneShopWhereInput
  }


  /**
   * PhoneShop upsert
   */
  export type PhoneShopUpsertArgs = {
    /**
     * Select specific fields to fetch from the PhoneShop
     * 
    **/
    select?: PhoneShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneShopInclude | null
    /**
     * The filter to search for the PhoneShop to update in case it exists.
     * 
    **/
    where: PhoneShopWhereUniqueInput
    /**
     * In case the PhoneShop found by the `where` argument doesn't exist, create a new PhoneShop with this data.
     * 
    **/
    create: XOR<PhoneShopCreateInput, PhoneShopUncheckedCreateInput>
    /**
     * In case the PhoneShop was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PhoneShopUpdateInput, PhoneShopUncheckedUpdateInput>
  }


  /**
   * PhoneShop delete
   */
  export type PhoneShopDeleteArgs = {
    /**
     * Select specific fields to fetch from the PhoneShop
     * 
    **/
    select?: PhoneShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneShopInclude | null
    /**
     * Filter which PhoneShop to delete.
     * 
    **/
    where: PhoneShopWhereUniqueInput
  }


  /**
   * PhoneShop deleteMany
   */
  export type PhoneShopDeleteManyArgs = {
    /**
     * Filter which PhoneShops to delete
     * 
    **/
    where?: PhoneShopWhereInput
  }


  /**
   * PhoneShop without action
   */
  export type PhoneShopArgs = {
    /**
     * Select specific fields to fetch from the PhoneShop
     * 
    **/
    select?: PhoneShopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PhoneShopInclude | null
  }



  /**
   * Model Stock
   */


  export type AggregateStock = {
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  export type StockAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    productId: number | null
  }

  export type StockSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    productId: number | null
  }

  export type StockMinAggregateOutputType = {
    id: number | null
    quantity: number | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockMaxAggregateOutputType = {
    id: number | null
    quantity: number | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockCountAggregateOutputType = {
    id: number
    quantity: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StockAvgAggregateInputType = {
    id?: true
    quantity?: true
    productId?: true
  }

  export type StockSumAggregateInputType = {
    id?: true
    quantity?: true
    productId?: true
  }

  export type StockMinAggregateInputType = {
    id?: true
    quantity?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockMaxAggregateInputType = {
    id?: true
    quantity?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockCountAggregateInputType = {
    id?: true
    quantity?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StockAggregateArgs = {
    /**
     * Filter which Stock to aggregate.
     * 
    **/
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     * 
    **/
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stocks
    **/
    _count?: true | StockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMaxAggregateInputType
  }

  export type GetStockAggregateType<T extends StockAggregateArgs> = {
        [P in keyof T & keyof AggregateStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStock[P]>
      : GetScalarType<T[P], AggregateStock[P]>
  }




  export type StockGroupByArgs = {
    where?: StockWhereInput
    orderBy?: Enumerable<StockOrderByWithAggregationInput>
    by: Array<StockScalarFieldEnum>
    having?: StockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockCountAggregateInputType | true
    _avg?: StockAvgAggregateInputType
    _sum?: StockSumAggregateInputType
    _min?: StockMinAggregateInputType
    _max?: StockMaxAggregateInputType
  }


  export type StockGroupByOutputType = {
    id: number
    quantity: number
    productId: number
    createdAt: Date
    updatedAt: Date
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  type GetStockGroupByPayload<T extends StockGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockGroupByOutputType[P]>
            : GetScalarType<T[P], StockGroupByOutputType[P]>
        }
      >
    >


  export type StockSelect = {
    id?: boolean
    product?: boolean | ProductArgs
    quantity?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StockInclude = {
    product?: boolean | ProductArgs
  }

  export type StockGetPayload<
    S extends boolean | null | undefined | StockArgs,
    U = keyof S
      > = S extends true
        ? Stock
    : S extends undefined
    ? never
    : S extends StockArgs | StockFindManyArgs
    ?'include' extends U
    ? Stock  & {
    [P in TrueKeys<S['include']>]:
        P extends 'product' ? ProductGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'product' ? ProductGetPayload<S['select'][P]> :  P extends keyof Stock ? Stock[P] : never
  } 
    : Stock
  : Stock


  type StockCountArgs = Merge<
    Omit<StockFindManyArgs, 'select' | 'include'> & {
      select?: StockCountAggregateInputType | true
    }
  >

  export interface StockDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Stock that matches the filter.
     * @param {StockFindUniqueArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StockFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StockFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stock'> extends True ? CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>> : CheckSelect<T, Prisma__StockClient<Stock | null >, Prisma__StockClient<StockGetPayload<T> | null >>

    /**
     * Find the first Stock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StockFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StockFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stock'> extends True ? CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>> : CheckSelect<T, Prisma__StockClient<Stock | null >, Prisma__StockClient<StockGetPayload<T> | null >>

    /**
     * Find zero or more Stocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stocks
     * const stocks = await prisma.stock.findMany()
     * 
     * // Get first 10 Stocks
     * const stocks = await prisma.stock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockWithIdOnly = await prisma.stock.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StockFindManyArgs>(
      args?: SelectSubset<T, StockFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Stock>>, PrismaPromise<Array<StockGetPayload<T>>>>

    /**
     * Create a Stock.
     * @param {StockCreateArgs} args - Arguments to create a Stock.
     * @example
     * // Create one Stock
     * const Stock = await prisma.stock.create({
     *   data: {
     *     // ... data to create a Stock
     *   }
     * })
     * 
    **/
    create<T extends StockCreateArgs>(
      args: SelectSubset<T, StockCreateArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Create many Stocks.
     *     @param {StockCreateManyArgs} args - Arguments to create many Stocks.
     *     @example
     *     // Create many Stocks
     *     const stock = await prisma.stock.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StockCreateManyArgs>(
      args?: SelectSubset<T, StockCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Stock.
     * @param {StockDeleteArgs} args - Arguments to delete one Stock.
     * @example
     * // Delete one Stock
     * const Stock = await prisma.stock.delete({
     *   where: {
     *     // ... filter to delete one Stock
     *   }
     * })
     * 
    **/
    delete<T extends StockDeleteArgs>(
      args: SelectSubset<T, StockDeleteArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Update one Stock.
     * @param {StockUpdateArgs} args - Arguments to update one Stock.
     * @example
     * // Update one Stock
     * const stock = await prisma.stock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StockUpdateArgs>(
      args: SelectSubset<T, StockUpdateArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Delete zero or more Stocks.
     * @param {StockDeleteManyArgs} args - Arguments to filter Stocks to delete.
     * @example
     * // Delete a few Stocks
     * const { count } = await prisma.stock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StockDeleteManyArgs>(
      args?: SelectSubset<T, StockDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StockUpdateManyArgs>(
      args: SelectSubset<T, StockUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Stock.
     * @param {StockUpsertArgs} args - Arguments to update or create a Stock.
     * @example
     * // Update or create a Stock
     * const stock = await prisma.stock.upsert({
     *   create: {
     *     // ... data to create a Stock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stock we want to update
     *   }
     * })
    **/
    upsert<T extends StockUpsertArgs>(
      args: SelectSubset<T, StockUpsertArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Count the number of Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockCountArgs} args - Arguments to filter Stocks to count.
     * @example
     * // Count the number of Stocks
     * const count = await prisma.stock.count({
     *   where: {
     *     // ... the filter for the Stocks we want to count
     *   }
     * })
    **/
    count<T extends StockCountArgs>(
      args?: Subset<T, StockCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockAggregateArgs>(args: Subset<T, StockAggregateArgs>): PrismaPromise<GetStockAggregateType<T>>

    /**
     * Group by Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockGroupByArgs['orderBy'] }
        : { orderBy?: StockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StockClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Stock findUnique
   */
  export type StockFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * Throw an Error if a Stock can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stock to fetch.
     * 
    **/
    where: StockWhereUniqueInput
  }


  /**
   * Stock findFirst
   */
  export type StockFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * Throw an Error if a Stock can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stock to fetch.
     * 
    **/
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     * 
    **/
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     * 
    **/
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     * 
    **/
    distinct?: Enumerable<StockScalarFieldEnum>
  }


  /**
   * Stock findMany
   */
  export type StockFindManyArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * Filter, which Stocks to fetch.
     * 
    **/
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     * 
    **/
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stocks.
     * 
    **/
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StockScalarFieldEnum>
  }


  /**
   * Stock create
   */
  export type StockCreateArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * The data needed to create a Stock.
     * 
    **/
    data: XOR<StockCreateInput, StockUncheckedCreateInput>
  }


  /**
   * Stock createMany
   */
  export type StockCreateManyArgs = {
    /**
     * The data used to create many Stocks.
     * 
    **/
    data: Enumerable<StockCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Stock update
   */
  export type StockUpdateArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * The data needed to update a Stock.
     * 
    **/
    data: XOR<StockUpdateInput, StockUncheckedUpdateInput>
    /**
     * Choose, which Stock to update.
     * 
    **/
    where: StockWhereUniqueInput
  }


  /**
   * Stock updateMany
   */
  export type StockUpdateManyArgs = {
    /**
     * The data used to update Stocks.
     * 
    **/
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     * 
    **/
    where?: StockWhereInput
  }


  /**
   * Stock upsert
   */
  export type StockUpsertArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * The filter to search for the Stock to update in case it exists.
     * 
    **/
    where: StockWhereUniqueInput
    /**
     * In case the Stock found by the `where` argument doesn't exist, create a new Stock with this data.
     * 
    **/
    create: XOR<StockCreateInput, StockUncheckedCreateInput>
    /**
     * In case the Stock was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StockUpdateInput, StockUncheckedUpdateInput>
  }


  /**
   * Stock delete
   */
  export type StockDeleteArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * Filter which Stock to delete.
     * 
    **/
    where: StockWhereUniqueInput
  }


  /**
   * Stock deleteMany
   */
  export type StockDeleteManyArgs = {
    /**
     * Filter which Stocks to delete
     * 
    **/
    where?: StockWhereInput
  }


  /**
   * Stock without action
   */
  export type StockArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
  }



  /**
   * Model FeaturedPhoto
   */


  export type AggregateFeaturedPhoto = {
    _count: FeaturedPhotoCountAggregateOutputType | null
    _avg: FeaturedPhotoAvgAggregateOutputType | null
    _sum: FeaturedPhotoSumAggregateOutputType | null
    _min: FeaturedPhotoMinAggregateOutputType | null
    _max: FeaturedPhotoMaxAggregateOutputType | null
  }

  export type FeaturedPhotoAvgAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type FeaturedPhotoSumAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type FeaturedPhotoMinAggregateOutputType = {
    id: number | null
    photo: string | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeaturedPhotoMaxAggregateOutputType = {
    id: number | null
    photo: string | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeaturedPhotoCountAggregateOutputType = {
    id: number
    photo: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeaturedPhotoAvgAggregateInputType = {
    id?: true
    productId?: true
  }

  export type FeaturedPhotoSumAggregateInputType = {
    id?: true
    productId?: true
  }

  export type FeaturedPhotoMinAggregateInputType = {
    id?: true
    photo?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeaturedPhotoMaxAggregateInputType = {
    id?: true
    photo?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeaturedPhotoCountAggregateInputType = {
    id?: true
    photo?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeaturedPhotoAggregateArgs = {
    /**
     * Filter which FeaturedPhoto to aggregate.
     * 
    **/
    where?: FeaturedPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeaturedPhotos to fetch.
     * 
    **/
    orderBy?: Enumerable<FeaturedPhotoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FeaturedPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeaturedPhotos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeaturedPhotos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeaturedPhotos
    **/
    _count?: true | FeaturedPhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeaturedPhotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeaturedPhotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeaturedPhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeaturedPhotoMaxAggregateInputType
  }

  export type GetFeaturedPhotoAggregateType<T extends FeaturedPhotoAggregateArgs> = {
        [P in keyof T & keyof AggregateFeaturedPhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeaturedPhoto[P]>
      : GetScalarType<T[P], AggregateFeaturedPhoto[P]>
  }




  export type FeaturedPhotoGroupByArgs = {
    where?: FeaturedPhotoWhereInput
    orderBy?: Enumerable<FeaturedPhotoOrderByWithAggregationInput>
    by: Array<FeaturedPhotoScalarFieldEnum>
    having?: FeaturedPhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeaturedPhotoCountAggregateInputType | true
    _avg?: FeaturedPhotoAvgAggregateInputType
    _sum?: FeaturedPhotoSumAggregateInputType
    _min?: FeaturedPhotoMinAggregateInputType
    _max?: FeaturedPhotoMaxAggregateInputType
  }


  export type FeaturedPhotoGroupByOutputType = {
    id: number
    photo: string
    productId: number
    createdAt: Date
    updatedAt: Date
    _count: FeaturedPhotoCountAggregateOutputType | null
    _avg: FeaturedPhotoAvgAggregateOutputType | null
    _sum: FeaturedPhotoSumAggregateOutputType | null
    _min: FeaturedPhotoMinAggregateOutputType | null
    _max: FeaturedPhotoMaxAggregateOutputType | null
  }

  type GetFeaturedPhotoGroupByPayload<T extends FeaturedPhotoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FeaturedPhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeaturedPhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeaturedPhotoGroupByOutputType[P]>
            : GetScalarType<T[P], FeaturedPhotoGroupByOutputType[P]>
        }
      >
    >


  export type FeaturedPhotoSelect = {
    id?: boolean
    product?: boolean | ProductArgs
    photo?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FeaturedPhotoInclude = {
    product?: boolean | ProductArgs
  }

  export type FeaturedPhotoGetPayload<
    S extends boolean | null | undefined | FeaturedPhotoArgs,
    U = keyof S
      > = S extends true
        ? FeaturedPhoto
    : S extends undefined
    ? never
    : S extends FeaturedPhotoArgs | FeaturedPhotoFindManyArgs
    ?'include' extends U
    ? FeaturedPhoto  & {
    [P in TrueKeys<S['include']>]:
        P extends 'product' ? ProductGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'product' ? ProductGetPayload<S['select'][P]> :  P extends keyof FeaturedPhoto ? FeaturedPhoto[P] : never
  } 
    : FeaturedPhoto
  : FeaturedPhoto


  type FeaturedPhotoCountArgs = Merge<
    Omit<FeaturedPhotoFindManyArgs, 'select' | 'include'> & {
      select?: FeaturedPhotoCountAggregateInputType | true
    }
  >

  export interface FeaturedPhotoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one FeaturedPhoto that matches the filter.
     * @param {FeaturedPhotoFindUniqueArgs} args - Arguments to find a FeaturedPhoto
     * @example
     * // Get one FeaturedPhoto
     * const featuredPhoto = await prisma.featuredPhoto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeaturedPhotoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FeaturedPhotoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FeaturedPhoto'> extends True ? CheckSelect<T, Prisma__FeaturedPhotoClient<FeaturedPhoto>, Prisma__FeaturedPhotoClient<FeaturedPhotoGetPayload<T>>> : CheckSelect<T, Prisma__FeaturedPhotoClient<FeaturedPhoto | null >, Prisma__FeaturedPhotoClient<FeaturedPhotoGetPayload<T> | null >>

    /**
     * Find the first FeaturedPhoto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturedPhotoFindFirstArgs} args - Arguments to find a FeaturedPhoto
     * @example
     * // Get one FeaturedPhoto
     * const featuredPhoto = await prisma.featuredPhoto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeaturedPhotoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FeaturedPhotoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FeaturedPhoto'> extends True ? CheckSelect<T, Prisma__FeaturedPhotoClient<FeaturedPhoto>, Prisma__FeaturedPhotoClient<FeaturedPhotoGetPayload<T>>> : CheckSelect<T, Prisma__FeaturedPhotoClient<FeaturedPhoto | null >, Prisma__FeaturedPhotoClient<FeaturedPhotoGetPayload<T> | null >>

    /**
     * Find zero or more FeaturedPhotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturedPhotoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeaturedPhotos
     * const featuredPhotos = await prisma.featuredPhoto.findMany()
     * 
     * // Get first 10 FeaturedPhotos
     * const featuredPhotos = await prisma.featuredPhoto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featuredPhotoWithIdOnly = await prisma.featuredPhoto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeaturedPhotoFindManyArgs>(
      args?: SelectSubset<T, FeaturedPhotoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<FeaturedPhoto>>, PrismaPromise<Array<FeaturedPhotoGetPayload<T>>>>

    /**
     * Create a FeaturedPhoto.
     * @param {FeaturedPhotoCreateArgs} args - Arguments to create a FeaturedPhoto.
     * @example
     * // Create one FeaturedPhoto
     * const FeaturedPhoto = await prisma.featuredPhoto.create({
     *   data: {
     *     // ... data to create a FeaturedPhoto
     *   }
     * })
     * 
    **/
    create<T extends FeaturedPhotoCreateArgs>(
      args: SelectSubset<T, FeaturedPhotoCreateArgs>
    ): CheckSelect<T, Prisma__FeaturedPhotoClient<FeaturedPhoto>, Prisma__FeaturedPhotoClient<FeaturedPhotoGetPayload<T>>>

    /**
     * Create many FeaturedPhotos.
     *     @param {FeaturedPhotoCreateManyArgs} args - Arguments to create many FeaturedPhotos.
     *     @example
     *     // Create many FeaturedPhotos
     *     const featuredPhoto = await prisma.featuredPhoto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeaturedPhotoCreateManyArgs>(
      args?: SelectSubset<T, FeaturedPhotoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FeaturedPhoto.
     * @param {FeaturedPhotoDeleteArgs} args - Arguments to delete one FeaturedPhoto.
     * @example
     * // Delete one FeaturedPhoto
     * const FeaturedPhoto = await prisma.featuredPhoto.delete({
     *   where: {
     *     // ... filter to delete one FeaturedPhoto
     *   }
     * })
     * 
    **/
    delete<T extends FeaturedPhotoDeleteArgs>(
      args: SelectSubset<T, FeaturedPhotoDeleteArgs>
    ): CheckSelect<T, Prisma__FeaturedPhotoClient<FeaturedPhoto>, Prisma__FeaturedPhotoClient<FeaturedPhotoGetPayload<T>>>

    /**
     * Update one FeaturedPhoto.
     * @param {FeaturedPhotoUpdateArgs} args - Arguments to update one FeaturedPhoto.
     * @example
     * // Update one FeaturedPhoto
     * const featuredPhoto = await prisma.featuredPhoto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeaturedPhotoUpdateArgs>(
      args: SelectSubset<T, FeaturedPhotoUpdateArgs>
    ): CheckSelect<T, Prisma__FeaturedPhotoClient<FeaturedPhoto>, Prisma__FeaturedPhotoClient<FeaturedPhotoGetPayload<T>>>

    /**
     * Delete zero or more FeaturedPhotos.
     * @param {FeaturedPhotoDeleteManyArgs} args - Arguments to filter FeaturedPhotos to delete.
     * @example
     * // Delete a few FeaturedPhotos
     * const { count } = await prisma.featuredPhoto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeaturedPhotoDeleteManyArgs>(
      args?: SelectSubset<T, FeaturedPhotoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeaturedPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturedPhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeaturedPhotos
     * const featuredPhoto = await prisma.featuredPhoto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeaturedPhotoUpdateManyArgs>(
      args: SelectSubset<T, FeaturedPhotoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FeaturedPhoto.
     * @param {FeaturedPhotoUpsertArgs} args - Arguments to update or create a FeaturedPhoto.
     * @example
     * // Update or create a FeaturedPhoto
     * const featuredPhoto = await prisma.featuredPhoto.upsert({
     *   create: {
     *     // ... data to create a FeaturedPhoto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeaturedPhoto we want to update
     *   }
     * })
    **/
    upsert<T extends FeaturedPhotoUpsertArgs>(
      args: SelectSubset<T, FeaturedPhotoUpsertArgs>
    ): CheckSelect<T, Prisma__FeaturedPhotoClient<FeaturedPhoto>, Prisma__FeaturedPhotoClient<FeaturedPhotoGetPayload<T>>>

    /**
     * Count the number of FeaturedPhotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturedPhotoCountArgs} args - Arguments to filter FeaturedPhotos to count.
     * @example
     * // Count the number of FeaturedPhotos
     * const count = await prisma.featuredPhoto.count({
     *   where: {
     *     // ... the filter for the FeaturedPhotos we want to count
     *   }
     * })
    **/
    count<T extends FeaturedPhotoCountArgs>(
      args?: Subset<T, FeaturedPhotoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeaturedPhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeaturedPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturedPhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeaturedPhotoAggregateArgs>(args: Subset<T, FeaturedPhotoAggregateArgs>): PrismaPromise<GetFeaturedPhotoAggregateType<T>>

    /**
     * Group by FeaturedPhoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeaturedPhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeaturedPhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeaturedPhotoGroupByArgs['orderBy'] }
        : { orderBy?: FeaturedPhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeaturedPhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeaturedPhotoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeaturedPhoto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FeaturedPhotoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * FeaturedPhoto findUnique
   */
  export type FeaturedPhotoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the FeaturedPhoto
     * 
    **/
    select?: FeaturedPhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeaturedPhotoInclude | null
    /**
     * Throw an Error if a FeaturedPhoto can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FeaturedPhoto to fetch.
     * 
    **/
    where: FeaturedPhotoWhereUniqueInput
  }


  /**
   * FeaturedPhoto findFirst
   */
  export type FeaturedPhotoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the FeaturedPhoto
     * 
    **/
    select?: FeaturedPhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeaturedPhotoInclude | null
    /**
     * Throw an Error if a FeaturedPhoto can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FeaturedPhoto to fetch.
     * 
    **/
    where?: FeaturedPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeaturedPhotos to fetch.
     * 
    **/
    orderBy?: Enumerable<FeaturedPhotoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeaturedPhotos.
     * 
    **/
    cursor?: FeaturedPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeaturedPhotos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeaturedPhotos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeaturedPhotos.
     * 
    **/
    distinct?: Enumerable<FeaturedPhotoScalarFieldEnum>
  }


  /**
   * FeaturedPhoto findMany
   */
  export type FeaturedPhotoFindManyArgs = {
    /**
     * Select specific fields to fetch from the FeaturedPhoto
     * 
    **/
    select?: FeaturedPhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeaturedPhotoInclude | null
    /**
     * Filter, which FeaturedPhotos to fetch.
     * 
    **/
    where?: FeaturedPhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeaturedPhotos to fetch.
     * 
    **/
    orderBy?: Enumerable<FeaturedPhotoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeaturedPhotos.
     * 
    **/
    cursor?: FeaturedPhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeaturedPhotos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeaturedPhotos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FeaturedPhotoScalarFieldEnum>
  }


  /**
   * FeaturedPhoto create
   */
  export type FeaturedPhotoCreateArgs = {
    /**
     * Select specific fields to fetch from the FeaturedPhoto
     * 
    **/
    select?: FeaturedPhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeaturedPhotoInclude | null
    /**
     * The data needed to create a FeaturedPhoto.
     * 
    **/
    data: XOR<FeaturedPhotoCreateInput, FeaturedPhotoUncheckedCreateInput>
  }


  /**
   * FeaturedPhoto createMany
   */
  export type FeaturedPhotoCreateManyArgs = {
    /**
     * The data used to create many FeaturedPhotos.
     * 
    **/
    data: Enumerable<FeaturedPhotoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FeaturedPhoto update
   */
  export type FeaturedPhotoUpdateArgs = {
    /**
     * Select specific fields to fetch from the FeaturedPhoto
     * 
    **/
    select?: FeaturedPhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeaturedPhotoInclude | null
    /**
     * The data needed to update a FeaturedPhoto.
     * 
    **/
    data: XOR<FeaturedPhotoUpdateInput, FeaturedPhotoUncheckedUpdateInput>
    /**
     * Choose, which FeaturedPhoto to update.
     * 
    **/
    where: FeaturedPhotoWhereUniqueInput
  }


  /**
   * FeaturedPhoto updateMany
   */
  export type FeaturedPhotoUpdateManyArgs = {
    /**
     * The data used to update FeaturedPhotos.
     * 
    **/
    data: XOR<FeaturedPhotoUpdateManyMutationInput, FeaturedPhotoUncheckedUpdateManyInput>
    /**
     * Filter which FeaturedPhotos to update
     * 
    **/
    where?: FeaturedPhotoWhereInput
  }


  /**
   * FeaturedPhoto upsert
   */
  export type FeaturedPhotoUpsertArgs = {
    /**
     * Select specific fields to fetch from the FeaturedPhoto
     * 
    **/
    select?: FeaturedPhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeaturedPhotoInclude | null
    /**
     * The filter to search for the FeaturedPhoto to update in case it exists.
     * 
    **/
    where: FeaturedPhotoWhereUniqueInput
    /**
     * In case the FeaturedPhoto found by the `where` argument doesn't exist, create a new FeaturedPhoto with this data.
     * 
    **/
    create: XOR<FeaturedPhotoCreateInput, FeaturedPhotoUncheckedCreateInput>
    /**
     * In case the FeaturedPhoto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FeaturedPhotoUpdateInput, FeaturedPhotoUncheckedUpdateInput>
  }


  /**
   * FeaturedPhoto delete
   */
  export type FeaturedPhotoDeleteArgs = {
    /**
     * Select specific fields to fetch from the FeaturedPhoto
     * 
    **/
    select?: FeaturedPhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeaturedPhotoInclude | null
    /**
     * Filter which FeaturedPhoto to delete.
     * 
    **/
    where: FeaturedPhotoWhereUniqueInput
  }


  /**
   * FeaturedPhoto deleteMany
   */
  export type FeaturedPhotoDeleteManyArgs = {
    /**
     * Filter which FeaturedPhotos to delete
     * 
    **/
    where?: FeaturedPhotoWhereInput
  }


  /**
   * FeaturedPhoto without action
   */
  export type FeaturedPhotoArgs = {
    /**
     * Select specific fields to fetch from the FeaturedPhoto
     * 
    **/
    select?: FeaturedPhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeaturedPhotoInclude | null
  }



  /**
   * Model Order
   */


  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    total_price: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    total_price: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    total_price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    total_price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    productId: number
    total_price: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    total_price?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    total_price?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    total_price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    total_price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    total_price?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs = {
    /**
     * Filter which Order to aggregate.
     * 
    **/
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs = {
    where?: OrderWhereInput
    orderBy?: Enumerable<OrderOrderByWithAggregationInput>
    by: Array<OrderScalarFieldEnum>
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }


  export type OrderGroupByOutputType = {
    id: number
    userId: number
    productId: number
    total_price: number
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect = {
    id?: boolean
    userId?: boolean
    productId?: boolean
    products?: boolean | OrderedProductFindManyArgs
    shipping_address?: boolean | ShippingAddressArgs
    total_price?: boolean
    user?: boolean | UserArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | OrderCountOutputTypeArgs
  }

  export type OrderInclude = {
    products?: boolean | OrderedProductFindManyArgs
    shipping_address?: boolean | ShippingAddressArgs
    user?: boolean | UserArgs
    _count?: boolean | OrderCountOutputTypeArgs
  }

  export type OrderGetPayload<
    S extends boolean | null | undefined | OrderArgs,
    U = keyof S
      > = S extends true
        ? Order
    : S extends undefined
    ? never
    : S extends OrderArgs | OrderFindManyArgs
    ?'include' extends U
    ? Order  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? Array < OrderedProductGetPayload<S['include'][P]>>  :
        P extends 'shipping_address' ? ShippingAddressGetPayload<S['include'][P]> | null :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? OrderCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? Array < OrderedProductGetPayload<S['select'][P]>>  :
        P extends 'shipping_address' ? ShippingAddressGetPayload<S['select'][P]> | null :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? OrderCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Order ? Order[P] : never
  } 
    : Order
  : Order


  type OrderCountArgs = Merge<
    Omit<OrderFindManyArgs, 'select' | 'include'> & {
      select?: OrderCountAggregateInputType | true
    }
  >

  export interface OrderDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Order'> extends True ? CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>> : CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Order'> extends True ? CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>> : CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs>(
      args?: SelectSubset<T, OrderFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Order>>, PrismaPromise<Array<OrderGetPayload<T>>>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs>(
      args: SelectSubset<T, OrderCreateArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Create many Orders.
     *     @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const order = await prisma.order.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderCreateManyArgs>(
      args?: SelectSubset<T, OrderCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs>(
      args: SelectSubset<T, OrderDeleteArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs>(
      args: SelectSubset<T, OrderUpdateArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs>(
      args?: SelectSubset<T, OrderDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs>(
      args: SelectSubset<T, OrderUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs>(
      args: SelectSubset<T, OrderUpsertArgs>
    ): CheckSelect<T, Prisma__OrderClient<Order>, Prisma__OrderClient<OrderGetPayload<T>>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends OrderedProductFindManyArgs = {}>(args?: Subset<T, OrderedProductFindManyArgs>): CheckSelect<T, PrismaPromise<Array<OrderedProduct>>, PrismaPromise<Array<OrderedProductGetPayload<T>>>>;

    shipping_address<T extends ShippingAddressArgs = {}>(args?: Subset<T, ShippingAddressArgs>): CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress | null >, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * Throw an Error if a Order can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Order to fetch.
     * 
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * Throw an Error if a Order can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Order to fetch.
     * 
    **/
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     * 
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     * 
    **/
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order findMany
   */
  export type OrderFindManyArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * Filter, which Orders to fetch.
     * 
    **/
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     * 
    **/
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order create
   */
  export type OrderCreateArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * The data needed to create a Order.
     * 
    **/
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }


  /**
   * Order createMany
   */
  export type OrderCreateManyArgs = {
    /**
     * The data used to create many Orders.
     * 
    **/
    data: Enumerable<OrderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * The data needed to update a Order.
     * 
    **/
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     * 
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs = {
    /**
     * The data used to update Orders.
     * 
    **/
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     * 
    **/
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * The filter to search for the Order to update in case it exists.
     * 
    **/
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     * 
    **/
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
    /**
     * Filter which Order to delete.
     * 
    **/
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs = {
    /**
     * Filter which Orders to delete
     * 
    **/
    where?: OrderWhereInput
  }


  /**
   * Order without action
   */
  export type OrderArgs = {
    /**
     * Select specific fields to fetch from the Order
     * 
    **/
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderInclude | null
  }



  /**
   * Model OrderedProduct
   */


  export type AggregateOrderedProduct = {
    _count: OrderedProductCountAggregateOutputType | null
    _avg: OrderedProductAvgAggregateOutputType | null
    _sum: OrderedProductSumAggregateOutputType | null
    _min: OrderedProductMinAggregateOutputType | null
    _max: OrderedProductMaxAggregateOutputType | null
  }

  export type OrderedProductAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    price: number | null
    total: number | null
    sub_total: number | null
    discount: number | null
    orderId: number | null
    productId: number | null
    optionId: number | null
  }

  export type OrderedProductSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    price: number | null
    total: number | null
    sub_total: number | null
    discount: number | null
    orderId: number | null
    productId: number | null
    optionId: number | null
  }

  export type OrderedProductMinAggregateOutputType = {
    id: number | null
    quantity: number | null
    price: number | null
    total: number | null
    sub_total: number | null
    discount: number | null
    orderId: number | null
    productId: number | null
    optionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderedProductMaxAggregateOutputType = {
    id: number | null
    quantity: number | null
    price: number | null
    total: number | null
    sub_total: number | null
    discount: number | null
    orderId: number | null
    productId: number | null
    optionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderedProductCountAggregateOutputType = {
    id: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    orderId: number
    productId: number
    optionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderedProductAvgAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    total?: true
    sub_total?: true
    discount?: true
    orderId?: true
    productId?: true
    optionId?: true
  }

  export type OrderedProductSumAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    total?: true
    sub_total?: true
    discount?: true
    orderId?: true
    productId?: true
    optionId?: true
  }

  export type OrderedProductMinAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    total?: true
    sub_total?: true
    discount?: true
    orderId?: true
    productId?: true
    optionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderedProductMaxAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    total?: true
    sub_total?: true
    discount?: true
    orderId?: true
    productId?: true
    optionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderedProductCountAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    total?: true
    sub_total?: true
    discount?: true
    orderId?: true
    productId?: true
    optionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderedProductAggregateArgs = {
    /**
     * Filter which OrderedProduct to aggregate.
     * 
    **/
    where?: OrderedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderedProducts to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderedProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrderedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderedProducts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderedProducts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderedProducts
    **/
    _count?: true | OrderedProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderedProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderedProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderedProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderedProductMaxAggregateInputType
  }

  export type GetOrderedProductAggregateType<T extends OrderedProductAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderedProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderedProduct[P]>
      : GetScalarType<T[P], AggregateOrderedProduct[P]>
  }




  export type OrderedProductGroupByArgs = {
    where?: OrderedProductWhereInput
    orderBy?: Enumerable<OrderedProductOrderByWithAggregationInput>
    by: Array<OrderedProductScalarFieldEnum>
    having?: OrderedProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderedProductCountAggregateInputType | true
    _avg?: OrderedProductAvgAggregateInputType
    _sum?: OrderedProductSumAggregateInputType
    _min?: OrderedProductMinAggregateInputType
    _max?: OrderedProductMaxAggregateInputType
  }


  export type OrderedProductGroupByOutputType = {
    id: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    orderId: number
    productId: number
    optionId: number
    createdAt: Date
    updatedAt: Date
    _count: OrderedProductCountAggregateOutputType | null
    _avg: OrderedProductAvgAggregateOutputType | null
    _sum: OrderedProductSumAggregateOutputType | null
    _min: OrderedProductMinAggregateOutputType | null
    _max: OrderedProductMaxAggregateOutputType | null
  }

  type GetOrderedProductGroupByPayload<T extends OrderedProductGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OrderedProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderedProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderedProductGroupByOutputType[P]>
            : GetScalarType<T[P], OrderedProductGroupByOutputType[P]>
        }
      >
    >


  export type OrderedProductSelect = {
    id?: boolean
    quantity?: boolean
    price?: boolean
    total?: boolean
    sub_total?: boolean
    discount?: boolean
    orderId?: boolean
    productId?: boolean
    optionId?: boolean
    order?: boolean | OrderArgs
    product?: boolean | ProductArgs
    option?: boolean | OptionArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderedProductInclude = {
    order?: boolean | OrderArgs
    product?: boolean | ProductArgs
    option?: boolean | OptionArgs
  }

  export type OrderedProductGetPayload<
    S extends boolean | null | undefined | OrderedProductArgs,
    U = keyof S
      > = S extends true
        ? OrderedProduct
    : S extends undefined
    ? never
    : S extends OrderedProductArgs | OrderedProductFindManyArgs
    ?'include' extends U
    ? OrderedProduct  & {
    [P in TrueKeys<S['include']>]:
        P extends 'order' ? OrderGetPayload<S['include'][P]> :
        P extends 'product' ? ProductGetPayload<S['include'][P]> :
        P extends 'option' ? OptionGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'order' ? OrderGetPayload<S['select'][P]> :
        P extends 'product' ? ProductGetPayload<S['select'][P]> :
        P extends 'option' ? OptionGetPayload<S['select'][P]> :  P extends keyof OrderedProduct ? OrderedProduct[P] : never
  } 
    : OrderedProduct
  : OrderedProduct


  type OrderedProductCountArgs = Merge<
    Omit<OrderedProductFindManyArgs, 'select' | 'include'> & {
      select?: OrderedProductCountAggregateInputType | true
    }
  >

  export interface OrderedProductDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one OrderedProduct that matches the filter.
     * @param {OrderedProductFindUniqueArgs} args - Arguments to find a OrderedProduct
     * @example
     * // Get one OrderedProduct
     * const orderedProduct = await prisma.orderedProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderedProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrderedProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OrderedProduct'> extends True ? CheckSelect<T, Prisma__OrderedProductClient<OrderedProduct>, Prisma__OrderedProductClient<OrderedProductGetPayload<T>>> : CheckSelect<T, Prisma__OrderedProductClient<OrderedProduct | null >, Prisma__OrderedProductClient<OrderedProductGetPayload<T> | null >>

    /**
     * Find the first OrderedProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedProductFindFirstArgs} args - Arguments to find a OrderedProduct
     * @example
     * // Get one OrderedProduct
     * const orderedProduct = await prisma.orderedProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderedProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrderedProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OrderedProduct'> extends True ? CheckSelect<T, Prisma__OrderedProductClient<OrderedProduct>, Prisma__OrderedProductClient<OrderedProductGetPayload<T>>> : CheckSelect<T, Prisma__OrderedProductClient<OrderedProduct | null >, Prisma__OrderedProductClient<OrderedProductGetPayload<T> | null >>

    /**
     * Find zero or more OrderedProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderedProducts
     * const orderedProducts = await prisma.orderedProduct.findMany()
     * 
     * // Get first 10 OrderedProducts
     * const orderedProducts = await prisma.orderedProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderedProductWithIdOnly = await prisma.orderedProduct.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderedProductFindManyArgs>(
      args?: SelectSubset<T, OrderedProductFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<OrderedProduct>>, PrismaPromise<Array<OrderedProductGetPayload<T>>>>

    /**
     * Create a OrderedProduct.
     * @param {OrderedProductCreateArgs} args - Arguments to create a OrderedProduct.
     * @example
     * // Create one OrderedProduct
     * const OrderedProduct = await prisma.orderedProduct.create({
     *   data: {
     *     // ... data to create a OrderedProduct
     *   }
     * })
     * 
    **/
    create<T extends OrderedProductCreateArgs>(
      args: SelectSubset<T, OrderedProductCreateArgs>
    ): CheckSelect<T, Prisma__OrderedProductClient<OrderedProduct>, Prisma__OrderedProductClient<OrderedProductGetPayload<T>>>

    /**
     * Create many OrderedProducts.
     *     @param {OrderedProductCreateManyArgs} args - Arguments to create many OrderedProducts.
     *     @example
     *     // Create many OrderedProducts
     *     const orderedProduct = await prisma.orderedProduct.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderedProductCreateManyArgs>(
      args?: SelectSubset<T, OrderedProductCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a OrderedProduct.
     * @param {OrderedProductDeleteArgs} args - Arguments to delete one OrderedProduct.
     * @example
     * // Delete one OrderedProduct
     * const OrderedProduct = await prisma.orderedProduct.delete({
     *   where: {
     *     // ... filter to delete one OrderedProduct
     *   }
     * })
     * 
    **/
    delete<T extends OrderedProductDeleteArgs>(
      args: SelectSubset<T, OrderedProductDeleteArgs>
    ): CheckSelect<T, Prisma__OrderedProductClient<OrderedProduct>, Prisma__OrderedProductClient<OrderedProductGetPayload<T>>>

    /**
     * Update one OrderedProduct.
     * @param {OrderedProductUpdateArgs} args - Arguments to update one OrderedProduct.
     * @example
     * // Update one OrderedProduct
     * const orderedProduct = await prisma.orderedProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderedProductUpdateArgs>(
      args: SelectSubset<T, OrderedProductUpdateArgs>
    ): CheckSelect<T, Prisma__OrderedProductClient<OrderedProduct>, Prisma__OrderedProductClient<OrderedProductGetPayload<T>>>

    /**
     * Delete zero or more OrderedProducts.
     * @param {OrderedProductDeleteManyArgs} args - Arguments to filter OrderedProducts to delete.
     * @example
     * // Delete a few OrderedProducts
     * const { count } = await prisma.orderedProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderedProductDeleteManyArgs>(
      args?: SelectSubset<T, OrderedProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderedProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderedProducts
     * const orderedProduct = await prisma.orderedProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderedProductUpdateManyArgs>(
      args: SelectSubset<T, OrderedProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderedProduct.
     * @param {OrderedProductUpsertArgs} args - Arguments to update or create a OrderedProduct.
     * @example
     * // Update or create a OrderedProduct
     * const orderedProduct = await prisma.orderedProduct.upsert({
     *   create: {
     *     // ... data to create a OrderedProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderedProduct we want to update
     *   }
     * })
    **/
    upsert<T extends OrderedProductUpsertArgs>(
      args: SelectSubset<T, OrderedProductUpsertArgs>
    ): CheckSelect<T, Prisma__OrderedProductClient<OrderedProduct>, Prisma__OrderedProductClient<OrderedProductGetPayload<T>>>

    /**
     * Count the number of OrderedProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedProductCountArgs} args - Arguments to filter OrderedProducts to count.
     * @example
     * // Count the number of OrderedProducts
     * const count = await prisma.orderedProduct.count({
     *   where: {
     *     // ... the filter for the OrderedProducts we want to count
     *   }
     * })
    **/
    count<T extends OrderedProductCountArgs>(
      args?: Subset<T, OrderedProductCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderedProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderedProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderedProductAggregateArgs>(args: Subset<T, OrderedProductAggregateArgs>): PrismaPromise<GetOrderedProductAggregateType<T>>

    /**
     * Group by OrderedProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderedProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderedProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderedProductGroupByArgs['orderBy'] }
        : { orderBy?: OrderedProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderedProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderedProductGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderedProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderedProductClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    order<T extends OrderArgs = {}>(args?: Subset<T, OrderArgs>): CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>;

    product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    option<T extends OptionArgs = {}>(args?: Subset<T, OptionArgs>): CheckSelect<T, Prisma__OptionClient<Option | null >, Prisma__OptionClient<OptionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OrderedProduct findUnique
   */
  export type OrderedProductFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the OrderedProduct
     * 
    **/
    select?: OrderedProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderedProductInclude | null
    /**
     * Throw an Error if a OrderedProduct can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OrderedProduct to fetch.
     * 
    **/
    where: OrderedProductWhereUniqueInput
  }


  /**
   * OrderedProduct findFirst
   */
  export type OrderedProductFindFirstArgs = {
    /**
     * Select specific fields to fetch from the OrderedProduct
     * 
    **/
    select?: OrderedProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderedProductInclude | null
    /**
     * Throw an Error if a OrderedProduct can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OrderedProduct to fetch.
     * 
    **/
    where?: OrderedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderedProducts to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderedProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderedProducts.
     * 
    **/
    cursor?: OrderedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderedProducts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderedProducts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderedProducts.
     * 
    **/
    distinct?: Enumerable<OrderedProductScalarFieldEnum>
  }


  /**
   * OrderedProduct findMany
   */
  export type OrderedProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the OrderedProduct
     * 
    **/
    select?: OrderedProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderedProductInclude | null
    /**
     * Filter, which OrderedProducts to fetch.
     * 
    **/
    where?: OrderedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderedProducts to fetch.
     * 
    **/
    orderBy?: Enumerable<OrderedProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderedProducts.
     * 
    **/
    cursor?: OrderedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderedProducts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderedProducts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrderedProductScalarFieldEnum>
  }


  /**
   * OrderedProduct create
   */
  export type OrderedProductCreateArgs = {
    /**
     * Select specific fields to fetch from the OrderedProduct
     * 
    **/
    select?: OrderedProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderedProductInclude | null
    /**
     * The data needed to create a OrderedProduct.
     * 
    **/
    data: XOR<OrderedProductCreateInput, OrderedProductUncheckedCreateInput>
  }


  /**
   * OrderedProduct createMany
   */
  export type OrderedProductCreateManyArgs = {
    /**
     * The data used to create many OrderedProducts.
     * 
    **/
    data: Enumerable<OrderedProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OrderedProduct update
   */
  export type OrderedProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the OrderedProduct
     * 
    **/
    select?: OrderedProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderedProductInclude | null
    /**
     * The data needed to update a OrderedProduct.
     * 
    **/
    data: XOR<OrderedProductUpdateInput, OrderedProductUncheckedUpdateInput>
    /**
     * Choose, which OrderedProduct to update.
     * 
    **/
    where: OrderedProductWhereUniqueInput
  }


  /**
   * OrderedProduct updateMany
   */
  export type OrderedProductUpdateManyArgs = {
    /**
     * The data used to update OrderedProducts.
     * 
    **/
    data: XOR<OrderedProductUpdateManyMutationInput, OrderedProductUncheckedUpdateManyInput>
    /**
     * Filter which OrderedProducts to update
     * 
    **/
    where?: OrderedProductWhereInput
  }


  /**
   * OrderedProduct upsert
   */
  export type OrderedProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the OrderedProduct
     * 
    **/
    select?: OrderedProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderedProductInclude | null
    /**
     * The filter to search for the OrderedProduct to update in case it exists.
     * 
    **/
    where: OrderedProductWhereUniqueInput
    /**
     * In case the OrderedProduct found by the `where` argument doesn't exist, create a new OrderedProduct with this data.
     * 
    **/
    create: XOR<OrderedProductCreateInput, OrderedProductUncheckedCreateInput>
    /**
     * In case the OrderedProduct was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrderedProductUpdateInput, OrderedProductUncheckedUpdateInput>
  }


  /**
   * OrderedProduct delete
   */
  export type OrderedProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the OrderedProduct
     * 
    **/
    select?: OrderedProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderedProductInclude | null
    /**
     * Filter which OrderedProduct to delete.
     * 
    **/
    where: OrderedProductWhereUniqueInput
  }


  /**
   * OrderedProduct deleteMany
   */
  export type OrderedProductDeleteManyArgs = {
    /**
     * Filter which OrderedProducts to delete
     * 
    **/
    where?: OrderedProductWhereInput
  }


  /**
   * OrderedProduct without action
   */
  export type OrderedProductArgs = {
    /**
     * Select specific fields to fetch from the OrderedProduct
     * 
    **/
    select?: OrderedProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrderedProductInclude | null
  }



  /**
   * Model Option
   */


  export type AggregateOption = {
    _count: OptionCountAggregateOutputType | null
    _avg: OptionAvgAggregateOutputType | null
    _sum: OptionSumAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
  }

  export type OptionAvgAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type OptionSumAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type OptionMinAggregateOutputType = {
    id: number | null
    name: string | null
    value: string | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OptionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    value: string | null
    productId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OptionCountAggregateOutputType = {
    id: number
    name: number
    value: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OptionAvgAggregateInputType = {
    id?: true
    productId?: true
  }

  export type OptionSumAggregateInputType = {
    id?: true
    productId?: true
  }

  export type OptionMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OptionMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OptionCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OptionAggregateArgs = {
    /**
     * Filter which Option to aggregate.
     * 
    **/
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     * 
    **/
    orderBy?: Enumerable<OptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Options
    **/
    _count?: true | OptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionMaxAggregateInputType
  }

  export type GetOptionAggregateType<T extends OptionAggregateArgs> = {
        [P in keyof T & keyof AggregateOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOption[P]>
      : GetScalarType<T[P], AggregateOption[P]>
  }




  export type OptionGroupByArgs = {
    where?: OptionWhereInput
    orderBy?: Enumerable<OptionOrderByWithAggregationInput>
    by: Array<OptionScalarFieldEnum>
    having?: OptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptionCountAggregateInputType | true
    _avg?: OptionAvgAggregateInputType
    _sum?: OptionSumAggregateInputType
    _min?: OptionMinAggregateInputType
    _max?: OptionMaxAggregateInputType
  }


  export type OptionGroupByOutputType = {
    id: number
    name: string
    value: string
    productId: number
    createdAt: Date
    updatedAt: Date
    _count: OptionCountAggregateOutputType | null
    _avg: OptionAvgAggregateOutputType | null
    _sum: OptionSumAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
  }

  type GetOptionGroupByPayload<T extends OptionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionGroupByOutputType[P]>
            : GetScalarType<T[P], OptionGroupByOutputType[P]>
        }
      >
    >


  export type OptionSelect = {
    id?: boolean
    name?: boolean
    value?: boolean
    productId?: boolean
    product?: boolean | ProductArgs
    OrderedProduct?: boolean | OrderedProductFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | OptionCountOutputTypeArgs
  }

  export type OptionInclude = {
    product?: boolean | ProductArgs
    OrderedProduct?: boolean | OrderedProductFindManyArgs
    _count?: boolean | OptionCountOutputTypeArgs
  }

  export type OptionGetPayload<
    S extends boolean | null | undefined | OptionArgs,
    U = keyof S
      > = S extends true
        ? Option
    : S extends undefined
    ? never
    : S extends OptionArgs | OptionFindManyArgs
    ?'include' extends U
    ? Option  & {
    [P in TrueKeys<S['include']>]:
        P extends 'product' ? ProductGetPayload<S['include'][P]> :
        P extends 'OrderedProduct' ? Array < OrderedProductGetPayload<S['include'][P]>>  :
        P extends '_count' ? OptionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'product' ? ProductGetPayload<S['select'][P]> :
        P extends 'OrderedProduct' ? Array < OrderedProductGetPayload<S['select'][P]>>  :
        P extends '_count' ? OptionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Option ? Option[P] : never
  } 
    : Option
  : Option


  type OptionCountArgs = Merge<
    Omit<OptionFindManyArgs, 'select' | 'include'> & {
      select?: OptionCountAggregateInputType | true
    }
  >

  export interface OptionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Option that matches the filter.
     * @param {OptionFindUniqueArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OptionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OptionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Option'> extends True ? CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>> : CheckSelect<T, Prisma__OptionClient<Option | null >, Prisma__OptionClient<OptionGetPayload<T> | null >>

    /**
     * Find the first Option that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindFirstArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OptionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OptionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Option'> extends True ? CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>> : CheckSelect<T, Prisma__OptionClient<Option | null >, Prisma__OptionClient<OptionGetPayload<T> | null >>

    /**
     * Find zero or more Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Options
     * const options = await prisma.option.findMany()
     * 
     * // Get first 10 Options
     * const options = await prisma.option.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const optionWithIdOnly = await prisma.option.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OptionFindManyArgs>(
      args?: SelectSubset<T, OptionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Option>>, PrismaPromise<Array<OptionGetPayload<T>>>>

    /**
     * Create a Option.
     * @param {OptionCreateArgs} args - Arguments to create a Option.
     * @example
     * // Create one Option
     * const Option = await prisma.option.create({
     *   data: {
     *     // ... data to create a Option
     *   }
     * })
     * 
    **/
    create<T extends OptionCreateArgs>(
      args: SelectSubset<T, OptionCreateArgs>
    ): CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>>

    /**
     * Create many Options.
     *     @param {OptionCreateManyArgs} args - Arguments to create many Options.
     *     @example
     *     // Create many Options
     *     const option = await prisma.option.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OptionCreateManyArgs>(
      args?: SelectSubset<T, OptionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Option.
     * @param {OptionDeleteArgs} args - Arguments to delete one Option.
     * @example
     * // Delete one Option
     * const Option = await prisma.option.delete({
     *   where: {
     *     // ... filter to delete one Option
     *   }
     * })
     * 
    **/
    delete<T extends OptionDeleteArgs>(
      args: SelectSubset<T, OptionDeleteArgs>
    ): CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>>

    /**
     * Update one Option.
     * @param {OptionUpdateArgs} args - Arguments to update one Option.
     * @example
     * // Update one Option
     * const option = await prisma.option.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OptionUpdateArgs>(
      args: SelectSubset<T, OptionUpdateArgs>
    ): CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>>

    /**
     * Delete zero or more Options.
     * @param {OptionDeleteManyArgs} args - Arguments to filter Options to delete.
     * @example
     * // Delete a few Options
     * const { count } = await prisma.option.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OptionDeleteManyArgs>(
      args?: SelectSubset<T, OptionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Options
     * const option = await prisma.option.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OptionUpdateManyArgs>(
      args: SelectSubset<T, OptionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Option.
     * @param {OptionUpsertArgs} args - Arguments to update or create a Option.
     * @example
     * // Update or create a Option
     * const option = await prisma.option.upsert({
     *   create: {
     *     // ... data to create a Option
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Option we want to update
     *   }
     * })
    **/
    upsert<T extends OptionUpsertArgs>(
      args: SelectSubset<T, OptionUpsertArgs>
    ): CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>>

    /**
     * Count the number of Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionCountArgs} args - Arguments to filter Options to count.
     * @example
     * // Count the number of Options
     * const count = await prisma.option.count({
     *   where: {
     *     // ... the filter for the Options we want to count
     *   }
     * })
    **/
    count<T extends OptionCountArgs>(
      args?: Subset<T, OptionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionAggregateArgs>(args: Subset<T, OptionAggregateArgs>): PrismaPromise<GetOptionAggregateType<T>>

    /**
     * Group by Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptionGroupByArgs['orderBy'] }
        : { orderBy?: OptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Option.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OptionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    OrderedProduct<T extends OrderedProductFindManyArgs = {}>(args?: Subset<T, OrderedProductFindManyArgs>): CheckSelect<T, PrismaPromise<Array<OrderedProduct>>, PrismaPromise<Array<OrderedProductGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Option findUnique
   */
  export type OptionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * Throw an Error if a Option can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Option to fetch.
     * 
    **/
    where: OptionWhereUniqueInput
  }


  /**
   * Option findFirst
   */
  export type OptionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * Throw an Error if a Option can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Option to fetch.
     * 
    **/
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     * 
    **/
    orderBy?: Enumerable<OptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     * 
    **/
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     * 
    **/
    distinct?: Enumerable<OptionScalarFieldEnum>
  }


  /**
   * Option findMany
   */
  export type OptionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * Filter, which Options to fetch.
     * 
    **/
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     * 
    **/
    orderBy?: Enumerable<OptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Options.
     * 
    **/
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OptionScalarFieldEnum>
  }


  /**
   * Option create
   */
  export type OptionCreateArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * The data needed to create a Option.
     * 
    **/
    data: XOR<OptionCreateInput, OptionUncheckedCreateInput>
  }


  /**
   * Option createMany
   */
  export type OptionCreateManyArgs = {
    /**
     * The data used to create many Options.
     * 
    **/
    data: Enumerable<OptionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Option update
   */
  export type OptionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * The data needed to update a Option.
     * 
    **/
    data: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
    /**
     * Choose, which Option to update.
     * 
    **/
    where: OptionWhereUniqueInput
  }


  /**
   * Option updateMany
   */
  export type OptionUpdateManyArgs = {
    /**
     * The data used to update Options.
     * 
    **/
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyInput>
    /**
     * Filter which Options to update
     * 
    **/
    where?: OptionWhereInput
  }


  /**
   * Option upsert
   */
  export type OptionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * The filter to search for the Option to update in case it exists.
     * 
    **/
    where: OptionWhereUniqueInput
    /**
     * In case the Option found by the `where` argument doesn't exist, create a new Option with this data.
     * 
    **/
    create: XOR<OptionCreateInput, OptionUncheckedCreateInput>
    /**
     * In case the Option was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
  }


  /**
   * Option delete
   */
  export type OptionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * Filter which Option to delete.
     * 
    **/
    where: OptionWhereUniqueInput
  }


  /**
   * Option deleteMany
   */
  export type OptionDeleteManyArgs = {
    /**
     * Filter which Options to delete
     * 
    **/
    where?: OptionWhereInput
  }


  /**
   * Option without action
   */
  export type OptionArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
  }



  /**
   * Model Address
   */


  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
    townshipId: number | null
    userId: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
    townshipId: number | null
    userId: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    name: string | null
    adress: string | null
    townshipId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    name: string | null
    adress: string | null
    townshipId: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    name: number
    adress: number
    townshipId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
    townshipId?: true
    userId?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
    townshipId?: true
    userId?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    name?: true
    adress?: true
    townshipId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    name?: true
    adress?: true
    townshipId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    name?: true
    adress?: true
    townshipId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AddressAggregateArgs = {
    /**
     * Filter which Address to aggregate.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs = {
    where?: AddressWhereInput
    orderBy?: Enumerable<AddressOrderByWithAggregationInput>
    by: Array<AddressScalarFieldEnum>
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }


  export type AddressGroupByOutputType = {
    id: number
    name: string
    adress: string
    townshipId: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect = {
    id?: boolean
    name?: boolean
    adress?: boolean
    townshipId?: boolean
    township?: boolean | TownshipArgs
    userId?: boolean
    user?: boolean | UserArgs
    ShippingAddress?: boolean | ShippingAddressArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AddressInclude = {
    township?: boolean | TownshipArgs
    user?: boolean | UserArgs
    ShippingAddress?: boolean | ShippingAddressArgs
  }

  export type AddressGetPayload<
    S extends boolean | null | undefined | AddressArgs,
    U = keyof S
      > = S extends true
        ? Address
    : S extends undefined
    ? never
    : S extends AddressArgs | AddressFindManyArgs
    ?'include' extends U
    ? Address  & {
    [P in TrueKeys<S['include']>]:
        P extends 'township' ? TownshipGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'ShippingAddress' ? ShippingAddressGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'township' ? TownshipGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'ShippingAddress' ? ShippingAddressGetPayload<S['select'][P]> | null :  P extends keyof Address ? Address[P] : never
  } 
    : Address
  : Address


  type AddressCountArgs = Merge<
    Omit<AddressFindManyArgs, 'select' | 'include'> & {
      select?: AddressCountAggregateInputType | true
    }
  >

  export interface AddressDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Address'> extends True ? CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>> : CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Address'> extends True ? CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>> : CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs>(
      args?: SelectSubset<T, AddressFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Address>>, PrismaPromise<Array<AddressGetPayload<T>>>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs>(
      args: SelectSubset<T, AddressCreateArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Create many Addresses.
     *     @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AddressCreateManyArgs>(
      args?: SelectSubset<T, AddressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs>(
      args: SelectSubset<T, AddressDeleteArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs>(
      args: SelectSubset<T, AddressUpdateArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs>(
      args?: SelectSubset<T, AddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs>(
      args: SelectSubset<T, AddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs>(
      args: SelectSubset<T, AddressUpsertArgs>
    ): CheckSelect<T, Prisma__AddressClient<Address>, Prisma__AddressClient<AddressGetPayload<T>>>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AddressClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    township<T extends TownshipArgs = {}>(args?: Subset<T, TownshipArgs>): CheckSelect<T, Prisma__TownshipClient<Township | null >, Prisma__TownshipClient<TownshipGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    ShippingAddress<T extends ShippingAddressArgs = {}>(args?: Subset<T, ShippingAddressArgs>): CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress | null >, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Throw an Error if a Address can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Throw an Error if a Address can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Address to fetch.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     * 
    **/
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter, which Addresses to fetch.
     * 
    **/
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     * 
    **/
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     * 
    **/
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address create
   */
  export type AddressCreateArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The data needed to create a Address.
     * 
    **/
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address createMany
   */
  export type AddressCreateManyArgs = {
    /**
     * The data used to create many Addresses.
     * 
    **/
    data: Enumerable<AddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The data needed to update a Address.
     * 
    **/
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs = {
    /**
     * The data used to update Addresses.
     * 
    **/
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     * 
    **/
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * The filter to search for the Address to update in case it exists.
     * 
    **/
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     * 
    **/
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
    /**
     * Filter which Address to delete.
     * 
    **/
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs = {
    /**
     * Filter which Addresses to delete
     * 
    **/
    where?: AddressWhereInput
  }


  /**
   * Address without action
   */
  export type AddressArgs = {
    /**
     * Select specific fields to fetch from the Address
     * 
    **/
    select?: AddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AddressInclude | null
  }



  /**
   * Model State
   */


  export type AggregateState = {
    _count: StateCountAggregateOutputType | null
    _avg: StateAvgAggregateOutputType | null
    _sum: StateSumAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  export type StateAvgAggregateOutputType = {
    id: number | null
  }

  export type StateSumAggregateOutputType = {
    id: number | null
  }

  export type StateMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StateMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StateCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StateAvgAggregateInputType = {
    id?: true
  }

  export type StateSumAggregateInputType = {
    id?: true
  }

  export type StateMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StateMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StateCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StateAggregateArgs = {
    /**
     * Filter which State to aggregate.
     * 
    **/
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     * 
    **/
    orderBy?: Enumerable<StateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned States
    **/
    _count?: true | StateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StateMaxAggregateInputType
  }

  export type GetStateAggregateType<T extends StateAggregateArgs> = {
        [P in keyof T & keyof AggregateState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateState[P]>
      : GetScalarType<T[P], AggregateState[P]>
  }




  export type StateGroupByArgs = {
    where?: StateWhereInput
    orderBy?: Enumerable<StateOrderByWithAggregationInput>
    by: Array<StateScalarFieldEnum>
    having?: StateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StateCountAggregateInputType | true
    _avg?: StateAvgAggregateInputType
    _sum?: StateSumAggregateInputType
    _min?: StateMinAggregateInputType
    _max?: StateMaxAggregateInputType
  }


  export type StateGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: StateCountAggregateOutputType | null
    _avg: StateAvgAggregateOutputType | null
    _sum: StateSumAggregateOutputType | null
    _min: StateMinAggregateOutputType | null
    _max: StateMaxAggregateOutputType | null
  }

  type GetStateGroupByPayload<T extends StateGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StateGroupByOutputType[P]>
            : GetScalarType<T[P], StateGroupByOutputType[P]>
        }
      >
    >


  export type StateSelect = {
    id?: boolean
    name?: boolean
    townships?: boolean | TownshipFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | StateCountOutputTypeArgs
  }

  export type StateInclude = {
    townships?: boolean | TownshipFindManyArgs
    _count?: boolean | StateCountOutputTypeArgs
  }

  export type StateGetPayload<
    S extends boolean | null | undefined | StateArgs,
    U = keyof S
      > = S extends true
        ? State
    : S extends undefined
    ? never
    : S extends StateArgs | StateFindManyArgs
    ?'include' extends U
    ? State  & {
    [P in TrueKeys<S['include']>]:
        P extends 'townships' ? Array < TownshipGetPayload<S['include'][P]>>  :
        P extends '_count' ? StateCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'townships' ? Array < TownshipGetPayload<S['select'][P]>>  :
        P extends '_count' ? StateCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof State ? State[P] : never
  } 
    : State
  : State


  type StateCountArgs = Merge<
    Omit<StateFindManyArgs, 'select' | 'include'> & {
      select?: StateCountAggregateInputType | true
    }
  >

  export interface StateDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one State that matches the filter.
     * @param {StateFindUniqueArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'State'> extends True ? CheckSelect<T, Prisma__StateClient<State>, Prisma__StateClient<StateGetPayload<T>>> : CheckSelect<T, Prisma__StateClient<State | null >, Prisma__StateClient<StateGetPayload<T> | null >>

    /**
     * Find the first State that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindFirstArgs} args - Arguments to find a State
     * @example
     * // Get one State
     * const state = await prisma.state.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'State'> extends True ? CheckSelect<T, Prisma__StateClient<State>, Prisma__StateClient<StateGetPayload<T>>> : CheckSelect<T, Prisma__StateClient<State | null >, Prisma__StateClient<StateGetPayload<T> | null >>

    /**
     * Find zero or more States that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all States
     * const states = await prisma.state.findMany()
     * 
     * // Get first 10 States
     * const states = await prisma.state.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stateWithIdOnly = await prisma.state.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StateFindManyArgs>(
      args?: SelectSubset<T, StateFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<State>>, PrismaPromise<Array<StateGetPayload<T>>>>

    /**
     * Create a State.
     * @param {StateCreateArgs} args - Arguments to create a State.
     * @example
     * // Create one State
     * const State = await prisma.state.create({
     *   data: {
     *     // ... data to create a State
     *   }
     * })
     * 
    **/
    create<T extends StateCreateArgs>(
      args: SelectSubset<T, StateCreateArgs>
    ): CheckSelect<T, Prisma__StateClient<State>, Prisma__StateClient<StateGetPayload<T>>>

    /**
     * Create many States.
     *     @param {StateCreateManyArgs} args - Arguments to create many States.
     *     @example
     *     // Create many States
     *     const state = await prisma.state.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StateCreateManyArgs>(
      args?: SelectSubset<T, StateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a State.
     * @param {StateDeleteArgs} args - Arguments to delete one State.
     * @example
     * // Delete one State
     * const State = await prisma.state.delete({
     *   where: {
     *     // ... filter to delete one State
     *   }
     * })
     * 
    **/
    delete<T extends StateDeleteArgs>(
      args: SelectSubset<T, StateDeleteArgs>
    ): CheckSelect<T, Prisma__StateClient<State>, Prisma__StateClient<StateGetPayload<T>>>

    /**
     * Update one State.
     * @param {StateUpdateArgs} args - Arguments to update one State.
     * @example
     * // Update one State
     * const state = await prisma.state.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StateUpdateArgs>(
      args: SelectSubset<T, StateUpdateArgs>
    ): CheckSelect<T, Prisma__StateClient<State>, Prisma__StateClient<StateGetPayload<T>>>

    /**
     * Delete zero or more States.
     * @param {StateDeleteManyArgs} args - Arguments to filter States to delete.
     * @example
     * // Delete a few States
     * const { count } = await prisma.state.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StateDeleteManyArgs>(
      args?: SelectSubset<T, StateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many States
     * const state = await prisma.state.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StateUpdateManyArgs>(
      args: SelectSubset<T, StateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one State.
     * @param {StateUpsertArgs} args - Arguments to update or create a State.
     * @example
     * // Update or create a State
     * const state = await prisma.state.upsert({
     *   create: {
     *     // ... data to create a State
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the State we want to update
     *   }
     * })
    **/
    upsert<T extends StateUpsertArgs>(
      args: SelectSubset<T, StateUpsertArgs>
    ): CheckSelect<T, Prisma__StateClient<State>, Prisma__StateClient<StateGetPayload<T>>>

    /**
     * Count the number of States.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateCountArgs} args - Arguments to filter States to count.
     * @example
     * // Count the number of States
     * const count = await prisma.state.count({
     *   where: {
     *     // ... the filter for the States we want to count
     *   }
     * })
    **/
    count<T extends StateCountArgs>(
      args?: Subset<T, StateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StateAggregateArgs>(args: Subset<T, StateAggregateArgs>): PrismaPromise<GetStateAggregateType<T>>

    /**
     * Group by State.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StateGroupByArgs['orderBy'] }
        : { orderBy?: StateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStateGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for State.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StateClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    townships<T extends TownshipFindManyArgs = {}>(args?: Subset<T, TownshipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Township>>, PrismaPromise<Array<TownshipGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * State findUnique
   */
  export type StateFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the State
     * 
    **/
    select?: StateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StateInclude | null
    /**
     * Throw an Error if a State can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which State to fetch.
     * 
    **/
    where: StateWhereUniqueInput
  }


  /**
   * State findFirst
   */
  export type StateFindFirstArgs = {
    /**
     * Select specific fields to fetch from the State
     * 
    **/
    select?: StateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StateInclude | null
    /**
     * Throw an Error if a State can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which State to fetch.
     * 
    **/
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     * 
    **/
    orderBy?: Enumerable<StateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for States.
     * 
    **/
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of States.
     * 
    **/
    distinct?: Enumerable<StateScalarFieldEnum>
  }


  /**
   * State findMany
   */
  export type StateFindManyArgs = {
    /**
     * Select specific fields to fetch from the State
     * 
    **/
    select?: StateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StateInclude | null
    /**
     * Filter, which States to fetch.
     * 
    **/
    where?: StateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of States to fetch.
     * 
    **/
    orderBy?: Enumerable<StateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing States.
     * 
    **/
    cursor?: StateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` States from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` States.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StateScalarFieldEnum>
  }


  /**
   * State create
   */
  export type StateCreateArgs = {
    /**
     * Select specific fields to fetch from the State
     * 
    **/
    select?: StateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StateInclude | null
    /**
     * The data needed to create a State.
     * 
    **/
    data: XOR<StateCreateInput, StateUncheckedCreateInput>
  }


  /**
   * State createMany
   */
  export type StateCreateManyArgs = {
    /**
     * The data used to create many States.
     * 
    **/
    data: Enumerable<StateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * State update
   */
  export type StateUpdateArgs = {
    /**
     * Select specific fields to fetch from the State
     * 
    **/
    select?: StateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StateInclude | null
    /**
     * The data needed to update a State.
     * 
    **/
    data: XOR<StateUpdateInput, StateUncheckedUpdateInput>
    /**
     * Choose, which State to update.
     * 
    **/
    where: StateWhereUniqueInput
  }


  /**
   * State updateMany
   */
  export type StateUpdateManyArgs = {
    /**
     * The data used to update States.
     * 
    **/
    data: XOR<StateUpdateManyMutationInput, StateUncheckedUpdateManyInput>
    /**
     * Filter which States to update
     * 
    **/
    where?: StateWhereInput
  }


  /**
   * State upsert
   */
  export type StateUpsertArgs = {
    /**
     * Select specific fields to fetch from the State
     * 
    **/
    select?: StateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StateInclude | null
    /**
     * The filter to search for the State to update in case it exists.
     * 
    **/
    where: StateWhereUniqueInput
    /**
     * In case the State found by the `where` argument doesn't exist, create a new State with this data.
     * 
    **/
    create: XOR<StateCreateInput, StateUncheckedCreateInput>
    /**
     * In case the State was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StateUpdateInput, StateUncheckedUpdateInput>
  }


  /**
   * State delete
   */
  export type StateDeleteArgs = {
    /**
     * Select specific fields to fetch from the State
     * 
    **/
    select?: StateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StateInclude | null
    /**
     * Filter which State to delete.
     * 
    **/
    where: StateWhereUniqueInput
  }


  /**
   * State deleteMany
   */
  export type StateDeleteManyArgs = {
    /**
     * Filter which States to delete
     * 
    **/
    where?: StateWhereInput
  }


  /**
   * State without action
   */
  export type StateArgs = {
    /**
     * Select specific fields to fetch from the State
     * 
    **/
    select?: StateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StateInclude | null
  }



  /**
   * Model Township
   */


  export type AggregateTownship = {
    _count: TownshipCountAggregateOutputType | null
    _avg: TownshipAvgAggregateOutputType | null
    _sum: TownshipSumAggregateOutputType | null
    _min: TownshipMinAggregateOutputType | null
    _max: TownshipMaxAggregateOutputType | null
  }

  export type TownshipAvgAggregateOutputType = {
    id: number | null
    stateId: number | null
  }

  export type TownshipSumAggregateOutputType = {
    id: number | null
    stateId: number | null
  }

  export type TownshipMinAggregateOutputType = {
    id: number | null
    name: string | null
    stateId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TownshipMaxAggregateOutputType = {
    id: number | null
    name: string | null
    stateId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TownshipCountAggregateOutputType = {
    id: number
    name: number
    stateId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TownshipAvgAggregateInputType = {
    id?: true
    stateId?: true
  }

  export type TownshipSumAggregateInputType = {
    id?: true
    stateId?: true
  }

  export type TownshipMinAggregateInputType = {
    id?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TownshipMaxAggregateInputType = {
    id?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TownshipCountAggregateInputType = {
    id?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TownshipAggregateArgs = {
    /**
     * Filter which Township to aggregate.
     * 
    **/
    where?: TownshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Townships to fetch.
     * 
    **/
    orderBy?: Enumerable<TownshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TownshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Townships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Townships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Townships
    **/
    _count?: true | TownshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TownshipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TownshipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TownshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TownshipMaxAggregateInputType
  }

  export type GetTownshipAggregateType<T extends TownshipAggregateArgs> = {
        [P in keyof T & keyof AggregateTownship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTownship[P]>
      : GetScalarType<T[P], AggregateTownship[P]>
  }




  export type TownshipGroupByArgs = {
    where?: TownshipWhereInput
    orderBy?: Enumerable<TownshipOrderByWithAggregationInput>
    by: Array<TownshipScalarFieldEnum>
    having?: TownshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TownshipCountAggregateInputType | true
    _avg?: TownshipAvgAggregateInputType
    _sum?: TownshipSumAggregateInputType
    _min?: TownshipMinAggregateInputType
    _max?: TownshipMaxAggregateInputType
  }


  export type TownshipGroupByOutputType = {
    id: number
    name: string
    stateId: number
    createdAt: Date
    updatedAt: Date
    _count: TownshipCountAggregateOutputType | null
    _avg: TownshipAvgAggregateOutputType | null
    _sum: TownshipSumAggregateOutputType | null
    _min: TownshipMinAggregateOutputType | null
    _max: TownshipMaxAggregateOutputType | null
  }

  type GetTownshipGroupByPayload<T extends TownshipGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TownshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TownshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TownshipGroupByOutputType[P]>
            : GetScalarType<T[P], TownshipGroupByOutputType[P]>
        }
      >
    >


  export type TownshipSelect = {
    id?: boolean
    name?: boolean
    stateId?: boolean
    state?: boolean | StateArgs
    addresses?: boolean | AddressFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | TownshipCountOutputTypeArgs
  }

  export type TownshipInclude = {
    state?: boolean | StateArgs
    addresses?: boolean | AddressFindManyArgs
    _count?: boolean | TownshipCountOutputTypeArgs
  }

  export type TownshipGetPayload<
    S extends boolean | null | undefined | TownshipArgs,
    U = keyof S
      > = S extends true
        ? Township
    : S extends undefined
    ? never
    : S extends TownshipArgs | TownshipFindManyArgs
    ?'include' extends U
    ? Township  & {
    [P in TrueKeys<S['include']>]:
        P extends 'state' ? StateGetPayload<S['include'][P]> :
        P extends 'addresses' ? Array < AddressGetPayload<S['include'][P]>>  :
        P extends '_count' ? TownshipCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'state' ? StateGetPayload<S['select'][P]> :
        P extends 'addresses' ? Array < AddressGetPayload<S['select'][P]>>  :
        P extends '_count' ? TownshipCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Township ? Township[P] : never
  } 
    : Township
  : Township


  type TownshipCountArgs = Merge<
    Omit<TownshipFindManyArgs, 'select' | 'include'> & {
      select?: TownshipCountAggregateInputType | true
    }
  >

  export interface TownshipDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Township that matches the filter.
     * @param {TownshipFindUniqueArgs} args - Arguments to find a Township
     * @example
     * // Get one Township
     * const township = await prisma.township.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TownshipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TownshipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Township'> extends True ? CheckSelect<T, Prisma__TownshipClient<Township>, Prisma__TownshipClient<TownshipGetPayload<T>>> : CheckSelect<T, Prisma__TownshipClient<Township | null >, Prisma__TownshipClient<TownshipGetPayload<T> | null >>

    /**
     * Find the first Township that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownshipFindFirstArgs} args - Arguments to find a Township
     * @example
     * // Get one Township
     * const township = await prisma.township.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TownshipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TownshipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Township'> extends True ? CheckSelect<T, Prisma__TownshipClient<Township>, Prisma__TownshipClient<TownshipGetPayload<T>>> : CheckSelect<T, Prisma__TownshipClient<Township | null >, Prisma__TownshipClient<TownshipGetPayload<T> | null >>

    /**
     * Find zero or more Townships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownshipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Townships
     * const townships = await prisma.township.findMany()
     * 
     * // Get first 10 Townships
     * const townships = await prisma.township.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const townshipWithIdOnly = await prisma.township.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TownshipFindManyArgs>(
      args?: SelectSubset<T, TownshipFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Township>>, PrismaPromise<Array<TownshipGetPayload<T>>>>

    /**
     * Create a Township.
     * @param {TownshipCreateArgs} args - Arguments to create a Township.
     * @example
     * // Create one Township
     * const Township = await prisma.township.create({
     *   data: {
     *     // ... data to create a Township
     *   }
     * })
     * 
    **/
    create<T extends TownshipCreateArgs>(
      args: SelectSubset<T, TownshipCreateArgs>
    ): CheckSelect<T, Prisma__TownshipClient<Township>, Prisma__TownshipClient<TownshipGetPayload<T>>>

    /**
     * Create many Townships.
     *     @param {TownshipCreateManyArgs} args - Arguments to create many Townships.
     *     @example
     *     // Create many Townships
     *     const township = await prisma.township.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TownshipCreateManyArgs>(
      args?: SelectSubset<T, TownshipCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Township.
     * @param {TownshipDeleteArgs} args - Arguments to delete one Township.
     * @example
     * // Delete one Township
     * const Township = await prisma.township.delete({
     *   where: {
     *     // ... filter to delete one Township
     *   }
     * })
     * 
    **/
    delete<T extends TownshipDeleteArgs>(
      args: SelectSubset<T, TownshipDeleteArgs>
    ): CheckSelect<T, Prisma__TownshipClient<Township>, Prisma__TownshipClient<TownshipGetPayload<T>>>

    /**
     * Update one Township.
     * @param {TownshipUpdateArgs} args - Arguments to update one Township.
     * @example
     * // Update one Township
     * const township = await prisma.township.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TownshipUpdateArgs>(
      args: SelectSubset<T, TownshipUpdateArgs>
    ): CheckSelect<T, Prisma__TownshipClient<Township>, Prisma__TownshipClient<TownshipGetPayload<T>>>

    /**
     * Delete zero or more Townships.
     * @param {TownshipDeleteManyArgs} args - Arguments to filter Townships to delete.
     * @example
     * // Delete a few Townships
     * const { count } = await prisma.township.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TownshipDeleteManyArgs>(
      args?: SelectSubset<T, TownshipDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Townships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Townships
     * const township = await prisma.township.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TownshipUpdateManyArgs>(
      args: SelectSubset<T, TownshipUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Township.
     * @param {TownshipUpsertArgs} args - Arguments to update or create a Township.
     * @example
     * // Update or create a Township
     * const township = await prisma.township.upsert({
     *   create: {
     *     // ... data to create a Township
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Township we want to update
     *   }
     * })
    **/
    upsert<T extends TownshipUpsertArgs>(
      args: SelectSubset<T, TownshipUpsertArgs>
    ): CheckSelect<T, Prisma__TownshipClient<Township>, Prisma__TownshipClient<TownshipGetPayload<T>>>

    /**
     * Count the number of Townships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownshipCountArgs} args - Arguments to filter Townships to count.
     * @example
     * // Count the number of Townships
     * const count = await prisma.township.count({
     *   where: {
     *     // ... the filter for the Townships we want to count
     *   }
     * })
    **/
    count<T extends TownshipCountArgs>(
      args?: Subset<T, TownshipCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TownshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Township.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TownshipAggregateArgs>(args: Subset<T, TownshipAggregateArgs>): PrismaPromise<GetTownshipAggregateType<T>>

    /**
     * Group by Township.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TownshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TownshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TownshipGroupByArgs['orderBy'] }
        : { orderBy?: TownshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TownshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTownshipGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Township.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TownshipClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    state<T extends StateArgs = {}>(args?: Subset<T, StateArgs>): CheckSelect<T, Prisma__StateClient<State | null >, Prisma__StateClient<StateGetPayload<T> | null >>;

    addresses<T extends AddressFindManyArgs = {}>(args?: Subset<T, AddressFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Address>>, PrismaPromise<Array<AddressGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Township findUnique
   */
  export type TownshipFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Township
     * 
    **/
    select?: TownshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TownshipInclude | null
    /**
     * Throw an Error if a Township can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Township to fetch.
     * 
    **/
    where: TownshipWhereUniqueInput
  }


  /**
   * Township findFirst
   */
  export type TownshipFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Township
     * 
    **/
    select?: TownshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TownshipInclude | null
    /**
     * Throw an Error if a Township can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Township to fetch.
     * 
    **/
    where?: TownshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Townships to fetch.
     * 
    **/
    orderBy?: Enumerable<TownshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Townships.
     * 
    **/
    cursor?: TownshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Townships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Townships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Townships.
     * 
    **/
    distinct?: Enumerable<TownshipScalarFieldEnum>
  }


  /**
   * Township findMany
   */
  export type TownshipFindManyArgs = {
    /**
     * Select specific fields to fetch from the Township
     * 
    **/
    select?: TownshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TownshipInclude | null
    /**
     * Filter, which Townships to fetch.
     * 
    **/
    where?: TownshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Townships to fetch.
     * 
    **/
    orderBy?: Enumerable<TownshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Townships.
     * 
    **/
    cursor?: TownshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Townships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Townships.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TownshipScalarFieldEnum>
  }


  /**
   * Township create
   */
  export type TownshipCreateArgs = {
    /**
     * Select specific fields to fetch from the Township
     * 
    **/
    select?: TownshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TownshipInclude | null
    /**
     * The data needed to create a Township.
     * 
    **/
    data: XOR<TownshipCreateInput, TownshipUncheckedCreateInput>
  }


  /**
   * Township createMany
   */
  export type TownshipCreateManyArgs = {
    /**
     * The data used to create many Townships.
     * 
    **/
    data: Enumerable<TownshipCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Township update
   */
  export type TownshipUpdateArgs = {
    /**
     * Select specific fields to fetch from the Township
     * 
    **/
    select?: TownshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TownshipInclude | null
    /**
     * The data needed to update a Township.
     * 
    **/
    data: XOR<TownshipUpdateInput, TownshipUncheckedUpdateInput>
    /**
     * Choose, which Township to update.
     * 
    **/
    where: TownshipWhereUniqueInput
  }


  /**
   * Township updateMany
   */
  export type TownshipUpdateManyArgs = {
    /**
     * The data used to update Townships.
     * 
    **/
    data: XOR<TownshipUpdateManyMutationInput, TownshipUncheckedUpdateManyInput>
    /**
     * Filter which Townships to update
     * 
    **/
    where?: TownshipWhereInput
  }


  /**
   * Township upsert
   */
  export type TownshipUpsertArgs = {
    /**
     * Select specific fields to fetch from the Township
     * 
    **/
    select?: TownshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TownshipInclude | null
    /**
     * The filter to search for the Township to update in case it exists.
     * 
    **/
    where: TownshipWhereUniqueInput
    /**
     * In case the Township found by the `where` argument doesn't exist, create a new Township with this data.
     * 
    **/
    create: XOR<TownshipCreateInput, TownshipUncheckedCreateInput>
    /**
     * In case the Township was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TownshipUpdateInput, TownshipUncheckedUpdateInput>
  }


  /**
   * Township delete
   */
  export type TownshipDeleteArgs = {
    /**
     * Select specific fields to fetch from the Township
     * 
    **/
    select?: TownshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TownshipInclude | null
    /**
     * Filter which Township to delete.
     * 
    **/
    where: TownshipWhereUniqueInput
  }


  /**
   * Township deleteMany
   */
  export type TownshipDeleteManyArgs = {
    /**
     * Filter which Townships to delete
     * 
    **/
    where?: TownshipWhereInput
  }


  /**
   * Township without action
   */
  export type TownshipArgs = {
    /**
     * Select specific fields to fetch from the Township
     * 
    **/
    select?: TownshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TownshipInclude | null
  }



  /**
   * Model ShippingAddress
   */


  export type AggregateShippingAddress = {
    _count: ShippingAddressCountAggregateOutputType | null
    _avg: ShippingAddressAvgAggregateOutputType | null
    _sum: ShippingAddressSumAggregateOutputType | null
    _min: ShippingAddressMinAggregateOutputType | null
    _max: ShippingAddressMaxAggregateOutputType | null
  }

  export type ShippingAddressAvgAggregateOutputType = {
    id: number | null
    addressId: number | null
    orderId: number | null
  }

  export type ShippingAddressSumAggregateOutputType = {
    id: number | null
    addressId: number | null
    orderId: number | null
  }

  export type ShippingAddressMinAggregateOutputType = {
    id: number | null
    addressId: number | null
    orderId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShippingAddressMaxAggregateOutputType = {
    id: number | null
    addressId: number | null
    orderId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShippingAddressCountAggregateOutputType = {
    id: number
    addressId: number
    orderId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShippingAddressAvgAggregateInputType = {
    id?: true
    addressId?: true
    orderId?: true
  }

  export type ShippingAddressSumAggregateInputType = {
    id?: true
    addressId?: true
    orderId?: true
  }

  export type ShippingAddressMinAggregateInputType = {
    id?: true
    addressId?: true
    orderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShippingAddressMaxAggregateInputType = {
    id?: true
    addressId?: true
    orderId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShippingAddressCountAggregateInputType = {
    id?: true
    addressId?: true
    orderId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShippingAddressAggregateArgs = {
    /**
     * Filter which ShippingAddress to aggregate.
     * 
    **/
    where?: ShippingAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<ShippingAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShippingAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShippingAddresses
    **/
    _count?: true | ShippingAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShippingAddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShippingAddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShippingAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShippingAddressMaxAggregateInputType
  }

  export type GetShippingAddressAggregateType<T extends ShippingAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateShippingAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShippingAddress[P]>
      : GetScalarType<T[P], AggregateShippingAddress[P]>
  }




  export type ShippingAddressGroupByArgs = {
    where?: ShippingAddressWhereInput
    orderBy?: Enumerable<ShippingAddressOrderByWithAggregationInput>
    by: Array<ShippingAddressScalarFieldEnum>
    having?: ShippingAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShippingAddressCountAggregateInputType | true
    _avg?: ShippingAddressAvgAggregateInputType
    _sum?: ShippingAddressSumAggregateInputType
    _min?: ShippingAddressMinAggregateInputType
    _max?: ShippingAddressMaxAggregateInputType
  }


  export type ShippingAddressGroupByOutputType = {
    id: number
    addressId: number
    orderId: number
    createdAt: Date
    updatedAt: Date
    _count: ShippingAddressCountAggregateOutputType | null
    _avg: ShippingAddressAvgAggregateOutputType | null
    _sum: ShippingAddressSumAggregateOutputType | null
    _min: ShippingAddressMinAggregateOutputType | null
    _max: ShippingAddressMaxAggregateOutputType | null
  }

  type GetShippingAddressGroupByPayload<T extends ShippingAddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShippingAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShippingAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShippingAddressGroupByOutputType[P]>
            : GetScalarType<T[P], ShippingAddressGroupByOutputType[P]>
        }
      >
    >


  export type ShippingAddressSelect = {
    id?: boolean
    addressId?: boolean
    orderId?: boolean
    order?: boolean | OrderArgs
    address?: boolean | AddressArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShippingAddressInclude = {
    order?: boolean | OrderArgs
    address?: boolean | AddressArgs
  }

  export type ShippingAddressGetPayload<
    S extends boolean | null | undefined | ShippingAddressArgs,
    U = keyof S
      > = S extends true
        ? ShippingAddress
    : S extends undefined
    ? never
    : S extends ShippingAddressArgs | ShippingAddressFindManyArgs
    ?'include' extends U
    ? ShippingAddress  & {
    [P in TrueKeys<S['include']>]:
        P extends 'order' ? OrderGetPayload<S['include'][P]> :
        P extends 'address' ? AddressGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'order' ? OrderGetPayload<S['select'][P]> :
        P extends 'address' ? AddressGetPayload<S['select'][P]> :  P extends keyof ShippingAddress ? ShippingAddress[P] : never
  } 
    : ShippingAddress
  : ShippingAddress


  type ShippingAddressCountArgs = Merge<
    Omit<ShippingAddressFindManyArgs, 'select' | 'include'> & {
      select?: ShippingAddressCountAggregateInputType | true
    }
  >

  export interface ShippingAddressDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ShippingAddress that matches the filter.
     * @param {ShippingAddressFindUniqueArgs} args - Arguments to find a ShippingAddress
     * @example
     * // Get one ShippingAddress
     * const shippingAddress = await prisma.shippingAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShippingAddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShippingAddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShippingAddress'> extends True ? CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress>, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T>>> : CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress | null >, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T> | null >>

    /**
     * Find the first ShippingAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingAddressFindFirstArgs} args - Arguments to find a ShippingAddress
     * @example
     * // Get one ShippingAddress
     * const shippingAddress = await prisma.shippingAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShippingAddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShippingAddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShippingAddress'> extends True ? CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress>, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T>>> : CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress | null >, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T> | null >>

    /**
     * Find zero or more ShippingAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingAddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShippingAddresses
     * const shippingAddresses = await prisma.shippingAddress.findMany()
     * 
     * // Get first 10 ShippingAddresses
     * const shippingAddresses = await prisma.shippingAddress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shippingAddressWithIdOnly = await prisma.shippingAddress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShippingAddressFindManyArgs>(
      args?: SelectSubset<T, ShippingAddressFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ShippingAddress>>, PrismaPromise<Array<ShippingAddressGetPayload<T>>>>

    /**
     * Create a ShippingAddress.
     * @param {ShippingAddressCreateArgs} args - Arguments to create a ShippingAddress.
     * @example
     * // Create one ShippingAddress
     * const ShippingAddress = await prisma.shippingAddress.create({
     *   data: {
     *     // ... data to create a ShippingAddress
     *   }
     * })
     * 
    **/
    create<T extends ShippingAddressCreateArgs>(
      args: SelectSubset<T, ShippingAddressCreateArgs>
    ): CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress>, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T>>>

    /**
     * Create many ShippingAddresses.
     *     @param {ShippingAddressCreateManyArgs} args - Arguments to create many ShippingAddresses.
     *     @example
     *     // Create many ShippingAddresses
     *     const shippingAddress = await prisma.shippingAddress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShippingAddressCreateManyArgs>(
      args?: SelectSubset<T, ShippingAddressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ShippingAddress.
     * @param {ShippingAddressDeleteArgs} args - Arguments to delete one ShippingAddress.
     * @example
     * // Delete one ShippingAddress
     * const ShippingAddress = await prisma.shippingAddress.delete({
     *   where: {
     *     // ... filter to delete one ShippingAddress
     *   }
     * })
     * 
    **/
    delete<T extends ShippingAddressDeleteArgs>(
      args: SelectSubset<T, ShippingAddressDeleteArgs>
    ): CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress>, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T>>>

    /**
     * Update one ShippingAddress.
     * @param {ShippingAddressUpdateArgs} args - Arguments to update one ShippingAddress.
     * @example
     * // Update one ShippingAddress
     * const shippingAddress = await prisma.shippingAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShippingAddressUpdateArgs>(
      args: SelectSubset<T, ShippingAddressUpdateArgs>
    ): CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress>, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T>>>

    /**
     * Delete zero or more ShippingAddresses.
     * @param {ShippingAddressDeleteManyArgs} args - Arguments to filter ShippingAddresses to delete.
     * @example
     * // Delete a few ShippingAddresses
     * const { count } = await prisma.shippingAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShippingAddressDeleteManyArgs>(
      args?: SelectSubset<T, ShippingAddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShippingAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShippingAddresses
     * const shippingAddress = await prisma.shippingAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShippingAddressUpdateManyArgs>(
      args: SelectSubset<T, ShippingAddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ShippingAddress.
     * @param {ShippingAddressUpsertArgs} args - Arguments to update or create a ShippingAddress.
     * @example
     * // Update or create a ShippingAddress
     * const shippingAddress = await prisma.shippingAddress.upsert({
     *   create: {
     *     // ... data to create a ShippingAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShippingAddress we want to update
     *   }
     * })
    **/
    upsert<T extends ShippingAddressUpsertArgs>(
      args: SelectSubset<T, ShippingAddressUpsertArgs>
    ): CheckSelect<T, Prisma__ShippingAddressClient<ShippingAddress>, Prisma__ShippingAddressClient<ShippingAddressGetPayload<T>>>

    /**
     * Count the number of ShippingAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingAddressCountArgs} args - Arguments to filter ShippingAddresses to count.
     * @example
     * // Count the number of ShippingAddresses
     * const count = await prisma.shippingAddress.count({
     *   where: {
     *     // ... the filter for the ShippingAddresses we want to count
     *   }
     * })
    **/
    count<T extends ShippingAddressCountArgs>(
      args?: Subset<T, ShippingAddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShippingAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShippingAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShippingAddressAggregateArgs>(args: Subset<T, ShippingAddressAggregateArgs>): PrismaPromise<GetShippingAddressAggregateType<T>>

    /**
     * Group by ShippingAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShippingAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShippingAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShippingAddressGroupByArgs['orderBy'] }
        : { orderBy?: ShippingAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShippingAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShippingAddressGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShippingAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShippingAddressClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    order<T extends OrderArgs = {}>(args?: Subset<T, OrderArgs>): CheckSelect<T, Prisma__OrderClient<Order | null >, Prisma__OrderClient<OrderGetPayload<T> | null >>;

    address<T extends AddressArgs = {}>(args?: Subset<T, AddressArgs>): CheckSelect<T, Prisma__AddressClient<Address | null >, Prisma__AddressClient<AddressGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ShippingAddress findUnique
   */
  export type ShippingAddressFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ShippingAddress
     * 
    **/
    select?: ShippingAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShippingAddressInclude | null
    /**
     * Throw an Error if a ShippingAddress can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShippingAddress to fetch.
     * 
    **/
    where: ShippingAddressWhereUniqueInput
  }


  /**
   * ShippingAddress findFirst
   */
  export type ShippingAddressFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ShippingAddress
     * 
    **/
    select?: ShippingAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShippingAddressInclude | null
    /**
     * Throw an Error if a ShippingAddress can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShippingAddress to fetch.
     * 
    **/
    where?: ShippingAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<ShippingAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShippingAddresses.
     * 
    **/
    cursor?: ShippingAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShippingAddresses.
     * 
    **/
    distinct?: Enumerable<ShippingAddressScalarFieldEnum>
  }


  /**
   * ShippingAddress findMany
   */
  export type ShippingAddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShippingAddress
     * 
    **/
    select?: ShippingAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShippingAddressInclude | null
    /**
     * Filter, which ShippingAddresses to fetch.
     * 
    **/
    where?: ShippingAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShippingAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<ShippingAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShippingAddresses.
     * 
    **/
    cursor?: ShippingAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShippingAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShippingAddresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShippingAddressScalarFieldEnum>
  }


  /**
   * ShippingAddress create
   */
  export type ShippingAddressCreateArgs = {
    /**
     * Select specific fields to fetch from the ShippingAddress
     * 
    **/
    select?: ShippingAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShippingAddressInclude | null
    /**
     * The data needed to create a ShippingAddress.
     * 
    **/
    data: XOR<ShippingAddressCreateInput, ShippingAddressUncheckedCreateInput>
  }


  /**
   * ShippingAddress createMany
   */
  export type ShippingAddressCreateManyArgs = {
    /**
     * The data used to create many ShippingAddresses.
     * 
    **/
    data: Enumerable<ShippingAddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShippingAddress update
   */
  export type ShippingAddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShippingAddress
     * 
    **/
    select?: ShippingAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShippingAddressInclude | null
    /**
     * The data needed to update a ShippingAddress.
     * 
    **/
    data: XOR<ShippingAddressUpdateInput, ShippingAddressUncheckedUpdateInput>
    /**
     * Choose, which ShippingAddress to update.
     * 
    **/
    where: ShippingAddressWhereUniqueInput
  }


  /**
   * ShippingAddress updateMany
   */
  export type ShippingAddressUpdateManyArgs = {
    /**
     * The data used to update ShippingAddresses.
     * 
    **/
    data: XOR<ShippingAddressUpdateManyMutationInput, ShippingAddressUncheckedUpdateManyInput>
    /**
     * Filter which ShippingAddresses to update
     * 
    **/
    where?: ShippingAddressWhereInput
  }


  /**
   * ShippingAddress upsert
   */
  export type ShippingAddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShippingAddress
     * 
    **/
    select?: ShippingAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShippingAddressInclude | null
    /**
     * The filter to search for the ShippingAddress to update in case it exists.
     * 
    **/
    where: ShippingAddressWhereUniqueInput
    /**
     * In case the ShippingAddress found by the `where` argument doesn't exist, create a new ShippingAddress with this data.
     * 
    **/
    create: XOR<ShippingAddressCreateInput, ShippingAddressUncheckedCreateInput>
    /**
     * In case the ShippingAddress was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShippingAddressUpdateInput, ShippingAddressUncheckedUpdateInput>
  }


  /**
   * ShippingAddress delete
   */
  export type ShippingAddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShippingAddress
     * 
    **/
    select?: ShippingAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShippingAddressInclude | null
    /**
     * Filter which ShippingAddress to delete.
     * 
    **/
    where: ShippingAddressWhereUniqueInput
  }


  /**
   * ShippingAddress deleteMany
   */
  export type ShippingAddressDeleteManyArgs = {
    /**
     * Filter which ShippingAddresses to delete
     * 
    **/
    where?: ShippingAddressWhereInput
  }


  /**
   * ShippingAddress without action
   */
  export type ShippingAddressArgs = {
    /**
     * Select specific fields to fetch from the ShippingAddress
     * 
    **/
    select?: ShippingAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShippingAddressInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    product_code: 'product_code',
    status: 'status',
    shopId: 'shopId',
    cover_photo: 'cover_photo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const CurrencyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CurrencyScalarFieldEnum = (typeof CurrencyScalarFieldEnum)[keyof typeof CurrencyScalarFieldEnum]


  export const CurrenciesOnProductsScalarFieldEnum: {
    id: 'id',
    sell_price: 'sell_price',
    productId: 'productId',
    currencyId: 'currencyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CurrenciesOnProductsScalarFieldEnum = (typeof CurrenciesOnProductsScalarFieldEnum)[keyof typeof CurrenciesOnProductsScalarFieldEnum]


  export const ShopScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShopScalarFieldEnum = (typeof ShopScalarFieldEnum)[keyof typeof ShopScalarFieldEnum]


  export const UsersOnShopsScalarFieldEnum: {
    shopId: 'shopId',
    userId: 'userId',
    assignedby: 'assignedby',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsersOnShopsScalarFieldEnum = (typeof UsersOnShopsScalarFieldEnum)[keyof typeof UsersOnShopsScalarFieldEnum]


  export const WishlistScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WishlistScalarFieldEnum = (typeof WishlistScalarFieldEnum)[keyof typeof WishlistScalarFieldEnum]


  export const PhoneShopScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    shopId: 'shopId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PhoneShopScalarFieldEnum = (typeof PhoneShopScalarFieldEnum)[keyof typeof PhoneShopScalarFieldEnum]


  export const StockScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StockScalarFieldEnum = (typeof StockScalarFieldEnum)[keyof typeof StockScalarFieldEnum]


  export const FeaturedPhotoScalarFieldEnum: {
    id: 'id',
    photo: 'photo',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeaturedPhotoScalarFieldEnum = (typeof FeaturedPhotoScalarFieldEnum)[keyof typeof FeaturedPhotoScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    productId: 'productId',
    total_price: 'total_price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderedProductScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    price: 'price',
    total: 'total',
    sub_total: 'sub_total',
    discount: 'discount',
    orderId: 'orderId',
    productId: 'productId',
    optionId: 'optionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderedProductScalarFieldEnum = (typeof OrderedProductScalarFieldEnum)[keyof typeof OrderedProductScalarFieldEnum]


  export const OptionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OptionScalarFieldEnum = (typeof OptionScalarFieldEnum)[keyof typeof OptionScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    name: 'name',
    adress: 'adress',
    townshipId: 'townshipId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const StateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StateScalarFieldEnum = (typeof StateScalarFieldEnum)[keyof typeof StateScalarFieldEnum]


  export const TownshipScalarFieldEnum: {
    id: 'id',
    name: 'name',
    stateId: 'stateId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TownshipScalarFieldEnum = (typeof TownshipScalarFieldEnum)[keyof typeof TownshipScalarFieldEnum]


  export const ShippingAddressScalarFieldEnum: {
    id: 'id',
    addressId: 'addressId',
    orderId: 'orderId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShippingAddressScalarFieldEnum = (typeof ShippingAddressScalarFieldEnum)[keyof typeof ShippingAddressScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    addresses?: AddressListRelationFilter
    role?: EnumUserTypeFilter | UserType
    shops?: UsersOnShopsListRelationFilter
    wishlists?: WishlistListRelationFilter
    orders?: OrderListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    addresses?: AddressOrderByRelationAggregateInput
    role?: SortOrder
    shops?: UsersOnShopsOrderByRelationAggregateInput
    wishlists?: WishlistOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: EnumUserTypeWithAggregatesFilter | UserType
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    product_code?: StringFilter | string
    shop?: XOR<ShopRelationFilter, ShopWhereInput>
    status?: EnumProductStatusFilter | ProductStatus
    shopId?: IntFilter | number
    currencies?: CurrenciesOnProductsListRelationFilter
    Wishlist?: XOR<WishlistRelationFilter, WishlistWhereInput> | null
    stock?: XOR<StockRelationFilter, StockWhereInput> | null
    cover_photo?: StringFilter | string
    featured_photos?: FeaturedPhotoListRelationFilter
    options?: OptionListRelationFilter
    OrderedProduct?: XOR<OrderedProductRelationFilter, OrderedProductWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    product_code?: SortOrder
    shop?: ShopOrderByWithRelationInput
    status?: SortOrder
    shopId?: SortOrder
    currencies?: CurrenciesOnProductsOrderByRelationAggregateInput
    Wishlist?: WishlistOrderByWithRelationInput
    stock?: StockOrderByWithRelationInput
    cover_photo?: SortOrder
    featured_photos?: FeaturedPhotoOrderByRelationAggregateInput
    options?: OptionOrderByRelationAggregateInput
    OrderedProduct?: OrderedProductOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductWhereUniqueInput = {
    id?: number
  }

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    product_code?: SortOrder
    status?: SortOrder
    shopId?: SortOrder
    cover_photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    product_code?: StringWithAggregatesFilter | string
    status?: EnumProductStatusWithAggregatesFilter | ProductStatus
    shopId?: IntWithAggregatesFilter | number
    cover_photo?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CurrencyWhereInput = {
    AND?: Enumerable<CurrencyWhereInput>
    OR?: Enumerable<CurrencyWhereInput>
    NOT?: Enumerable<CurrencyWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    code?: StringFilter | string
    products?: CurrenciesOnProductsListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CurrencyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    products?: CurrenciesOnProductsOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencyWhereUniqueInput = {
    id?: number
    code?: string
  }

  export type CurrencyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CurrencyCountOrderByAggregateInput
    _avg?: CurrencyAvgOrderByAggregateInput
    _max?: CurrencyMaxOrderByAggregateInput
    _min?: CurrencyMinOrderByAggregateInput
    _sum?: CurrencySumOrderByAggregateInput
  }

  export type CurrencyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CurrencyScalarWhereWithAggregatesInput>
    OR?: Enumerable<CurrencyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CurrencyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    code?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CurrenciesOnProductsWhereInput = {
    AND?: Enumerable<CurrenciesOnProductsWhereInput>
    OR?: Enumerable<CurrenciesOnProductsWhereInput>
    NOT?: Enumerable<CurrenciesOnProductsWhereInput>
    id?: IntFilter | number
    sell_price?: FloatFilter | number
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    currency?: XOR<CurrencyRelationFilter, CurrencyWhereInput>
    productId?: IntFilter | number
    currencyId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CurrenciesOnProductsOrderByWithRelationInput = {
    id?: SortOrder
    sell_price?: SortOrder
    product?: ProductOrderByWithRelationInput
    currency?: CurrencyOrderByWithRelationInput
    productId?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrenciesOnProductsWhereUniqueInput = {
    id?: number
  }

  export type CurrenciesOnProductsOrderByWithAggregationInput = {
    id?: SortOrder
    sell_price?: SortOrder
    productId?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CurrenciesOnProductsCountOrderByAggregateInput
    _avg?: CurrenciesOnProductsAvgOrderByAggregateInput
    _max?: CurrenciesOnProductsMaxOrderByAggregateInput
    _min?: CurrenciesOnProductsMinOrderByAggregateInput
    _sum?: CurrenciesOnProductsSumOrderByAggregateInput
  }

  export type CurrenciesOnProductsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CurrenciesOnProductsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CurrenciesOnProductsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CurrenciesOnProductsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    sell_price?: FloatWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    currencyId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ShopWhereInput = {
    AND?: Enumerable<ShopWhereInput>
    OR?: Enumerable<ShopWhereInput>
    NOT?: Enumerable<ShopWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    slug?: StringFilter | string
    address?: StringNullableFilter | string | null
    phone_numbers?: PhoneShopListRelationFilter
    products?: ProductListRelationFilter
    owners?: UsersOnShopsListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ShopOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    phone_numbers?: PhoneShopOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
    owners?: UsersOnShopsOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShopWhereUniqueInput = {
    id?: number
    slug?: string
  }

  export type ShopOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShopCountOrderByAggregateInput
    _avg?: ShopAvgOrderByAggregateInput
    _max?: ShopMaxOrderByAggregateInput
    _min?: ShopMinOrderByAggregateInput
    _sum?: ShopSumOrderByAggregateInput
  }

  export type ShopScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShopScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShopScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShopScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    address?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UsersOnShopsWhereInput = {
    AND?: Enumerable<UsersOnShopsWhereInput>
    OR?: Enumerable<UsersOnShopsWhereInput>
    NOT?: Enumerable<UsersOnShopsWhereInput>
    shop?: XOR<ShopRelationFilter, ShopWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    shopId?: IntFilter | number
    userId?: IntFilter | number
    assignedby?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UsersOnShopsOrderByWithRelationInput = {
    shop?: ShopOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    shopId?: SortOrder
    userId?: SortOrder
    assignedby?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersOnShopsWhereUniqueInput = {
    shopId_userId?: UsersOnShopsShopIdUserIdCompoundUniqueInput
  }

  export type UsersOnShopsOrderByWithAggregationInput = {
    shopId?: SortOrder
    userId?: SortOrder
    assignedby?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UsersOnShopsCountOrderByAggregateInput
    _avg?: UsersOnShopsAvgOrderByAggregateInput
    _max?: UsersOnShopsMaxOrderByAggregateInput
    _min?: UsersOnShopsMinOrderByAggregateInput
    _sum?: UsersOnShopsSumOrderByAggregateInput
  }

  export type UsersOnShopsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersOnShopsScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersOnShopsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersOnShopsScalarWhereWithAggregatesInput>
    shopId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    assignedby?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WishlistWhereInput = {
    AND?: Enumerable<WishlistWhereInput>
    OR?: Enumerable<WishlistWhereInput>
    NOT?: Enumerable<WishlistWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    userId?: IntFilter | number
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WishlistOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WishlistWhereUniqueInput = {
    id?: number
    productId?: number
    id_userId_productId?: WishlistIdUserIdProductIdCompoundUniqueInput
  }

  export type WishlistOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WishlistCountOrderByAggregateInput
    _avg?: WishlistAvgOrderByAggregateInput
    _max?: WishlistMaxOrderByAggregateInput
    _min?: WishlistMinOrderByAggregateInput
    _sum?: WishlistSumOrderByAggregateInput
  }

  export type WishlistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WishlistScalarWhereWithAggregatesInput>
    OR?: Enumerable<WishlistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WishlistScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PhoneShopWhereInput = {
    AND?: Enumerable<PhoneShopWhereInput>
    OR?: Enumerable<PhoneShopWhereInput>
    NOT?: Enumerable<PhoneShopWhereInput>
    id?: IntFilter | number
    shop?: XOR<ShopRelationFilter, ShopWhereInput>
    phone?: StringFilter | string
    shopId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PhoneShopOrderByWithRelationInput = {
    id?: SortOrder
    shop?: ShopOrderByWithRelationInput
    phone?: SortOrder
    shopId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PhoneShopWhereUniqueInput = {
    id?: number
    id_shopId?: PhoneShopIdShopIdCompoundUniqueInput
  }

  export type PhoneShopOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    shopId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PhoneShopCountOrderByAggregateInput
    _avg?: PhoneShopAvgOrderByAggregateInput
    _max?: PhoneShopMaxOrderByAggregateInput
    _min?: PhoneShopMinOrderByAggregateInput
    _sum?: PhoneShopSumOrderByAggregateInput
  }

  export type PhoneShopScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PhoneShopScalarWhereWithAggregatesInput>
    OR?: Enumerable<PhoneShopScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PhoneShopScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    phone?: StringWithAggregatesFilter | string
    shopId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StockWhereInput = {
    AND?: Enumerable<StockWhereInput>
    OR?: Enumerable<StockWhereInput>
    NOT?: Enumerable<StockWhereInput>
    id?: IntFilter | number
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    quantity?: IntFilter | number
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type StockOrderByWithRelationInput = {
    id?: SortOrder
    product?: ProductOrderByWithRelationInput
    quantity?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockWhereUniqueInput = {
    id?: number
    productId?: number
    id_productId?: StockIdProductIdCompoundUniqueInput
  }

  export type StockOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StockCountOrderByAggregateInput
    _avg?: StockAvgOrderByAggregateInput
    _max?: StockMaxOrderByAggregateInput
    _min?: StockMinOrderByAggregateInput
    _sum?: StockSumOrderByAggregateInput
  }

  export type StockScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StockScalarWhereWithAggregatesInput>
    OR?: Enumerable<StockScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StockScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FeaturedPhotoWhereInput = {
    AND?: Enumerable<FeaturedPhotoWhereInput>
    OR?: Enumerable<FeaturedPhotoWhereInput>
    NOT?: Enumerable<FeaturedPhotoWhereInput>
    id?: IntFilter | number
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    photo?: StringFilter | string
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FeaturedPhotoOrderByWithRelationInput = {
    id?: SortOrder
    product?: ProductOrderByWithRelationInput
    photo?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeaturedPhotoWhereUniqueInput = {
    id?: number
    id_productId?: FeaturedPhotoIdProductIdCompoundUniqueInput
  }

  export type FeaturedPhotoOrderByWithAggregationInput = {
    id?: SortOrder
    photo?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FeaturedPhotoCountOrderByAggregateInput
    _avg?: FeaturedPhotoAvgOrderByAggregateInput
    _max?: FeaturedPhotoMaxOrderByAggregateInput
    _min?: FeaturedPhotoMinOrderByAggregateInput
    _sum?: FeaturedPhotoSumOrderByAggregateInput
  }

  export type FeaturedPhotoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FeaturedPhotoScalarWhereWithAggregatesInput>
    OR?: Enumerable<FeaturedPhotoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FeaturedPhotoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    photo?: StringWithAggregatesFilter | string
    productId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OrderWhereInput = {
    AND?: Enumerable<OrderWhereInput>
    OR?: Enumerable<OrderWhereInput>
    NOT?: Enumerable<OrderWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    productId?: IntFilter | number
    products?: OrderedProductListRelationFilter
    shipping_address?: XOR<ShippingAddressRelationFilter, ShippingAddressWhereInput> | null
    total_price?: FloatFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    products?: OrderedProductOrderByRelationAggregateInput
    shipping_address?: ShippingAddressOrderByWithRelationInput
    total_price?: SortOrder
    user?: UserOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderWhereUniqueInput = {
    id?: number
    id_userId_productId?: OrderIdUserIdProductIdCompoundUniqueInput
  }

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    total_price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrderScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrderScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    total_price?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OrderedProductWhereInput = {
    AND?: Enumerable<OrderedProductWhereInput>
    OR?: Enumerable<OrderedProductWhereInput>
    NOT?: Enumerable<OrderedProductWhereInput>
    id?: IntFilter | number
    quantity?: IntFilter | number
    price?: FloatFilter | number
    total?: FloatFilter | number
    sub_total?: FloatFilter | number
    discount?: FloatFilter | number
    orderId?: IntFilter | number
    productId?: IntFilter | number
    optionId?: IntFilter | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    option?: XOR<OptionRelationFilter, OptionWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OrderedProductOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    sub_total?: SortOrder
    discount?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    optionId?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    option?: OptionOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderedProductWhereUniqueInput = {
    id?: number
    productId?: number
    id_orderId_productId?: OrderedProductIdOrderIdProductIdCompoundUniqueInput
  }

  export type OrderedProductOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    sub_total?: SortOrder
    discount?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    optionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderedProductCountOrderByAggregateInput
    _avg?: OrderedProductAvgOrderByAggregateInput
    _max?: OrderedProductMaxOrderByAggregateInput
    _min?: OrderedProductMinOrderByAggregateInput
    _sum?: OrderedProductSumOrderByAggregateInput
  }

  export type OrderedProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrderedProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrderedProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrderedProductScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
    price?: FloatWithAggregatesFilter | number
    total?: FloatWithAggregatesFilter | number
    sub_total?: FloatWithAggregatesFilter | number
    discount?: FloatWithAggregatesFilter | number
    orderId?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    optionId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OptionWhereInput = {
    AND?: Enumerable<OptionWhereInput>
    OR?: Enumerable<OptionWhereInput>
    NOT?: Enumerable<OptionWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    value?: StringFilter | string
    productId?: IntFilter | number
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    OrderedProduct?: OrderedProductListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OptionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    productId?: SortOrder
    product?: ProductOrderByWithRelationInput
    OrderedProduct?: OrderedProductOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionWhereUniqueInput = {
    id?: number
    id_productId?: OptionIdProductIdCompoundUniqueInput
  }

  export type OptionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OptionCountOrderByAggregateInput
    _avg?: OptionAvgOrderByAggregateInput
    _max?: OptionMaxOrderByAggregateInput
    _min?: OptionMinOrderByAggregateInput
    _sum?: OptionSumOrderByAggregateInput
  }

  export type OptionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OptionScalarWhereWithAggregatesInput>
    OR?: Enumerable<OptionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OptionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    value?: StringWithAggregatesFilter | string
    productId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AddressWhereInput = {
    AND?: Enumerable<AddressWhereInput>
    OR?: Enumerable<AddressWhereInput>
    NOT?: Enumerable<AddressWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    adress?: StringFilter | string
    townshipId?: IntFilter | number
    township?: XOR<TownshipRelationFilter, TownshipWhereInput>
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    ShippingAddress?: XOR<ShippingAddressRelationFilter, ShippingAddressWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
    townshipId?: SortOrder
    township?: TownshipOrderByWithRelationInput
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    ShippingAddress?: ShippingAddressOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressWhereUniqueInput = {
    id?: number
    id_userId?: AddressIdUserIdCompoundUniqueInput
  }

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
    townshipId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<AddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AddressScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    adress?: StringWithAggregatesFilter | string
    townshipId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StateWhereInput = {
    AND?: Enumerable<StateWhereInput>
    OR?: Enumerable<StateWhereInput>
    NOT?: Enumerable<StateWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    townships?: TownshipListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type StateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    townships?: TownshipOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateWhereUniqueInput = {
    id?: number
  }

  export type StateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StateCountOrderByAggregateInput
    _avg?: StateAvgOrderByAggregateInput
    _max?: StateMaxOrderByAggregateInput
    _min?: StateMinOrderByAggregateInput
    _sum?: StateSumOrderByAggregateInput
  }

  export type StateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StateScalarWhereWithAggregatesInput>
    OR?: Enumerable<StateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TownshipWhereInput = {
    AND?: Enumerable<TownshipWhereInput>
    OR?: Enumerable<TownshipWhereInput>
    NOT?: Enumerable<TownshipWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    stateId?: IntFilter | number
    state?: XOR<StateRelationFilter, StateWhereInput>
    addresses?: AddressListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TownshipOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    state?: StateOrderByWithRelationInput
    addresses?: AddressOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TownshipWhereUniqueInput = {
    id?: number
  }

  export type TownshipOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TownshipCountOrderByAggregateInput
    _avg?: TownshipAvgOrderByAggregateInput
    _max?: TownshipMaxOrderByAggregateInput
    _min?: TownshipMinOrderByAggregateInput
    _sum?: TownshipSumOrderByAggregateInput
  }

  export type TownshipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TownshipScalarWhereWithAggregatesInput>
    OR?: Enumerable<TownshipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TownshipScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    stateId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ShippingAddressWhereInput = {
    AND?: Enumerable<ShippingAddressWhereInput>
    OR?: Enumerable<ShippingAddressWhereInput>
    NOT?: Enumerable<ShippingAddressWhereInput>
    id?: IntFilter | number
    addressId?: IntFilter | number
    orderId?: IntFilter | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    address?: XOR<AddressRelationFilter, AddressWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ShippingAddressOrderByWithRelationInput = {
    id?: SortOrder
    addressId?: SortOrder
    orderId?: SortOrder
    order?: OrderOrderByWithRelationInput
    address?: AddressOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShippingAddressWhereUniqueInput = {
    id?: number
    addressId?: number
    orderId?: number
    id_orderId?: ShippingAddressIdOrderIdCompoundUniqueInput
  }

  export type ShippingAddressOrderByWithAggregationInput = {
    id?: SortOrder
    addressId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShippingAddressCountOrderByAggregateInput
    _avg?: ShippingAddressAvgOrderByAggregateInput
    _max?: ShippingAddressMaxOrderByAggregateInput
    _min?: ShippingAddressMinOrderByAggregateInput
    _sum?: ShippingAddressSumOrderByAggregateInput
  }

  export type ShippingAddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShippingAddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShippingAddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShippingAddressScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    addressId?: IntWithAggregatesFilter | number
    orderId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    addresses?: AddressCreateNestedManyWithoutUserInput
    role?: UserType
    shops?: UsersOnShopsCreateNestedManyWithoutUserInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    role?: UserType
    shops?: UsersOnShopsUncheckedCreateNestedManyWithoutUserInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUpdateManyWithoutUserInput
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    shops?: UsersOnShopsUpdateManyWithoutUserInput
    wishlists?: WishlistUpdateManyWithoutUserInput
    orders?: OrderUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUncheckedUpdateManyWithoutUserInput
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    shops?: UsersOnShopsUncheckedUpdateManyWithoutUserInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserInput
    orders?: OrderUncheckedUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: UserType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    name: string
    description: string
    product_code: string
    shop: ShopCreateNestedOneWithoutProductsInput
    status: ProductStatus
    currencies?: CurrenciesOnProductsCreateNestedManyWithoutProductInput
    Wishlist?: WishlistCreateNestedOneWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoCreateNestedManyWithoutProductInput
    options?: OptionCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    shopId: number
    currencies?: CurrenciesOnProductsUncheckedCreateNestedManyWithoutProductInput
    Wishlist?: WishlistUncheckedCreateNestedOneWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoUncheckedCreateNestedManyWithoutProductInput
    options?: OptionUncheckedCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    shop?: ShopUpdateOneRequiredWithoutProductsInput
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    currencies?: CurrenciesOnProductsUpdateManyWithoutProductInput
    Wishlist?: WishlistUpdateOneWithoutProductInput
    stock?: StockUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUpdateManyWithoutProductInput
    options?: OptionUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    shopId?: IntFieldUpdateOperationsInput | number
    currencies?: CurrenciesOnProductsUncheckedUpdateManyWithoutProductInput
    Wishlist?: WishlistUncheckedUpdateOneWithoutProductInput
    stock?: StockUncheckedUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUncheckedUpdateManyWithoutProductInput
    options?: OptionUncheckedUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateManyInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    shopId: number
    cover_photo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    cover_photo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    shopId?: IntFieldUpdateOperationsInput | number
    cover_photo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyCreateInput = {
    name: string
    code: string
    products?: CurrenciesOnProductsCreateNestedManyWithoutCurrencyInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    products?: CurrenciesOnProductsUncheckedCreateNestedManyWithoutCurrencyInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    products?: CurrenciesOnProductsUpdateManyWithoutCurrencyInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    products?: CurrenciesOnProductsUncheckedUpdateManyWithoutCurrencyInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyCreateManyInput = {
    id?: number
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsCreateInput = {
    sell_price: number
    product: ProductCreateNestedOneWithoutCurrenciesInput
    currency: CurrencyCreateNestedOneWithoutProductsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrenciesOnProductsUncheckedCreateInput = {
    id?: number
    sell_price: number
    productId: number
    currencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrenciesOnProductsUpdateInput = {
    sell_price?: FloatFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutCurrenciesInput
    currency?: CurrencyUpdateOneRequiredWithoutProductsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sell_price?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    currencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsCreateManyInput = {
    id?: number
    sell_price: number
    productId: number
    currencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrenciesOnProductsUpdateManyMutationInput = {
    sell_price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sell_price?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    currencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopCreateInput = {
    name: string
    slug: string
    address?: string | null
    phone_numbers?: PhoneShopCreateNestedManyWithoutShopInput
    products?: ProductCreateNestedManyWithoutShopInput
    owners?: UsersOnShopsCreateNestedManyWithoutShopInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    address?: string | null
    phone_numbers?: PhoneShopUncheckedCreateNestedManyWithoutShopInput
    products?: ProductUncheckedCreateNestedManyWithoutShopInput
    owners?: UsersOnShopsUncheckedCreateNestedManyWithoutShopInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_numbers?: PhoneShopUpdateManyWithoutShopInput
    products?: ProductUpdateManyWithoutShopInput
    owners?: UsersOnShopsUpdateManyWithoutShopInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_numbers?: PhoneShopUncheckedUpdateManyWithoutShopInput
    products?: ProductUncheckedUpdateManyWithoutShopInput
    owners?: UsersOnShopsUncheckedUpdateManyWithoutShopInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopCreateManyInput = {
    id?: number
    name: string
    slug: string
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsCreateInput = {
    shop: ShopCreateNestedOneWithoutOwnersInput
    user: UserCreateNestedOneWithoutShopsInput
    assignedby: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersOnShopsUncheckedCreateInput = {
    shopId: number
    userId: number
    assignedby: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersOnShopsUpdateInput = {
    shop?: ShopUpdateOneRequiredWithoutOwnersInput
    user?: UserUpdateOneRequiredWithoutShopsInput
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsUncheckedUpdateInput = {
    shopId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsCreateManyInput = {
    shopId: number
    userId: number
    assignedby: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersOnShopsUpdateManyMutationInput = {
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsUncheckedUpdateManyInput = {
    shopId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistCreateInput = {
    id?: number
    user: UserCreateNestedOneWithoutWishlistsInput
    product: ProductCreateNestedOneWithoutWishlistInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistUncheckedCreateInput = {
    id?: number
    userId: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistUpdateInput = {
    user?: UserUpdateOneRequiredWithoutWishlistsInput
    product?: ProductUpdateOneRequiredWithoutWishlistInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistCreateManyInput = {
    id?: number
    userId: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneShopCreateInput = {
    id?: number
    shop: ShopCreateNestedOneWithoutPhone_numbersInput
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhoneShopUncheckedCreateInput = {
    id?: number
    phone: string
    shopId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhoneShopUpdateInput = {
    shop?: ShopUpdateOneRequiredWithoutPhone_numbersInput
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneShopUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    shopId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneShopCreateManyInput = {
    id?: number
    phone: string
    shopId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhoneShopUpdateManyMutationInput = {
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneShopUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    shopId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockCreateInput = {
    id?: number
    product: ProductCreateNestedOneWithoutStockInput
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockUncheckedCreateInput = {
    id?: number
    quantity: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockUpdateInput = {
    product?: ProductUpdateOneRequiredWithoutStockInput
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockCreateManyInput = {
    id?: number
    quantity: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturedPhotoCreateInput = {
    id?: number
    product: ProductCreateNestedOneWithoutFeatured_photosInput
    photo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeaturedPhotoUncheckedCreateInput = {
    id?: number
    photo: string
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeaturedPhotoUpdateInput = {
    product?: ProductUpdateOneRequiredWithoutFeatured_photosInput
    photo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturedPhotoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    photo?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturedPhotoCreateManyInput = {
    id?: number
    photo: string
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeaturedPhotoUpdateManyMutationInput = {
    photo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturedPhotoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    photo?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    id?: number
    productId: number
    products?: OrderedProductCreateNestedManyWithoutOrderInput
    shipping_address?: ShippingAddressCreateNestedOneWithoutOrderInput
    total_price: number
    user: UserCreateNestedOneWithoutOrdersInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    userId: number
    productId: number
    products?: OrderedProductUncheckedCreateNestedManyWithoutOrderInput
    shipping_address?: ShippingAddressUncheckedCreateNestedOneWithoutOrderInput
    total_price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateInput = {
    productId?: IntFieldUpdateOperationsInput | number
    products?: OrderedProductUpdateManyWithoutOrderInput
    shipping_address?: ShippingAddressUpdateOneWithoutOrderInput
    total_price?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutOrdersInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    products?: OrderedProductUncheckedUpdateManyWithoutOrderInput
    shipping_address?: ShippingAddressUncheckedUpdateOneWithoutOrderInput
    total_price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateManyInput = {
    id?: number
    userId: number
    productId: number
    total_price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    productId?: IntFieldUpdateOperationsInput | number
    total_price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    total_price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductCreateInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    order: OrderCreateNestedOneWithoutProductsInput
    product: ProductCreateNestedOneWithoutOrderedProductInput
    option: OptionCreateNestedOneWithoutOrderedProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductUncheckedCreateInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    orderId: number
    productId: number
    optionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutProductsInput
    product?: ProductUpdateOneRequiredWithoutOrderedProductInput
    option?: OptionUpdateOneRequiredWithoutOrderedProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    optionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductCreateManyInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    orderId: number
    productId: number
    optionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    optionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionCreateInput = {
    id?: number
    name: string
    value: string
    product: ProductCreateNestedOneWithoutOptionsInput
    OrderedProduct?: OrderedProductCreateNestedManyWithoutOptionInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionUncheckedCreateInput = {
    id?: number
    name: string
    value: string
    productId: number
    OrderedProduct?: OrderedProductUncheckedCreateNestedManyWithoutOptionInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutOptionsInput
    OrderedProduct?: OrderedProductUpdateManyWithoutOptionInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    OrderedProduct?: OrderedProductUncheckedUpdateManyWithoutOptionInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionCreateManyInput = {
    id?: number
    name: string
    value: string
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateInput = {
    id?: number
    name: string
    adress: string
    township: TownshipCreateNestedOneWithoutAddressesInput
    user: UserCreateNestedOneWithoutAddressesInput
    ShippingAddress?: ShippingAddressCreateNestedOneWithoutAddressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUncheckedCreateInput = {
    id?: number
    name: string
    adress: string
    townshipId: number
    userId: number
    ShippingAddress?: ShippingAddressUncheckedCreateNestedOneWithoutAddressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    township?: TownshipUpdateOneRequiredWithoutAddressesInput
    user?: UserUpdateOneRequiredWithoutAddressesInput
    ShippingAddress?: ShippingAddressUpdateOneWithoutAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    townshipId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    ShippingAddress?: ShippingAddressUncheckedUpdateOneWithoutAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateManyInput = {
    id?: number
    name: string
    adress: string
    townshipId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    townshipId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateCreateInput = {
    name: string
    townships?: TownshipCreateNestedManyWithoutStateInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StateUncheckedCreateInput = {
    id?: number
    name: string
    townships?: TownshipUncheckedCreateNestedManyWithoutStateInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StateUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    townships?: TownshipUpdateManyWithoutStateInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    townships?: TownshipUncheckedUpdateManyWithoutStateInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StateUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownshipCreateInput = {
    name: string
    state: StateCreateNestedOneWithoutTownshipsInput
    addresses?: AddressCreateNestedManyWithoutTownshipInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TownshipUncheckedCreateInput = {
    id?: number
    name: string
    stateId: number
    addresses?: AddressUncheckedCreateNestedManyWithoutTownshipInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TownshipUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    state?: StateUpdateOneRequiredWithoutTownshipsInput
    addresses?: AddressUpdateManyWithoutTownshipInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownshipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    stateId?: IntFieldUpdateOperationsInput | number
    addresses?: AddressUncheckedUpdateManyWithoutTownshipInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownshipCreateManyInput = {
    id?: number
    name: string
    stateId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TownshipUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownshipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    stateId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingAddressCreateInput = {
    id?: number
    order: OrderCreateNestedOneWithoutShipping_addressInput
    address: AddressCreateNestedOneWithoutShippingAddressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingAddressUncheckedCreateInput = {
    id?: number
    addressId: number
    orderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingAddressUpdateInput = {
    order?: OrderUpdateOneRequiredWithoutShipping_addressInput
    address?: AddressUpdateOneRequiredWithoutShippingAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingAddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingAddressCreateManyInput = {
    id?: number
    addressId: number
    orderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingAddressUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingAddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type AddressListRelationFilter = {
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
  }

  export type EnumUserTypeFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeFilter | UserType
  }

  export type UsersOnShopsListRelationFilter = {
    every?: UsersOnShopsWhereInput
    some?: UsersOnShopsWhereInput
    none?: UsersOnShopsWhereInput
  }

  export type WishlistListRelationFilter = {
    every?: WishlistWhereInput
    some?: WishlistWhereInput
    none?: WishlistWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOnShopsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WishlistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumUserTypeWithAggregatesFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeWithAggregatesFilter | UserType
    _count?: NestedIntFilter
    _min?: NestedEnumUserTypeFilter
    _max?: NestedEnumUserTypeFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ShopRelationFilter = {
    is?: ShopWhereInput
    isNot?: ShopWhereInput
  }

  export type EnumProductStatusFilter = {
    equals?: ProductStatus
    in?: Enumerable<ProductStatus>
    notIn?: Enumerable<ProductStatus>
    not?: NestedEnumProductStatusFilter | ProductStatus
  }

  export type CurrenciesOnProductsListRelationFilter = {
    every?: CurrenciesOnProductsWhereInput
    some?: CurrenciesOnProductsWhereInput
    none?: CurrenciesOnProductsWhereInput
  }

  export type WishlistRelationFilter = {
    is?: WishlistWhereInput | null
    isNot?: WishlistWhereInput | null
  }

  export type StockRelationFilter = {
    is?: StockWhereInput | null
    isNot?: StockWhereInput | null
  }

  export type FeaturedPhotoListRelationFilter = {
    every?: FeaturedPhotoWhereInput
    some?: FeaturedPhotoWhereInput
    none?: FeaturedPhotoWhereInput
  }

  export type OptionListRelationFilter = {
    every?: OptionWhereInput
    some?: OptionWhereInput
    none?: OptionWhereInput
  }

  export type OrderedProductRelationFilter = {
    is?: OrderedProductWhereInput | null
    isNot?: OrderedProductWhereInput | null
  }

  export type CurrenciesOnProductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeaturedPhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    product_code?: SortOrder
    status?: SortOrder
    shopId?: SortOrder
    cover_photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    shopId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    product_code?: SortOrder
    status?: SortOrder
    shopId?: SortOrder
    cover_photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    product_code?: SortOrder
    status?: SortOrder
    shopId?: SortOrder
    cover_photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    shopId?: SortOrder
  }

  export type EnumProductStatusWithAggregatesFilter = {
    equals?: ProductStatus
    in?: Enumerable<ProductStatus>
    notIn?: Enumerable<ProductStatus>
    not?: NestedEnumProductStatusWithAggregatesFilter | ProductStatus
    _count?: NestedIntFilter
    _min?: NestedEnumProductStatusFilter
    _max?: NestedEnumProductStatusFilter
  }

  export type CurrencyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CurrencyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrencySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type CurrencyRelationFilter = {
    is?: CurrencyWhereInput
    isNot?: CurrencyWhereInput
  }

  export type CurrenciesOnProductsCountOrderByAggregateInput = {
    id?: SortOrder
    sell_price?: SortOrder
    productId?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrenciesOnProductsAvgOrderByAggregateInput = {
    id?: SortOrder
    sell_price?: SortOrder
    productId?: SortOrder
    currencyId?: SortOrder
  }

  export type CurrenciesOnProductsMaxOrderByAggregateInput = {
    id?: SortOrder
    sell_price?: SortOrder
    productId?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrenciesOnProductsMinOrderByAggregateInput = {
    id?: SortOrder
    sell_price?: SortOrder
    productId?: SortOrder
    currencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CurrenciesOnProductsSumOrderByAggregateInput = {
    id?: SortOrder
    sell_price?: SortOrder
    productId?: SortOrder
    currencyId?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type PhoneShopListRelationFilter = {
    every?: PhoneShopWhereInput
    some?: PhoneShopWhereInput
    none?: PhoneShopWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type PhoneShopOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShopCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShopAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShopMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShopMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShopSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UsersOnShopsShopIdUserIdCompoundUniqueInput = {
    shopId: number
    userId: number
  }

  export type UsersOnShopsCountOrderByAggregateInput = {
    shopId?: SortOrder
    userId?: SortOrder
    assignedby?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersOnShopsAvgOrderByAggregateInput = {
    shopId?: SortOrder
    userId?: SortOrder
  }

  export type UsersOnShopsMaxOrderByAggregateInput = {
    shopId?: SortOrder
    userId?: SortOrder
    assignedby?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersOnShopsMinOrderByAggregateInput = {
    shopId?: SortOrder
    userId?: SortOrder
    assignedby?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersOnShopsSumOrderByAggregateInput = {
    shopId?: SortOrder
    userId?: SortOrder
  }

  export type WishlistIdUserIdProductIdCompoundUniqueInput = {
    id: number
    userId: number
    productId: number
  }

  export type WishlistCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WishlistAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type WishlistMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WishlistMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WishlistSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type PhoneShopIdShopIdCompoundUniqueInput = {
    id: number
    shopId: number
  }

  export type PhoneShopCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    shopId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PhoneShopAvgOrderByAggregateInput = {
    id?: SortOrder
    shopId?: SortOrder
  }

  export type PhoneShopMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    shopId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PhoneShopMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    shopId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PhoneShopSumOrderByAggregateInput = {
    id?: SortOrder
    shopId?: SortOrder
  }

  export type StockIdProductIdCompoundUniqueInput = {
    id: number
    productId: number
  }

  export type StockCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
  }

  export type StockMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
  }

  export type FeaturedPhotoIdProductIdCompoundUniqueInput = {
    id: number
    productId: number
  }

  export type FeaturedPhotoCountOrderByAggregateInput = {
    id?: SortOrder
    photo?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeaturedPhotoAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type FeaturedPhotoMaxOrderByAggregateInput = {
    id?: SortOrder
    photo?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeaturedPhotoMinOrderByAggregateInput = {
    id?: SortOrder
    photo?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeaturedPhotoSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type OrderedProductListRelationFilter = {
    every?: OrderedProductWhereInput
    some?: OrderedProductWhereInput
    none?: OrderedProductWhereInput
  }

  export type ShippingAddressRelationFilter = {
    is?: ShippingAddressWhereInput | null
    isNot?: ShippingAddressWhereInput | null
  }

  export type OrderedProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderIdUserIdProductIdCompoundUniqueInput = {
    id: number
    userId: number
    productId: number
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    total_price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    total_price?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    total_price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    total_price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    total_price?: SortOrder
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type OptionRelationFilter = {
    is?: OptionWhereInput
    isNot?: OptionWhereInput
  }

  export type OrderedProductIdOrderIdProductIdCompoundUniqueInput = {
    id: number
    orderId: number
    productId: number
  }

  export type OrderedProductCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    sub_total?: SortOrder
    discount?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    optionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderedProductAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    sub_total?: SortOrder
    discount?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    optionId?: SortOrder
  }

  export type OrderedProductMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    sub_total?: SortOrder
    discount?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    optionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderedProductMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    sub_total?: SortOrder
    discount?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    optionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderedProductSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    sub_total?: SortOrder
    discount?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    optionId?: SortOrder
  }

  export type OptionIdProductIdCompoundUniqueInput = {
    id: number
    productId: number
  }

  export type OptionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type OptionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type TownshipRelationFilter = {
    is?: TownshipWhereInput
    isNot?: TownshipWhereInput
  }

  export type AddressIdUserIdCompoundUniqueInput = {
    id: number
    userId: number
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
    townshipId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
    townshipId?: SortOrder
    userId?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
    townshipId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
    townshipId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
    townshipId?: SortOrder
    userId?: SortOrder
  }

  export type TownshipListRelationFilter = {
    every?: TownshipWhereInput
    some?: TownshipWhereInput
    none?: TownshipWhereInput
  }

  export type TownshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StateRelationFilter = {
    is?: StateWhereInput
    isNot?: StateWhereInput
  }

  export type TownshipCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TownshipAvgOrderByAggregateInput = {
    id?: SortOrder
    stateId?: SortOrder
  }

  export type TownshipMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TownshipMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TownshipSumOrderByAggregateInput = {
    id?: SortOrder
    stateId?: SortOrder
  }

  export type AddressRelationFilter = {
    is?: AddressWhereInput
    isNot?: AddressWhereInput
  }

  export type ShippingAddressIdOrderIdCompoundUniqueInput = {
    id: number
    orderId: number
  }

  export type ShippingAddressCountOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShippingAddressAvgOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    orderId?: SortOrder
  }

  export type ShippingAddressMaxOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShippingAddressMinOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShippingAddressSumOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    orderId?: SortOrder
  }

  export type AddressCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AddressCreateWithoutUserInput>, Enumerable<AddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutUserInput>
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type UsersOnShopsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UsersOnShopsCreateWithoutUserInput>, Enumerable<UsersOnShopsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UsersOnShopsCreateOrConnectWithoutUserInput>
    createMany?: UsersOnShopsCreateManyUserInputEnvelope
    connect?: Enumerable<UsersOnShopsWhereUniqueInput>
  }

  export type WishlistCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WishlistCreateWithoutUserInput>, Enumerable<WishlistUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WishlistCreateOrConnectWithoutUserInput>
    createMany?: WishlistCreateManyUserInputEnvelope
    connect?: Enumerable<WishlistWhereUniqueInput>
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderCreateWithoutUserInput>, Enumerable<OrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type AddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AddressCreateWithoutUserInput>, Enumerable<AddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutUserInput>
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type UsersOnShopsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UsersOnShopsCreateWithoutUserInput>, Enumerable<UsersOnShopsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UsersOnShopsCreateOrConnectWithoutUserInput>
    createMany?: UsersOnShopsCreateManyUserInputEnvelope
    connect?: Enumerable<UsersOnShopsWhereUniqueInput>
  }

  export type WishlistUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WishlistCreateWithoutUserInput>, Enumerable<WishlistUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WishlistCreateOrConnectWithoutUserInput>
    createMany?: WishlistCreateManyUserInputEnvelope
    connect?: Enumerable<WishlistWhereUniqueInput>
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderCreateWithoutUserInput>, Enumerable<OrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type AddressUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AddressCreateWithoutUserInput>, Enumerable<AddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AddressCreateManyUserInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: UserType
  }

  export type UsersOnShopsUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UsersOnShopsCreateWithoutUserInput>, Enumerable<UsersOnShopsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UsersOnShopsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UsersOnShopsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UsersOnShopsCreateManyUserInputEnvelope
    set?: Enumerable<UsersOnShopsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnShopsWhereUniqueInput>
    delete?: Enumerable<UsersOnShopsWhereUniqueInput>
    connect?: Enumerable<UsersOnShopsWhereUniqueInput>
    update?: Enumerable<UsersOnShopsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UsersOnShopsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UsersOnShopsScalarWhereInput>
  }

  export type WishlistUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<WishlistCreateWithoutUserInput>, Enumerable<WishlistUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WishlistCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WishlistUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WishlistCreateManyUserInputEnvelope
    set?: Enumerable<WishlistWhereUniqueInput>
    disconnect?: Enumerable<WishlistWhereUniqueInput>
    delete?: Enumerable<WishlistWhereUniqueInput>
    connect?: Enumerable<WishlistWhereUniqueInput>
    update?: Enumerable<WishlistUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WishlistUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WishlistScalarWhereInput>
  }

  export type OrderUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderCreateWithoutUserInput>, Enumerable<OrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: OrderCreateManyUserInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AddressUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AddressCreateWithoutUserInput>, Enumerable<AddressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AddressCreateManyUserInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type UsersOnShopsUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UsersOnShopsCreateWithoutUserInput>, Enumerable<UsersOnShopsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UsersOnShopsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UsersOnShopsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UsersOnShopsCreateManyUserInputEnvelope
    set?: Enumerable<UsersOnShopsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnShopsWhereUniqueInput>
    delete?: Enumerable<UsersOnShopsWhereUniqueInput>
    connect?: Enumerable<UsersOnShopsWhereUniqueInput>
    update?: Enumerable<UsersOnShopsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UsersOnShopsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UsersOnShopsScalarWhereInput>
  }

  export type WishlistUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<WishlistCreateWithoutUserInput>, Enumerable<WishlistUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WishlistCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WishlistUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WishlistCreateManyUserInputEnvelope
    set?: Enumerable<WishlistWhereUniqueInput>
    disconnect?: Enumerable<WishlistWhereUniqueInput>
    delete?: Enumerable<WishlistWhereUniqueInput>
    connect?: Enumerable<WishlistWhereUniqueInput>
    update?: Enumerable<WishlistUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WishlistUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WishlistScalarWhereInput>
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<OrderCreateWithoutUserInput>, Enumerable<OrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: OrderCreateManyUserInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type ShopCreateNestedOneWithoutProductsInput = {
    create?: XOR<ShopCreateWithoutProductsInput, ShopUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ShopCreateOrConnectWithoutProductsInput
    connect?: ShopWhereUniqueInput
  }

  export type CurrenciesOnProductsCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CurrenciesOnProductsCreateWithoutProductInput>, Enumerable<CurrenciesOnProductsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CurrenciesOnProductsCreateOrConnectWithoutProductInput>
    createMany?: CurrenciesOnProductsCreateManyProductInputEnvelope
    connect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
  }

  export type WishlistCreateNestedOneWithoutProductInput = {
    create?: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput>
    connectOrCreate?: WishlistCreateOrConnectWithoutProductInput
    connect?: WishlistWhereUniqueInput
  }

  export type StockCreateNestedOneWithoutProductInput = {
    create?: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
    connectOrCreate?: StockCreateOrConnectWithoutProductInput
    connect?: StockWhereUniqueInput
  }

  export type FeaturedPhotoCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<FeaturedPhotoCreateWithoutProductInput>, Enumerable<FeaturedPhotoUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<FeaturedPhotoCreateOrConnectWithoutProductInput>
    createMany?: FeaturedPhotoCreateManyProductInputEnvelope
    connect?: Enumerable<FeaturedPhotoWhereUniqueInput>
  }

  export type OptionCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<OptionCreateWithoutProductInput>, Enumerable<OptionUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<OptionCreateOrConnectWithoutProductInput>
    createMany?: OptionCreateManyProductInputEnvelope
    connect?: Enumerable<OptionWhereUniqueInput>
  }

  export type OrderedProductCreateNestedOneWithoutProductInput = {
    create?: XOR<OrderedProductCreateWithoutProductInput, OrderedProductUncheckedCreateWithoutProductInput>
    connectOrCreate?: OrderedProductCreateOrConnectWithoutProductInput
    connect?: OrderedProductWhereUniqueInput
  }

  export type CurrenciesOnProductsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CurrenciesOnProductsCreateWithoutProductInput>, Enumerable<CurrenciesOnProductsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CurrenciesOnProductsCreateOrConnectWithoutProductInput>
    createMany?: CurrenciesOnProductsCreateManyProductInputEnvelope
    connect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
  }

  export type WishlistUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput>
    connectOrCreate?: WishlistCreateOrConnectWithoutProductInput
    connect?: WishlistWhereUniqueInput
  }

  export type StockUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
    connectOrCreate?: StockCreateOrConnectWithoutProductInput
    connect?: StockWhereUniqueInput
  }

  export type FeaturedPhotoUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<FeaturedPhotoCreateWithoutProductInput>, Enumerable<FeaturedPhotoUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<FeaturedPhotoCreateOrConnectWithoutProductInput>
    createMany?: FeaturedPhotoCreateManyProductInputEnvelope
    connect?: Enumerable<FeaturedPhotoWhereUniqueInput>
  }

  export type OptionUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<OptionCreateWithoutProductInput>, Enumerable<OptionUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<OptionCreateOrConnectWithoutProductInput>
    createMany?: OptionCreateManyProductInputEnvelope
    connect?: Enumerable<OptionWhereUniqueInput>
  }

  export type OrderedProductUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<OrderedProductCreateWithoutProductInput, OrderedProductUncheckedCreateWithoutProductInput>
    connectOrCreate?: OrderedProductCreateOrConnectWithoutProductInput
    connect?: OrderedProductWhereUniqueInput
  }

  export type ShopUpdateOneRequiredWithoutProductsInput = {
    create?: XOR<ShopCreateWithoutProductsInput, ShopUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ShopCreateOrConnectWithoutProductsInput
    upsert?: ShopUpsertWithoutProductsInput
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutProductsInput, ShopUncheckedUpdateWithoutProductsInput>
  }

  export type EnumProductStatusFieldUpdateOperationsInput = {
    set?: ProductStatus
  }

  export type CurrenciesOnProductsUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<CurrenciesOnProductsCreateWithoutProductInput>, Enumerable<CurrenciesOnProductsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CurrenciesOnProductsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CurrenciesOnProductsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: CurrenciesOnProductsCreateManyProductInputEnvelope
    set?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    disconnect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    delete?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    connect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    update?: Enumerable<CurrenciesOnProductsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CurrenciesOnProductsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CurrenciesOnProductsScalarWhereInput>
  }

  export type WishlistUpdateOneWithoutProductInput = {
    create?: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput>
    connectOrCreate?: WishlistCreateOrConnectWithoutProductInput
    upsert?: WishlistUpsertWithoutProductInput
    disconnect?: boolean
    delete?: boolean
    connect?: WishlistWhereUniqueInput
    update?: XOR<WishlistUpdateWithoutProductInput, WishlistUncheckedUpdateWithoutProductInput>
  }

  export type StockUpdateOneWithoutProductInput = {
    create?: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
    connectOrCreate?: StockCreateOrConnectWithoutProductInput
    upsert?: StockUpsertWithoutProductInput
    disconnect?: boolean
    delete?: boolean
    connect?: StockWhereUniqueInput
    update?: XOR<StockUpdateWithoutProductInput, StockUncheckedUpdateWithoutProductInput>
  }

  export type FeaturedPhotoUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<FeaturedPhotoCreateWithoutProductInput>, Enumerable<FeaturedPhotoUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<FeaturedPhotoCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<FeaturedPhotoUpsertWithWhereUniqueWithoutProductInput>
    createMany?: FeaturedPhotoCreateManyProductInputEnvelope
    set?: Enumerable<FeaturedPhotoWhereUniqueInput>
    disconnect?: Enumerable<FeaturedPhotoWhereUniqueInput>
    delete?: Enumerable<FeaturedPhotoWhereUniqueInput>
    connect?: Enumerable<FeaturedPhotoWhereUniqueInput>
    update?: Enumerable<FeaturedPhotoUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<FeaturedPhotoUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<FeaturedPhotoScalarWhereInput>
  }

  export type OptionUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<OptionCreateWithoutProductInput>, Enumerable<OptionUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<OptionCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<OptionUpsertWithWhereUniqueWithoutProductInput>
    createMany?: OptionCreateManyProductInputEnvelope
    set?: Enumerable<OptionWhereUniqueInput>
    disconnect?: Enumerable<OptionWhereUniqueInput>
    delete?: Enumerable<OptionWhereUniqueInput>
    connect?: Enumerable<OptionWhereUniqueInput>
    update?: Enumerable<OptionUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<OptionUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<OptionScalarWhereInput>
  }

  export type OrderedProductUpdateOneWithoutProductInput = {
    create?: XOR<OrderedProductCreateWithoutProductInput, OrderedProductUncheckedCreateWithoutProductInput>
    connectOrCreate?: OrderedProductCreateOrConnectWithoutProductInput
    upsert?: OrderedProductUpsertWithoutProductInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrderedProductWhereUniqueInput
    update?: XOR<OrderedProductUpdateWithoutProductInput, OrderedProductUncheckedUpdateWithoutProductInput>
  }

  export type CurrenciesOnProductsUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<CurrenciesOnProductsCreateWithoutProductInput>, Enumerable<CurrenciesOnProductsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CurrenciesOnProductsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CurrenciesOnProductsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: CurrenciesOnProductsCreateManyProductInputEnvelope
    set?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    disconnect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    delete?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    connect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    update?: Enumerable<CurrenciesOnProductsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CurrenciesOnProductsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CurrenciesOnProductsScalarWhereInput>
  }

  export type WishlistUncheckedUpdateOneWithoutProductInput = {
    create?: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput>
    connectOrCreate?: WishlistCreateOrConnectWithoutProductInput
    upsert?: WishlistUpsertWithoutProductInput
    disconnect?: boolean
    delete?: boolean
    connect?: WishlistWhereUniqueInput
    update?: XOR<WishlistUpdateWithoutProductInput, WishlistUncheckedUpdateWithoutProductInput>
  }

  export type StockUncheckedUpdateOneWithoutProductInput = {
    create?: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
    connectOrCreate?: StockCreateOrConnectWithoutProductInput
    upsert?: StockUpsertWithoutProductInput
    disconnect?: boolean
    delete?: boolean
    connect?: StockWhereUniqueInput
    update?: XOR<StockUpdateWithoutProductInput, StockUncheckedUpdateWithoutProductInput>
  }

  export type FeaturedPhotoUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<FeaturedPhotoCreateWithoutProductInput>, Enumerable<FeaturedPhotoUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<FeaturedPhotoCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<FeaturedPhotoUpsertWithWhereUniqueWithoutProductInput>
    createMany?: FeaturedPhotoCreateManyProductInputEnvelope
    set?: Enumerable<FeaturedPhotoWhereUniqueInput>
    disconnect?: Enumerable<FeaturedPhotoWhereUniqueInput>
    delete?: Enumerable<FeaturedPhotoWhereUniqueInput>
    connect?: Enumerable<FeaturedPhotoWhereUniqueInput>
    update?: Enumerable<FeaturedPhotoUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<FeaturedPhotoUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<FeaturedPhotoScalarWhereInput>
  }

  export type OptionUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<OptionCreateWithoutProductInput>, Enumerable<OptionUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<OptionCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<OptionUpsertWithWhereUniqueWithoutProductInput>
    createMany?: OptionCreateManyProductInputEnvelope
    set?: Enumerable<OptionWhereUniqueInput>
    disconnect?: Enumerable<OptionWhereUniqueInput>
    delete?: Enumerable<OptionWhereUniqueInput>
    connect?: Enumerable<OptionWhereUniqueInput>
    update?: Enumerable<OptionUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<OptionUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<OptionScalarWhereInput>
  }

  export type OrderedProductUncheckedUpdateOneWithoutProductInput = {
    create?: XOR<OrderedProductCreateWithoutProductInput, OrderedProductUncheckedCreateWithoutProductInput>
    connectOrCreate?: OrderedProductCreateOrConnectWithoutProductInput
    upsert?: OrderedProductUpsertWithoutProductInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrderedProductWhereUniqueInput
    update?: XOR<OrderedProductUpdateWithoutProductInput, OrderedProductUncheckedUpdateWithoutProductInput>
  }

  export type CurrenciesOnProductsCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<Enumerable<CurrenciesOnProductsCreateWithoutCurrencyInput>, Enumerable<CurrenciesOnProductsUncheckedCreateWithoutCurrencyInput>>
    connectOrCreate?: Enumerable<CurrenciesOnProductsCreateOrConnectWithoutCurrencyInput>
    createMany?: CurrenciesOnProductsCreateManyCurrencyInputEnvelope
    connect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
  }

  export type CurrenciesOnProductsUncheckedCreateNestedManyWithoutCurrencyInput = {
    create?: XOR<Enumerable<CurrenciesOnProductsCreateWithoutCurrencyInput>, Enumerable<CurrenciesOnProductsUncheckedCreateWithoutCurrencyInput>>
    connectOrCreate?: Enumerable<CurrenciesOnProductsCreateOrConnectWithoutCurrencyInput>
    createMany?: CurrenciesOnProductsCreateManyCurrencyInputEnvelope
    connect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
  }

  export type CurrenciesOnProductsUpdateManyWithoutCurrencyInput = {
    create?: XOR<Enumerable<CurrenciesOnProductsCreateWithoutCurrencyInput>, Enumerable<CurrenciesOnProductsUncheckedCreateWithoutCurrencyInput>>
    connectOrCreate?: Enumerable<CurrenciesOnProductsCreateOrConnectWithoutCurrencyInput>
    upsert?: Enumerable<CurrenciesOnProductsUpsertWithWhereUniqueWithoutCurrencyInput>
    createMany?: CurrenciesOnProductsCreateManyCurrencyInputEnvelope
    set?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    disconnect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    delete?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    connect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    update?: Enumerable<CurrenciesOnProductsUpdateWithWhereUniqueWithoutCurrencyInput>
    updateMany?: Enumerable<CurrenciesOnProductsUpdateManyWithWhereWithoutCurrencyInput>
    deleteMany?: Enumerable<CurrenciesOnProductsScalarWhereInput>
  }

  export type CurrenciesOnProductsUncheckedUpdateManyWithoutCurrencyInput = {
    create?: XOR<Enumerable<CurrenciesOnProductsCreateWithoutCurrencyInput>, Enumerable<CurrenciesOnProductsUncheckedCreateWithoutCurrencyInput>>
    connectOrCreate?: Enumerable<CurrenciesOnProductsCreateOrConnectWithoutCurrencyInput>
    upsert?: Enumerable<CurrenciesOnProductsUpsertWithWhereUniqueWithoutCurrencyInput>
    createMany?: CurrenciesOnProductsCreateManyCurrencyInputEnvelope
    set?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    disconnect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    delete?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    connect?: Enumerable<CurrenciesOnProductsWhereUniqueInput>
    update?: Enumerable<CurrenciesOnProductsUpdateWithWhereUniqueWithoutCurrencyInput>
    updateMany?: Enumerable<CurrenciesOnProductsUpdateManyWithWhereWithoutCurrencyInput>
    deleteMany?: Enumerable<CurrenciesOnProductsScalarWhereInput>
  }

  export type ProductCreateNestedOneWithoutCurrenciesInput = {
    create?: XOR<ProductCreateWithoutCurrenciesInput, ProductUncheckedCreateWithoutCurrenciesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCurrenciesInput
    connect?: ProductWhereUniqueInput
  }

  export type CurrencyCreateNestedOneWithoutProductsInput = {
    create?: XOR<CurrencyCreateWithoutProductsInput, CurrencyUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutProductsInput
    connect?: CurrencyWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUpdateOneRequiredWithoutCurrenciesInput = {
    create?: XOR<ProductCreateWithoutCurrenciesInput, ProductUncheckedCreateWithoutCurrenciesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCurrenciesInput
    upsert?: ProductUpsertWithoutCurrenciesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutCurrenciesInput, ProductUncheckedUpdateWithoutCurrenciesInput>
  }

  export type CurrencyUpdateOneRequiredWithoutProductsInput = {
    create?: XOR<CurrencyCreateWithoutProductsInput, CurrencyUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CurrencyCreateOrConnectWithoutProductsInput
    upsert?: CurrencyUpsertWithoutProductsInput
    connect?: CurrencyWhereUniqueInput
    update?: XOR<CurrencyUpdateWithoutProductsInput, CurrencyUncheckedUpdateWithoutProductsInput>
  }

  export type PhoneShopCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<PhoneShopCreateWithoutShopInput>, Enumerable<PhoneShopUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<PhoneShopCreateOrConnectWithoutShopInput>
    createMany?: PhoneShopCreateManyShopInputEnvelope
    connect?: Enumerable<PhoneShopWhereUniqueInput>
  }

  export type ProductCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<ProductCreateWithoutShopInput>, Enumerable<ProductUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutShopInput>
    createMany?: ProductCreateManyShopInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type UsersOnShopsCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<UsersOnShopsCreateWithoutShopInput>, Enumerable<UsersOnShopsUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<UsersOnShopsCreateOrConnectWithoutShopInput>
    createMany?: UsersOnShopsCreateManyShopInputEnvelope
    connect?: Enumerable<UsersOnShopsWhereUniqueInput>
  }

  export type PhoneShopUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<PhoneShopCreateWithoutShopInput>, Enumerable<PhoneShopUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<PhoneShopCreateOrConnectWithoutShopInput>
    createMany?: PhoneShopCreateManyShopInputEnvelope
    connect?: Enumerable<PhoneShopWhereUniqueInput>
  }

  export type ProductUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<ProductCreateWithoutShopInput>, Enumerable<ProductUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutShopInput>
    createMany?: ProductCreateManyShopInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type UsersOnShopsUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<UsersOnShopsCreateWithoutShopInput>, Enumerable<UsersOnShopsUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<UsersOnShopsCreateOrConnectWithoutShopInput>
    createMany?: UsersOnShopsCreateManyShopInputEnvelope
    connect?: Enumerable<UsersOnShopsWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PhoneShopUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<PhoneShopCreateWithoutShopInput>, Enumerable<PhoneShopUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<PhoneShopCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<PhoneShopUpsertWithWhereUniqueWithoutShopInput>
    createMany?: PhoneShopCreateManyShopInputEnvelope
    set?: Enumerable<PhoneShopWhereUniqueInput>
    disconnect?: Enumerable<PhoneShopWhereUniqueInput>
    delete?: Enumerable<PhoneShopWhereUniqueInput>
    connect?: Enumerable<PhoneShopWhereUniqueInput>
    update?: Enumerable<PhoneShopUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<PhoneShopUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<PhoneShopScalarWhereInput>
  }

  export type ProductUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<ProductCreateWithoutShopInput>, Enumerable<ProductUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutShopInput>
    createMany?: ProductCreateManyShopInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type UsersOnShopsUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<UsersOnShopsCreateWithoutShopInput>, Enumerable<UsersOnShopsUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<UsersOnShopsCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<UsersOnShopsUpsertWithWhereUniqueWithoutShopInput>
    createMany?: UsersOnShopsCreateManyShopInputEnvelope
    set?: Enumerable<UsersOnShopsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnShopsWhereUniqueInput>
    delete?: Enumerable<UsersOnShopsWhereUniqueInput>
    connect?: Enumerable<UsersOnShopsWhereUniqueInput>
    update?: Enumerable<UsersOnShopsUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<UsersOnShopsUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<UsersOnShopsScalarWhereInput>
  }

  export type PhoneShopUncheckedUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<PhoneShopCreateWithoutShopInput>, Enumerable<PhoneShopUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<PhoneShopCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<PhoneShopUpsertWithWhereUniqueWithoutShopInput>
    createMany?: PhoneShopCreateManyShopInputEnvelope
    set?: Enumerable<PhoneShopWhereUniqueInput>
    disconnect?: Enumerable<PhoneShopWhereUniqueInput>
    delete?: Enumerable<PhoneShopWhereUniqueInput>
    connect?: Enumerable<PhoneShopWhereUniqueInput>
    update?: Enumerable<PhoneShopUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<PhoneShopUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<PhoneShopScalarWhereInput>
  }

  export type ProductUncheckedUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<ProductCreateWithoutShopInput>, Enumerable<ProductUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutShopInput>
    createMany?: ProductCreateManyShopInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type UsersOnShopsUncheckedUpdateManyWithoutShopInput = {
    create?: XOR<Enumerable<UsersOnShopsCreateWithoutShopInput>, Enumerable<UsersOnShopsUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<UsersOnShopsCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<UsersOnShopsUpsertWithWhereUniqueWithoutShopInput>
    createMany?: UsersOnShopsCreateManyShopInputEnvelope
    set?: Enumerable<UsersOnShopsWhereUniqueInput>
    disconnect?: Enumerable<UsersOnShopsWhereUniqueInput>
    delete?: Enumerable<UsersOnShopsWhereUniqueInput>
    connect?: Enumerable<UsersOnShopsWhereUniqueInput>
    update?: Enumerable<UsersOnShopsUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<UsersOnShopsUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<UsersOnShopsScalarWhereInput>
  }

  export type ShopCreateNestedOneWithoutOwnersInput = {
    create?: XOR<ShopCreateWithoutOwnersInput, ShopUncheckedCreateWithoutOwnersInput>
    connectOrCreate?: ShopCreateOrConnectWithoutOwnersInput
    connect?: ShopWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutShopsInput = {
    create?: XOR<UserCreateWithoutShopsInput, UserUncheckedCreateWithoutShopsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShopsInput
    connect?: UserWhereUniqueInput
  }

  export type ShopUpdateOneRequiredWithoutOwnersInput = {
    create?: XOR<ShopCreateWithoutOwnersInput, ShopUncheckedCreateWithoutOwnersInput>
    connectOrCreate?: ShopCreateOrConnectWithoutOwnersInput
    upsert?: ShopUpsertWithoutOwnersInput
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutOwnersInput, ShopUncheckedUpdateWithoutOwnersInput>
  }

  export type UserUpdateOneRequiredWithoutShopsInput = {
    create?: XOR<UserCreateWithoutShopsInput, UserUncheckedCreateWithoutShopsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShopsInput
    upsert?: UserUpsertWithoutShopsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutShopsInput, UserUncheckedUpdateWithoutShopsInput>
  }

  export type UserCreateNestedOneWithoutWishlistsInput = {
    create?: XOR<UserCreateWithoutWishlistsInput, UserUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWishlistsInput
    connect?: UserWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutWishlistInput = {
    create?: XOR<ProductCreateWithoutWishlistInput, ProductUncheckedCreateWithoutWishlistInput>
    connectOrCreate?: ProductCreateOrConnectWithoutWishlistInput
    connect?: ProductWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWishlistsInput = {
    create?: XOR<UserCreateWithoutWishlistsInput, UserUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWishlistsInput
    upsert?: UserUpsertWithoutWishlistsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutWishlistsInput, UserUncheckedUpdateWithoutWishlistsInput>
  }

  export type ProductUpdateOneRequiredWithoutWishlistInput = {
    create?: XOR<ProductCreateWithoutWishlistInput, ProductUncheckedCreateWithoutWishlistInput>
    connectOrCreate?: ProductCreateOrConnectWithoutWishlistInput
    upsert?: ProductUpsertWithoutWishlistInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutWishlistInput, ProductUncheckedUpdateWithoutWishlistInput>
  }

  export type ShopCreateNestedOneWithoutPhone_numbersInput = {
    create?: XOR<ShopCreateWithoutPhone_numbersInput, ShopUncheckedCreateWithoutPhone_numbersInput>
    connectOrCreate?: ShopCreateOrConnectWithoutPhone_numbersInput
    connect?: ShopWhereUniqueInput
  }

  export type ShopUpdateOneRequiredWithoutPhone_numbersInput = {
    create?: XOR<ShopCreateWithoutPhone_numbersInput, ShopUncheckedCreateWithoutPhone_numbersInput>
    connectOrCreate?: ShopCreateOrConnectWithoutPhone_numbersInput
    upsert?: ShopUpsertWithoutPhone_numbersInput
    connect?: ShopWhereUniqueInput
    update?: XOR<ShopUpdateWithoutPhone_numbersInput, ShopUncheckedUpdateWithoutPhone_numbersInput>
  }

  export type ProductCreateNestedOneWithoutStockInput = {
    create?: XOR<ProductCreateWithoutStockInput, ProductUncheckedCreateWithoutStockInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStockInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutStockInput = {
    create?: XOR<ProductCreateWithoutStockInput, ProductUncheckedCreateWithoutStockInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStockInput
    upsert?: ProductUpsertWithoutStockInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutStockInput, ProductUncheckedUpdateWithoutStockInput>
  }

  export type ProductCreateNestedOneWithoutFeatured_photosInput = {
    create?: XOR<ProductCreateWithoutFeatured_photosInput, ProductUncheckedCreateWithoutFeatured_photosInput>
    connectOrCreate?: ProductCreateOrConnectWithoutFeatured_photosInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutFeatured_photosInput = {
    create?: XOR<ProductCreateWithoutFeatured_photosInput, ProductUncheckedCreateWithoutFeatured_photosInput>
    connectOrCreate?: ProductCreateOrConnectWithoutFeatured_photosInput
    upsert?: ProductUpsertWithoutFeatured_photosInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutFeatured_photosInput, ProductUncheckedUpdateWithoutFeatured_photosInput>
  }

  export type OrderedProductCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderedProductCreateWithoutOrderInput>, Enumerable<OrderedProductUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderedProductCreateOrConnectWithoutOrderInput>
    createMany?: OrderedProductCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderedProductWhereUniqueInput>
  }

  export type ShippingAddressCreateNestedOneWithoutOrderInput = {
    create?: XOR<ShippingAddressCreateWithoutOrderInput, ShippingAddressUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ShippingAddressCreateOrConnectWithoutOrderInput
    connect?: ShippingAddressWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type OrderedProductUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderedProductCreateWithoutOrderInput>, Enumerable<OrderedProductUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderedProductCreateOrConnectWithoutOrderInput>
    createMany?: OrderedProductCreateManyOrderInputEnvelope
    connect?: Enumerable<OrderedProductWhereUniqueInput>
  }

  export type ShippingAddressUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<ShippingAddressCreateWithoutOrderInput, ShippingAddressUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ShippingAddressCreateOrConnectWithoutOrderInput
    connect?: ShippingAddressWhereUniqueInput
  }

  export type OrderedProductUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderedProductCreateWithoutOrderInput>, Enumerable<OrderedProductUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderedProductCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<OrderedProductUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: OrderedProductCreateManyOrderInputEnvelope
    set?: Enumerable<OrderedProductWhereUniqueInput>
    disconnect?: Enumerable<OrderedProductWhereUniqueInput>
    delete?: Enumerable<OrderedProductWhereUniqueInput>
    connect?: Enumerable<OrderedProductWhereUniqueInput>
    update?: Enumerable<OrderedProductUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<OrderedProductUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<OrderedProductScalarWhereInput>
  }

  export type ShippingAddressUpdateOneWithoutOrderInput = {
    create?: XOR<ShippingAddressCreateWithoutOrderInput, ShippingAddressUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ShippingAddressCreateOrConnectWithoutOrderInput
    upsert?: ShippingAddressUpsertWithoutOrderInput
    disconnect?: boolean
    delete?: boolean
    connect?: ShippingAddressWhereUniqueInput
    update?: XOR<ShippingAddressUpdateWithoutOrderInput, ShippingAddressUncheckedUpdateWithoutOrderInput>
  }

  export type UserUpdateOneRequiredWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderedProductUncheckedUpdateManyWithoutOrderInput = {
    create?: XOR<Enumerable<OrderedProductCreateWithoutOrderInput>, Enumerable<OrderedProductUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<OrderedProductCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<OrderedProductUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: OrderedProductCreateManyOrderInputEnvelope
    set?: Enumerable<OrderedProductWhereUniqueInput>
    disconnect?: Enumerable<OrderedProductWhereUniqueInput>
    delete?: Enumerable<OrderedProductWhereUniqueInput>
    connect?: Enumerable<OrderedProductWhereUniqueInput>
    update?: Enumerable<OrderedProductUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<OrderedProductUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<OrderedProductScalarWhereInput>
  }

  export type ShippingAddressUncheckedUpdateOneWithoutOrderInput = {
    create?: XOR<ShippingAddressCreateWithoutOrderInput, ShippingAddressUncheckedCreateWithoutOrderInput>
    connectOrCreate?: ShippingAddressCreateOrConnectWithoutOrderInput
    upsert?: ShippingAddressUpsertWithoutOrderInput
    disconnect?: boolean
    delete?: boolean
    connect?: ShippingAddressWhereUniqueInput
    update?: XOR<ShippingAddressUpdateWithoutOrderInput, ShippingAddressUncheckedUpdateWithoutOrderInput>
  }

  export type OrderCreateNestedOneWithoutProductsInput = {
    create?: XOR<OrderCreateWithoutProductsInput, OrderUncheckedCreateWithoutProductsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutProductsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrderedProductInput = {
    create?: XOR<ProductCreateWithoutOrderedProductInput, ProductUncheckedCreateWithoutOrderedProductInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderedProductInput
    connect?: ProductWhereUniqueInput
  }

  export type OptionCreateNestedOneWithoutOrderedProductInput = {
    create?: XOR<OptionCreateWithoutOrderedProductInput, OptionUncheckedCreateWithoutOrderedProductInput>
    connectOrCreate?: OptionCreateOrConnectWithoutOrderedProductInput
    connect?: OptionWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutProductsInput = {
    create?: XOR<OrderCreateWithoutProductsInput, OrderUncheckedCreateWithoutProductsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutProductsInput
    upsert?: OrderUpsertWithoutProductsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<OrderUpdateWithoutProductsInput, OrderUncheckedUpdateWithoutProductsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrderedProductInput = {
    create?: XOR<ProductCreateWithoutOrderedProductInput, ProductUncheckedCreateWithoutOrderedProductInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderedProductInput
    upsert?: ProductUpsertWithoutOrderedProductInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutOrderedProductInput, ProductUncheckedUpdateWithoutOrderedProductInput>
  }

  export type OptionUpdateOneRequiredWithoutOrderedProductInput = {
    create?: XOR<OptionCreateWithoutOrderedProductInput, OptionUncheckedCreateWithoutOrderedProductInput>
    connectOrCreate?: OptionCreateOrConnectWithoutOrderedProductInput
    upsert?: OptionUpsertWithoutOrderedProductInput
    connect?: OptionWhereUniqueInput
    update?: XOR<OptionUpdateWithoutOrderedProductInput, OptionUncheckedUpdateWithoutOrderedProductInput>
  }

  export type ProductCreateNestedOneWithoutOptionsInput = {
    create?: XOR<ProductCreateWithoutOptionsInput, ProductUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOptionsInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderedProductCreateNestedManyWithoutOptionInput = {
    create?: XOR<Enumerable<OrderedProductCreateWithoutOptionInput>, Enumerable<OrderedProductUncheckedCreateWithoutOptionInput>>
    connectOrCreate?: Enumerable<OrderedProductCreateOrConnectWithoutOptionInput>
    createMany?: OrderedProductCreateManyOptionInputEnvelope
    connect?: Enumerable<OrderedProductWhereUniqueInput>
  }

  export type OrderedProductUncheckedCreateNestedManyWithoutOptionInput = {
    create?: XOR<Enumerable<OrderedProductCreateWithoutOptionInput>, Enumerable<OrderedProductUncheckedCreateWithoutOptionInput>>
    connectOrCreate?: Enumerable<OrderedProductCreateOrConnectWithoutOptionInput>
    createMany?: OrderedProductCreateManyOptionInputEnvelope
    connect?: Enumerable<OrderedProductWhereUniqueInput>
  }

  export type ProductUpdateOneRequiredWithoutOptionsInput = {
    create?: XOR<ProductCreateWithoutOptionsInput, ProductUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOptionsInput
    upsert?: ProductUpsertWithoutOptionsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutOptionsInput, ProductUncheckedUpdateWithoutOptionsInput>
  }

  export type OrderedProductUpdateManyWithoutOptionInput = {
    create?: XOR<Enumerable<OrderedProductCreateWithoutOptionInput>, Enumerable<OrderedProductUncheckedCreateWithoutOptionInput>>
    connectOrCreate?: Enumerable<OrderedProductCreateOrConnectWithoutOptionInput>
    upsert?: Enumerable<OrderedProductUpsertWithWhereUniqueWithoutOptionInput>
    createMany?: OrderedProductCreateManyOptionInputEnvelope
    set?: Enumerable<OrderedProductWhereUniqueInput>
    disconnect?: Enumerable<OrderedProductWhereUniqueInput>
    delete?: Enumerable<OrderedProductWhereUniqueInput>
    connect?: Enumerable<OrderedProductWhereUniqueInput>
    update?: Enumerable<OrderedProductUpdateWithWhereUniqueWithoutOptionInput>
    updateMany?: Enumerable<OrderedProductUpdateManyWithWhereWithoutOptionInput>
    deleteMany?: Enumerable<OrderedProductScalarWhereInput>
  }

  export type OrderedProductUncheckedUpdateManyWithoutOptionInput = {
    create?: XOR<Enumerable<OrderedProductCreateWithoutOptionInput>, Enumerable<OrderedProductUncheckedCreateWithoutOptionInput>>
    connectOrCreate?: Enumerable<OrderedProductCreateOrConnectWithoutOptionInput>
    upsert?: Enumerable<OrderedProductUpsertWithWhereUniqueWithoutOptionInput>
    createMany?: OrderedProductCreateManyOptionInputEnvelope
    set?: Enumerable<OrderedProductWhereUniqueInput>
    disconnect?: Enumerable<OrderedProductWhereUniqueInput>
    delete?: Enumerable<OrderedProductWhereUniqueInput>
    connect?: Enumerable<OrderedProductWhereUniqueInput>
    update?: Enumerable<OrderedProductUpdateWithWhereUniqueWithoutOptionInput>
    updateMany?: Enumerable<OrderedProductUpdateManyWithWhereWithoutOptionInput>
    deleteMany?: Enumerable<OrderedProductScalarWhereInput>
  }

  export type TownshipCreateNestedOneWithoutAddressesInput = {
    create?: XOR<TownshipCreateWithoutAddressesInput, TownshipUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: TownshipCreateOrConnectWithoutAddressesInput
    connect?: TownshipWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAddressesInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    connect?: UserWhereUniqueInput
  }

  export type ShippingAddressCreateNestedOneWithoutAddressInput = {
    create?: XOR<ShippingAddressCreateWithoutAddressInput, ShippingAddressUncheckedCreateWithoutAddressInput>
    connectOrCreate?: ShippingAddressCreateOrConnectWithoutAddressInput
    connect?: ShippingAddressWhereUniqueInput
  }

  export type ShippingAddressUncheckedCreateNestedOneWithoutAddressInput = {
    create?: XOR<ShippingAddressCreateWithoutAddressInput, ShippingAddressUncheckedCreateWithoutAddressInput>
    connectOrCreate?: ShippingAddressCreateOrConnectWithoutAddressInput
    connect?: ShippingAddressWhereUniqueInput
  }

  export type TownshipUpdateOneRequiredWithoutAddressesInput = {
    create?: XOR<TownshipCreateWithoutAddressesInput, TownshipUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: TownshipCreateOrConnectWithoutAddressesInput
    upsert?: TownshipUpsertWithoutAddressesInput
    connect?: TownshipWhereUniqueInput
    update?: XOR<TownshipUpdateWithoutAddressesInput, TownshipUncheckedUpdateWithoutAddressesInput>
  }

  export type UserUpdateOneRequiredWithoutAddressesInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    upsert?: UserUpsertWithoutAddressesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
  }

  export type ShippingAddressUpdateOneWithoutAddressInput = {
    create?: XOR<ShippingAddressCreateWithoutAddressInput, ShippingAddressUncheckedCreateWithoutAddressInput>
    connectOrCreate?: ShippingAddressCreateOrConnectWithoutAddressInput
    upsert?: ShippingAddressUpsertWithoutAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: ShippingAddressWhereUniqueInput
    update?: XOR<ShippingAddressUpdateWithoutAddressInput, ShippingAddressUncheckedUpdateWithoutAddressInput>
  }

  export type ShippingAddressUncheckedUpdateOneWithoutAddressInput = {
    create?: XOR<ShippingAddressCreateWithoutAddressInput, ShippingAddressUncheckedCreateWithoutAddressInput>
    connectOrCreate?: ShippingAddressCreateOrConnectWithoutAddressInput
    upsert?: ShippingAddressUpsertWithoutAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: ShippingAddressWhereUniqueInput
    update?: XOR<ShippingAddressUpdateWithoutAddressInput, ShippingAddressUncheckedUpdateWithoutAddressInput>
  }

  export type TownshipCreateNestedManyWithoutStateInput = {
    create?: XOR<Enumerable<TownshipCreateWithoutStateInput>, Enumerable<TownshipUncheckedCreateWithoutStateInput>>
    connectOrCreate?: Enumerable<TownshipCreateOrConnectWithoutStateInput>
    createMany?: TownshipCreateManyStateInputEnvelope
    connect?: Enumerable<TownshipWhereUniqueInput>
  }

  export type TownshipUncheckedCreateNestedManyWithoutStateInput = {
    create?: XOR<Enumerable<TownshipCreateWithoutStateInput>, Enumerable<TownshipUncheckedCreateWithoutStateInput>>
    connectOrCreate?: Enumerable<TownshipCreateOrConnectWithoutStateInput>
    createMany?: TownshipCreateManyStateInputEnvelope
    connect?: Enumerable<TownshipWhereUniqueInput>
  }

  export type TownshipUpdateManyWithoutStateInput = {
    create?: XOR<Enumerable<TownshipCreateWithoutStateInput>, Enumerable<TownshipUncheckedCreateWithoutStateInput>>
    connectOrCreate?: Enumerable<TownshipCreateOrConnectWithoutStateInput>
    upsert?: Enumerable<TownshipUpsertWithWhereUniqueWithoutStateInput>
    createMany?: TownshipCreateManyStateInputEnvelope
    set?: Enumerable<TownshipWhereUniqueInput>
    disconnect?: Enumerable<TownshipWhereUniqueInput>
    delete?: Enumerable<TownshipWhereUniqueInput>
    connect?: Enumerable<TownshipWhereUniqueInput>
    update?: Enumerable<TownshipUpdateWithWhereUniqueWithoutStateInput>
    updateMany?: Enumerable<TownshipUpdateManyWithWhereWithoutStateInput>
    deleteMany?: Enumerable<TownshipScalarWhereInput>
  }

  export type TownshipUncheckedUpdateManyWithoutStateInput = {
    create?: XOR<Enumerable<TownshipCreateWithoutStateInput>, Enumerable<TownshipUncheckedCreateWithoutStateInput>>
    connectOrCreate?: Enumerable<TownshipCreateOrConnectWithoutStateInput>
    upsert?: Enumerable<TownshipUpsertWithWhereUniqueWithoutStateInput>
    createMany?: TownshipCreateManyStateInputEnvelope
    set?: Enumerable<TownshipWhereUniqueInput>
    disconnect?: Enumerable<TownshipWhereUniqueInput>
    delete?: Enumerable<TownshipWhereUniqueInput>
    connect?: Enumerable<TownshipWhereUniqueInput>
    update?: Enumerable<TownshipUpdateWithWhereUniqueWithoutStateInput>
    updateMany?: Enumerable<TownshipUpdateManyWithWhereWithoutStateInput>
    deleteMany?: Enumerable<TownshipScalarWhereInput>
  }

  export type StateCreateNestedOneWithoutTownshipsInput = {
    create?: XOR<StateCreateWithoutTownshipsInput, StateUncheckedCreateWithoutTownshipsInput>
    connectOrCreate?: StateCreateOrConnectWithoutTownshipsInput
    connect?: StateWhereUniqueInput
  }

  export type AddressCreateNestedManyWithoutTownshipInput = {
    create?: XOR<Enumerable<AddressCreateWithoutTownshipInput>, Enumerable<AddressUncheckedCreateWithoutTownshipInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutTownshipInput>
    createMany?: AddressCreateManyTownshipInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type AddressUncheckedCreateNestedManyWithoutTownshipInput = {
    create?: XOR<Enumerable<AddressCreateWithoutTownshipInput>, Enumerable<AddressUncheckedCreateWithoutTownshipInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutTownshipInput>
    createMany?: AddressCreateManyTownshipInputEnvelope
    connect?: Enumerable<AddressWhereUniqueInput>
  }

  export type StateUpdateOneRequiredWithoutTownshipsInput = {
    create?: XOR<StateCreateWithoutTownshipsInput, StateUncheckedCreateWithoutTownshipsInput>
    connectOrCreate?: StateCreateOrConnectWithoutTownshipsInput
    upsert?: StateUpsertWithoutTownshipsInput
    connect?: StateWhereUniqueInput
    update?: XOR<StateUpdateWithoutTownshipsInput, StateUncheckedUpdateWithoutTownshipsInput>
  }

  export type AddressUpdateManyWithoutTownshipInput = {
    create?: XOR<Enumerable<AddressCreateWithoutTownshipInput>, Enumerable<AddressUncheckedCreateWithoutTownshipInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutTownshipInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutTownshipInput>
    createMany?: AddressCreateManyTownshipInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutTownshipInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutTownshipInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type AddressUncheckedUpdateManyWithoutTownshipInput = {
    create?: XOR<Enumerable<AddressCreateWithoutTownshipInput>, Enumerable<AddressUncheckedCreateWithoutTownshipInput>>
    connectOrCreate?: Enumerable<AddressCreateOrConnectWithoutTownshipInput>
    upsert?: Enumerable<AddressUpsertWithWhereUniqueWithoutTownshipInput>
    createMany?: AddressCreateManyTownshipInputEnvelope
    set?: Enumerable<AddressWhereUniqueInput>
    disconnect?: Enumerable<AddressWhereUniqueInput>
    delete?: Enumerable<AddressWhereUniqueInput>
    connect?: Enumerable<AddressWhereUniqueInput>
    update?: Enumerable<AddressUpdateWithWhereUniqueWithoutTownshipInput>
    updateMany?: Enumerable<AddressUpdateManyWithWhereWithoutTownshipInput>
    deleteMany?: Enumerable<AddressScalarWhereInput>
  }

  export type OrderCreateNestedOneWithoutShipping_addressInput = {
    create?: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput>
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_addressInput
    connect?: OrderWhereUniqueInput
  }

  export type AddressCreateNestedOneWithoutShippingAddressInput = {
    create?: XOR<AddressCreateWithoutShippingAddressInput, AddressUncheckedCreateWithoutShippingAddressInput>
    connectOrCreate?: AddressCreateOrConnectWithoutShippingAddressInput
    connect?: AddressWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutShipping_addressInput = {
    create?: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput>
    connectOrCreate?: OrderCreateOrConnectWithoutShipping_addressInput
    upsert?: OrderUpsertWithoutShipping_addressInput
    connect?: OrderWhereUniqueInput
    update?: XOR<OrderUpdateWithoutShipping_addressInput, OrderUncheckedUpdateWithoutShipping_addressInput>
  }

  export type AddressUpdateOneRequiredWithoutShippingAddressInput = {
    create?: XOR<AddressCreateWithoutShippingAddressInput, AddressUncheckedCreateWithoutShippingAddressInput>
    connectOrCreate?: AddressCreateOrConnectWithoutShippingAddressInput
    upsert?: AddressUpsertWithoutShippingAddressInput
    connect?: AddressWhereUniqueInput
    update?: XOR<AddressUpdateWithoutShippingAddressInput, AddressUncheckedUpdateWithoutShippingAddressInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumUserTypeFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeFilter | UserType
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumUserTypeWithAggregatesFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeWithAggregatesFilter | UserType
    _count?: NestedIntFilter
    _min?: NestedEnumUserTypeFilter
    _max?: NestedEnumUserTypeFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumProductStatusFilter = {
    equals?: ProductStatus
    in?: Enumerable<ProductStatus>
    notIn?: Enumerable<ProductStatus>
    not?: NestedEnumProductStatusFilter | ProductStatus
  }

  export type NestedEnumProductStatusWithAggregatesFilter = {
    equals?: ProductStatus
    in?: Enumerable<ProductStatus>
    notIn?: Enumerable<ProductStatus>
    not?: NestedEnumProductStatusWithAggregatesFilter | ProductStatus
    _count?: NestedIntFilter
    _min?: NestedEnumProductStatusFilter
    _max?: NestedEnumProductStatusFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AddressCreateWithoutUserInput = {
    id?: number
    name: string
    adress: string
    township: TownshipCreateNestedOneWithoutAddressesInput
    ShippingAddress?: ShippingAddressCreateNestedOneWithoutAddressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    adress: string
    townshipId: number
    ShippingAddress?: ShippingAddressUncheckedCreateNestedOneWithoutAddressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateManyUserInputEnvelope = {
    data: Enumerable<AddressCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UsersOnShopsCreateWithoutUserInput = {
    shop: ShopCreateNestedOneWithoutOwnersInput
    assignedby: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersOnShopsUncheckedCreateWithoutUserInput = {
    shopId: number
    assignedby: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersOnShopsCreateOrConnectWithoutUserInput = {
    where: UsersOnShopsWhereUniqueInput
    create: XOR<UsersOnShopsCreateWithoutUserInput, UsersOnShopsUncheckedCreateWithoutUserInput>
  }

  export type UsersOnShopsCreateManyUserInputEnvelope = {
    data: Enumerable<UsersOnShopsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type WishlistCreateWithoutUserInput = {
    id?: number
    product: ProductCreateNestedOneWithoutWishlistInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistUncheckedCreateWithoutUserInput = {
    id?: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistCreateOrConnectWithoutUserInput = {
    where: WishlistWhereUniqueInput
    create: XOR<WishlistCreateWithoutUserInput, WishlistUncheckedCreateWithoutUserInput>
  }

  export type WishlistCreateManyUserInputEnvelope = {
    data: Enumerable<WishlistCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    id?: number
    productId: number
    products?: OrderedProductCreateNestedManyWithoutOrderInput
    shipping_address?: ShippingAddressCreateNestedOneWithoutOrderInput
    total_price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    productId: number
    products?: OrderedProductUncheckedCreateNestedManyWithoutOrderInput
    shipping_address?: ShippingAddressUncheckedCreateNestedOneWithoutOrderInput
    total_price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: Enumerable<OrderCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithWhereWithoutUserInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutAddressesInput>
  }

  export type AddressScalarWhereInput = {
    AND?: Enumerable<AddressScalarWhereInput>
    OR?: Enumerable<AddressScalarWhereInput>
    NOT?: Enumerable<AddressScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    adress?: StringFilter | string
    townshipId?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UsersOnShopsUpsertWithWhereUniqueWithoutUserInput = {
    where: UsersOnShopsWhereUniqueInput
    update: XOR<UsersOnShopsUpdateWithoutUserInput, UsersOnShopsUncheckedUpdateWithoutUserInput>
    create: XOR<UsersOnShopsCreateWithoutUserInput, UsersOnShopsUncheckedCreateWithoutUserInput>
  }

  export type UsersOnShopsUpdateWithWhereUniqueWithoutUserInput = {
    where: UsersOnShopsWhereUniqueInput
    data: XOR<UsersOnShopsUpdateWithoutUserInput, UsersOnShopsUncheckedUpdateWithoutUserInput>
  }

  export type UsersOnShopsUpdateManyWithWhereWithoutUserInput = {
    where: UsersOnShopsScalarWhereInput
    data: XOR<UsersOnShopsUpdateManyMutationInput, UsersOnShopsUncheckedUpdateManyWithoutShopsInput>
  }

  export type UsersOnShopsScalarWhereInput = {
    AND?: Enumerable<UsersOnShopsScalarWhereInput>
    OR?: Enumerable<UsersOnShopsScalarWhereInput>
    NOT?: Enumerable<UsersOnShopsScalarWhereInput>
    shopId?: IntFilter | number
    userId?: IntFilter | number
    assignedby?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WishlistUpsertWithWhereUniqueWithoutUserInput = {
    where: WishlistWhereUniqueInput
    update: XOR<WishlistUpdateWithoutUserInput, WishlistUncheckedUpdateWithoutUserInput>
    create: XOR<WishlistCreateWithoutUserInput, WishlistUncheckedCreateWithoutUserInput>
  }

  export type WishlistUpdateWithWhereUniqueWithoutUserInput = {
    where: WishlistWhereUniqueInput
    data: XOR<WishlistUpdateWithoutUserInput, WishlistUncheckedUpdateWithoutUserInput>
  }

  export type WishlistUpdateManyWithWhereWithoutUserInput = {
    where: WishlistScalarWhereInput
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyWithoutWishlistsInput>
  }

  export type WishlistScalarWhereInput = {
    AND?: Enumerable<WishlistScalarWhereInput>
    OR?: Enumerable<WishlistScalarWhereInput>
    NOT?: Enumerable<WishlistScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOrdersInput>
  }

  export type OrderScalarWhereInput = {
    AND?: Enumerable<OrderScalarWhereInput>
    OR?: Enumerable<OrderScalarWhereInput>
    NOT?: Enumerable<OrderScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    productId?: IntFilter | number
    total_price?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ShopCreateWithoutProductsInput = {
    name: string
    slug: string
    address?: string | null
    phone_numbers?: PhoneShopCreateNestedManyWithoutShopInput
    owners?: UsersOnShopsCreateNestedManyWithoutShopInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    slug: string
    address?: string | null
    phone_numbers?: PhoneShopUncheckedCreateNestedManyWithoutShopInput
    owners?: UsersOnShopsUncheckedCreateNestedManyWithoutShopInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopCreateOrConnectWithoutProductsInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutProductsInput, ShopUncheckedCreateWithoutProductsInput>
  }

  export type CurrenciesOnProductsCreateWithoutProductInput = {
    sell_price: number
    currency: CurrencyCreateNestedOneWithoutProductsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrenciesOnProductsUncheckedCreateWithoutProductInput = {
    id?: number
    sell_price: number
    currencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrenciesOnProductsCreateOrConnectWithoutProductInput = {
    where: CurrenciesOnProductsWhereUniqueInput
    create: XOR<CurrenciesOnProductsCreateWithoutProductInput, CurrenciesOnProductsUncheckedCreateWithoutProductInput>
  }

  export type CurrenciesOnProductsCreateManyProductInputEnvelope = {
    data: Enumerable<CurrenciesOnProductsCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type WishlistCreateWithoutProductInput = {
    id?: number
    user: UserCreateNestedOneWithoutWishlistsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistUncheckedCreateWithoutProductInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistCreateOrConnectWithoutProductInput = {
    where: WishlistWhereUniqueInput
    create: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput>
  }

  export type StockCreateWithoutProductInput = {
    id?: number
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockUncheckedCreateWithoutProductInput = {
    id?: number
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockCreateOrConnectWithoutProductInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
  }

  export type FeaturedPhotoCreateWithoutProductInput = {
    id?: number
    photo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeaturedPhotoUncheckedCreateWithoutProductInput = {
    id?: number
    photo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeaturedPhotoCreateOrConnectWithoutProductInput = {
    where: FeaturedPhotoWhereUniqueInput
    create: XOR<FeaturedPhotoCreateWithoutProductInput, FeaturedPhotoUncheckedCreateWithoutProductInput>
  }

  export type FeaturedPhotoCreateManyProductInputEnvelope = {
    data: Enumerable<FeaturedPhotoCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type OptionCreateWithoutProductInput = {
    id?: number
    name: string
    value: string
    OrderedProduct?: OrderedProductCreateNestedManyWithoutOptionInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionUncheckedCreateWithoutProductInput = {
    id?: number
    name: string
    value: string
    OrderedProduct?: OrderedProductUncheckedCreateNestedManyWithoutOptionInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionCreateOrConnectWithoutProductInput = {
    where: OptionWhereUniqueInput
    create: XOR<OptionCreateWithoutProductInput, OptionUncheckedCreateWithoutProductInput>
  }

  export type OptionCreateManyProductInputEnvelope = {
    data: Enumerable<OptionCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type OrderedProductCreateWithoutProductInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    order: OrderCreateNestedOneWithoutProductsInput
    option: OptionCreateNestedOneWithoutOrderedProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductUncheckedCreateWithoutProductInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    orderId: number
    optionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductCreateOrConnectWithoutProductInput = {
    where: OrderedProductWhereUniqueInput
    create: XOR<OrderedProductCreateWithoutProductInput, OrderedProductUncheckedCreateWithoutProductInput>
  }

  export type ShopUpsertWithoutProductsInput = {
    update: XOR<ShopUpdateWithoutProductsInput, ShopUncheckedUpdateWithoutProductsInput>
    create: XOR<ShopCreateWithoutProductsInput, ShopUncheckedCreateWithoutProductsInput>
  }

  export type ShopUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_numbers?: PhoneShopUpdateManyWithoutShopInput
    owners?: UsersOnShopsUpdateManyWithoutShopInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_numbers?: PhoneShopUncheckedUpdateManyWithoutShopInput
    owners?: UsersOnShopsUncheckedUpdateManyWithoutShopInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsUpsertWithWhereUniqueWithoutProductInput = {
    where: CurrenciesOnProductsWhereUniqueInput
    update: XOR<CurrenciesOnProductsUpdateWithoutProductInput, CurrenciesOnProductsUncheckedUpdateWithoutProductInput>
    create: XOR<CurrenciesOnProductsCreateWithoutProductInput, CurrenciesOnProductsUncheckedCreateWithoutProductInput>
  }

  export type CurrenciesOnProductsUpdateWithWhereUniqueWithoutProductInput = {
    where: CurrenciesOnProductsWhereUniqueInput
    data: XOR<CurrenciesOnProductsUpdateWithoutProductInput, CurrenciesOnProductsUncheckedUpdateWithoutProductInput>
  }

  export type CurrenciesOnProductsUpdateManyWithWhereWithoutProductInput = {
    where: CurrenciesOnProductsScalarWhereInput
    data: XOR<CurrenciesOnProductsUpdateManyMutationInput, CurrenciesOnProductsUncheckedUpdateManyWithoutCurrenciesInput>
  }

  export type CurrenciesOnProductsScalarWhereInput = {
    AND?: Enumerable<CurrenciesOnProductsScalarWhereInput>
    OR?: Enumerable<CurrenciesOnProductsScalarWhereInput>
    NOT?: Enumerable<CurrenciesOnProductsScalarWhereInput>
    id?: IntFilter | number
    sell_price?: FloatFilter | number
    productId?: IntFilter | number
    currencyId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WishlistUpsertWithoutProductInput = {
    update: XOR<WishlistUpdateWithoutProductInput, WishlistUncheckedUpdateWithoutProductInput>
    create: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput>
  }

  export type WishlistUpdateWithoutProductInput = {
    user?: UserUpdateOneRequiredWithoutWishlistsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUpsertWithoutProductInput = {
    update: XOR<StockUpdateWithoutProductInput, StockUncheckedUpdateWithoutProductInput>
    create: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
  }

  export type StockUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturedPhotoUpsertWithWhereUniqueWithoutProductInput = {
    where: FeaturedPhotoWhereUniqueInput
    update: XOR<FeaturedPhotoUpdateWithoutProductInput, FeaturedPhotoUncheckedUpdateWithoutProductInput>
    create: XOR<FeaturedPhotoCreateWithoutProductInput, FeaturedPhotoUncheckedCreateWithoutProductInput>
  }

  export type FeaturedPhotoUpdateWithWhereUniqueWithoutProductInput = {
    where: FeaturedPhotoWhereUniqueInput
    data: XOR<FeaturedPhotoUpdateWithoutProductInput, FeaturedPhotoUncheckedUpdateWithoutProductInput>
  }

  export type FeaturedPhotoUpdateManyWithWhereWithoutProductInput = {
    where: FeaturedPhotoScalarWhereInput
    data: XOR<FeaturedPhotoUpdateManyMutationInput, FeaturedPhotoUncheckedUpdateManyWithoutFeatured_photosInput>
  }

  export type FeaturedPhotoScalarWhereInput = {
    AND?: Enumerable<FeaturedPhotoScalarWhereInput>
    OR?: Enumerable<FeaturedPhotoScalarWhereInput>
    NOT?: Enumerable<FeaturedPhotoScalarWhereInput>
    id?: IntFilter | number
    photo?: StringFilter | string
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OptionUpsertWithWhereUniqueWithoutProductInput = {
    where: OptionWhereUniqueInput
    update: XOR<OptionUpdateWithoutProductInput, OptionUncheckedUpdateWithoutProductInput>
    create: XOR<OptionCreateWithoutProductInput, OptionUncheckedCreateWithoutProductInput>
  }

  export type OptionUpdateWithWhereUniqueWithoutProductInput = {
    where: OptionWhereUniqueInput
    data: XOR<OptionUpdateWithoutProductInput, OptionUncheckedUpdateWithoutProductInput>
  }

  export type OptionUpdateManyWithWhereWithoutProductInput = {
    where: OptionScalarWhereInput
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyWithoutOptionsInput>
  }

  export type OptionScalarWhereInput = {
    AND?: Enumerable<OptionScalarWhereInput>
    OR?: Enumerable<OptionScalarWhereInput>
    NOT?: Enumerable<OptionScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    value?: StringFilter | string
    productId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OrderedProductUpsertWithoutProductInput = {
    update: XOR<OrderedProductUpdateWithoutProductInput, OrderedProductUncheckedUpdateWithoutProductInput>
    create: XOR<OrderedProductCreateWithoutProductInput, OrderedProductUncheckedCreateWithoutProductInput>
  }

  export type OrderedProductUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutProductsInput
    option?: OptionUpdateOneRequiredWithoutOrderedProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    optionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsCreateWithoutCurrencyInput = {
    sell_price: number
    product: ProductCreateNestedOneWithoutCurrenciesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrenciesOnProductsUncheckedCreateWithoutCurrencyInput = {
    id?: number
    sell_price: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrenciesOnProductsCreateOrConnectWithoutCurrencyInput = {
    where: CurrenciesOnProductsWhereUniqueInput
    create: XOR<CurrenciesOnProductsCreateWithoutCurrencyInput, CurrenciesOnProductsUncheckedCreateWithoutCurrencyInput>
  }

  export type CurrenciesOnProductsCreateManyCurrencyInputEnvelope = {
    data: Enumerable<CurrenciesOnProductsCreateManyCurrencyInput>
    skipDuplicates?: boolean
  }

  export type CurrenciesOnProductsUpsertWithWhereUniqueWithoutCurrencyInput = {
    where: CurrenciesOnProductsWhereUniqueInput
    update: XOR<CurrenciesOnProductsUpdateWithoutCurrencyInput, CurrenciesOnProductsUncheckedUpdateWithoutCurrencyInput>
    create: XOR<CurrenciesOnProductsCreateWithoutCurrencyInput, CurrenciesOnProductsUncheckedCreateWithoutCurrencyInput>
  }

  export type CurrenciesOnProductsUpdateWithWhereUniqueWithoutCurrencyInput = {
    where: CurrenciesOnProductsWhereUniqueInput
    data: XOR<CurrenciesOnProductsUpdateWithoutCurrencyInput, CurrenciesOnProductsUncheckedUpdateWithoutCurrencyInput>
  }

  export type CurrenciesOnProductsUpdateManyWithWhereWithoutCurrencyInput = {
    where: CurrenciesOnProductsScalarWhereInput
    data: XOR<CurrenciesOnProductsUpdateManyMutationInput, CurrenciesOnProductsUncheckedUpdateManyWithoutProductsInput>
  }

  export type ProductCreateWithoutCurrenciesInput = {
    name: string
    description: string
    product_code: string
    shop: ShopCreateNestedOneWithoutProductsInput
    status: ProductStatus
    Wishlist?: WishlistCreateNestedOneWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoCreateNestedManyWithoutProductInput
    options?: OptionCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutCurrenciesInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    shopId: number
    Wishlist?: WishlistUncheckedCreateNestedOneWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoUncheckedCreateNestedManyWithoutProductInput
    options?: OptionUncheckedCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutCurrenciesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCurrenciesInput, ProductUncheckedCreateWithoutCurrenciesInput>
  }

  export type CurrencyCreateWithoutProductsInput = {
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrencyCreateOrConnectWithoutProductsInput = {
    where: CurrencyWhereUniqueInput
    create: XOR<CurrencyCreateWithoutProductsInput, CurrencyUncheckedCreateWithoutProductsInput>
  }

  export type ProductUpsertWithoutCurrenciesInput = {
    update: XOR<ProductUpdateWithoutCurrenciesInput, ProductUncheckedUpdateWithoutCurrenciesInput>
    create: XOR<ProductCreateWithoutCurrenciesInput, ProductUncheckedCreateWithoutCurrenciesInput>
  }

  export type ProductUpdateWithoutCurrenciesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    shop?: ShopUpdateOneRequiredWithoutProductsInput
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    Wishlist?: WishlistUpdateOneWithoutProductInput
    stock?: StockUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUpdateManyWithoutProductInput
    options?: OptionUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutCurrenciesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    shopId?: IntFieldUpdateOperationsInput | number
    Wishlist?: WishlistUncheckedUpdateOneWithoutProductInput
    stock?: StockUncheckedUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUncheckedUpdateManyWithoutProductInput
    options?: OptionUncheckedUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyUpsertWithoutProductsInput = {
    update: XOR<CurrencyUpdateWithoutProductsInput, CurrencyUncheckedUpdateWithoutProductsInput>
    create: XOR<CurrencyCreateWithoutProductsInput, CurrencyUncheckedCreateWithoutProductsInput>
  }

  export type CurrencyUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrencyUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneShopCreateWithoutShopInput = {
    id?: number
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhoneShopUncheckedCreateWithoutShopInput = {
    id?: number
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhoneShopCreateOrConnectWithoutShopInput = {
    where: PhoneShopWhereUniqueInput
    create: XOR<PhoneShopCreateWithoutShopInput, PhoneShopUncheckedCreateWithoutShopInput>
  }

  export type PhoneShopCreateManyShopInputEnvelope = {
    data: Enumerable<PhoneShopCreateManyShopInput>
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutShopInput = {
    name: string
    description: string
    product_code: string
    status: ProductStatus
    currencies?: CurrenciesOnProductsCreateNestedManyWithoutProductInput
    Wishlist?: WishlistCreateNestedOneWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoCreateNestedManyWithoutProductInput
    options?: OptionCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutShopInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    currencies?: CurrenciesOnProductsUncheckedCreateNestedManyWithoutProductInput
    Wishlist?: WishlistUncheckedCreateNestedOneWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoUncheckedCreateNestedManyWithoutProductInput
    options?: OptionUncheckedCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutShopInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutShopInput, ProductUncheckedCreateWithoutShopInput>
  }

  export type ProductCreateManyShopInputEnvelope = {
    data: Enumerable<ProductCreateManyShopInput>
    skipDuplicates?: boolean
  }

  export type UsersOnShopsCreateWithoutShopInput = {
    user: UserCreateNestedOneWithoutShopsInput
    assignedby: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersOnShopsUncheckedCreateWithoutShopInput = {
    userId: number
    assignedby: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersOnShopsCreateOrConnectWithoutShopInput = {
    where: UsersOnShopsWhereUniqueInput
    create: XOR<UsersOnShopsCreateWithoutShopInput, UsersOnShopsUncheckedCreateWithoutShopInput>
  }

  export type UsersOnShopsCreateManyShopInputEnvelope = {
    data: Enumerable<UsersOnShopsCreateManyShopInput>
    skipDuplicates?: boolean
  }

  export type PhoneShopUpsertWithWhereUniqueWithoutShopInput = {
    where: PhoneShopWhereUniqueInput
    update: XOR<PhoneShopUpdateWithoutShopInput, PhoneShopUncheckedUpdateWithoutShopInput>
    create: XOR<PhoneShopCreateWithoutShopInput, PhoneShopUncheckedCreateWithoutShopInput>
  }

  export type PhoneShopUpdateWithWhereUniqueWithoutShopInput = {
    where: PhoneShopWhereUniqueInput
    data: XOR<PhoneShopUpdateWithoutShopInput, PhoneShopUncheckedUpdateWithoutShopInput>
  }

  export type PhoneShopUpdateManyWithWhereWithoutShopInput = {
    where: PhoneShopScalarWhereInput
    data: XOR<PhoneShopUpdateManyMutationInput, PhoneShopUncheckedUpdateManyWithoutPhone_numbersInput>
  }

  export type PhoneShopScalarWhereInput = {
    AND?: Enumerable<PhoneShopScalarWhereInput>
    OR?: Enumerable<PhoneShopScalarWhereInput>
    NOT?: Enumerable<PhoneShopScalarWhereInput>
    id?: IntFilter | number
    phone?: StringFilter | string
    shopId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProductUpsertWithWhereUniqueWithoutShopInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutShopInput, ProductUncheckedUpdateWithoutShopInput>
    create: XOR<ProductCreateWithoutShopInput, ProductUncheckedCreateWithoutShopInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutShopInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutShopInput, ProductUncheckedUpdateWithoutShopInput>
  }

  export type ProductUpdateManyWithWhereWithoutShopInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductsInput>
  }

  export type ProductScalarWhereInput = {
    AND?: Enumerable<ProductScalarWhereInput>
    OR?: Enumerable<ProductScalarWhereInput>
    NOT?: Enumerable<ProductScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    product_code?: StringFilter | string
    status?: EnumProductStatusFilter | ProductStatus
    shopId?: IntFilter | number
    cover_photo?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UsersOnShopsUpsertWithWhereUniqueWithoutShopInput = {
    where: UsersOnShopsWhereUniqueInput
    update: XOR<UsersOnShopsUpdateWithoutShopInput, UsersOnShopsUncheckedUpdateWithoutShopInput>
    create: XOR<UsersOnShopsCreateWithoutShopInput, UsersOnShopsUncheckedCreateWithoutShopInput>
  }

  export type UsersOnShopsUpdateWithWhereUniqueWithoutShopInput = {
    where: UsersOnShopsWhereUniqueInput
    data: XOR<UsersOnShopsUpdateWithoutShopInput, UsersOnShopsUncheckedUpdateWithoutShopInput>
  }

  export type UsersOnShopsUpdateManyWithWhereWithoutShopInput = {
    where: UsersOnShopsScalarWhereInput
    data: XOR<UsersOnShopsUpdateManyMutationInput, UsersOnShopsUncheckedUpdateManyWithoutOwnersInput>
  }

  export type ShopCreateWithoutOwnersInput = {
    name: string
    slug: string
    address?: string | null
    phone_numbers?: PhoneShopCreateNestedManyWithoutShopInput
    products?: ProductCreateNestedManyWithoutShopInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopUncheckedCreateWithoutOwnersInput = {
    id?: number
    name: string
    slug: string
    address?: string | null
    phone_numbers?: PhoneShopUncheckedCreateNestedManyWithoutShopInput
    products?: ProductUncheckedCreateNestedManyWithoutShopInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopCreateOrConnectWithoutOwnersInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutOwnersInput, ShopUncheckedCreateWithoutOwnersInput>
  }

  export type UserCreateWithoutShopsInput = {
    name: string
    email: string
    password: string
    addresses?: AddressCreateNestedManyWithoutUserInput
    role?: UserType
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutShopsInput = {
    id?: number
    name: string
    email: string
    password: string
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    role?: UserType
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutShopsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShopsInput, UserUncheckedCreateWithoutShopsInput>
  }

  export type ShopUpsertWithoutOwnersInput = {
    update: XOR<ShopUpdateWithoutOwnersInput, ShopUncheckedUpdateWithoutOwnersInput>
    create: XOR<ShopCreateWithoutOwnersInput, ShopUncheckedCreateWithoutOwnersInput>
  }

  export type ShopUpdateWithoutOwnersInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_numbers?: PhoneShopUpdateManyWithoutShopInput
    products?: ProductUpdateManyWithoutShopInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopUncheckedUpdateWithoutOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_numbers?: PhoneShopUncheckedUpdateManyWithoutShopInput
    products?: ProductUncheckedUpdateManyWithoutShopInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutShopsInput = {
    update: XOR<UserUpdateWithoutShopsInput, UserUncheckedUpdateWithoutShopsInput>
    create: XOR<UserCreateWithoutShopsInput, UserUncheckedCreateWithoutShopsInput>
  }

  export type UserUpdateWithoutShopsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUpdateManyWithoutUserInput
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    wishlists?: WishlistUpdateManyWithoutUserInput
    orders?: OrderUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutShopsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUncheckedUpdateManyWithoutUserInput
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    wishlists?: WishlistUncheckedUpdateManyWithoutUserInput
    orders?: OrderUncheckedUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutWishlistsInput = {
    name: string
    email: string
    password: string
    addresses?: AddressCreateNestedManyWithoutUserInput
    role?: UserType
    shops?: UsersOnShopsCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutWishlistsInput = {
    id?: number
    name: string
    email: string
    password: string
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    role?: UserType
    shops?: UsersOnShopsUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutWishlistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWishlistsInput, UserUncheckedCreateWithoutWishlistsInput>
  }

  export type ProductCreateWithoutWishlistInput = {
    name: string
    description: string
    product_code: string
    shop: ShopCreateNestedOneWithoutProductsInput
    status: ProductStatus
    currencies?: CurrenciesOnProductsCreateNestedManyWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoCreateNestedManyWithoutProductInput
    options?: OptionCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutWishlistInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    shopId: number
    currencies?: CurrenciesOnProductsUncheckedCreateNestedManyWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoUncheckedCreateNestedManyWithoutProductInput
    options?: OptionUncheckedCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutWishlistInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutWishlistInput, ProductUncheckedCreateWithoutWishlistInput>
  }

  export type UserUpsertWithoutWishlistsInput = {
    update: XOR<UserUpdateWithoutWishlistsInput, UserUncheckedUpdateWithoutWishlistsInput>
    create: XOR<UserCreateWithoutWishlistsInput, UserUncheckedCreateWithoutWishlistsInput>
  }

  export type UserUpdateWithoutWishlistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUpdateManyWithoutUserInput
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    shops?: UsersOnShopsUpdateManyWithoutUserInput
    orders?: OrderUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutWishlistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUncheckedUpdateManyWithoutUserInput
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    shops?: UsersOnShopsUncheckedUpdateManyWithoutUserInput
    orders?: OrderUncheckedUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutWishlistInput = {
    update: XOR<ProductUpdateWithoutWishlistInput, ProductUncheckedUpdateWithoutWishlistInput>
    create: XOR<ProductCreateWithoutWishlistInput, ProductUncheckedCreateWithoutWishlistInput>
  }

  export type ProductUpdateWithoutWishlistInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    shop?: ShopUpdateOneRequiredWithoutProductsInput
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    currencies?: CurrenciesOnProductsUpdateManyWithoutProductInput
    stock?: StockUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUpdateManyWithoutProductInput
    options?: OptionUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutWishlistInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    shopId?: IntFieldUpdateOperationsInput | number
    currencies?: CurrenciesOnProductsUncheckedUpdateManyWithoutProductInput
    stock?: StockUncheckedUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUncheckedUpdateManyWithoutProductInput
    options?: OptionUncheckedUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopCreateWithoutPhone_numbersInput = {
    name: string
    slug: string
    address?: string | null
    products?: ProductCreateNestedManyWithoutShopInput
    owners?: UsersOnShopsCreateNestedManyWithoutShopInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopUncheckedCreateWithoutPhone_numbersInput = {
    id?: number
    name: string
    slug: string
    address?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutShopInput
    owners?: UsersOnShopsUncheckedCreateNestedManyWithoutShopInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShopCreateOrConnectWithoutPhone_numbersInput = {
    where: ShopWhereUniqueInput
    create: XOR<ShopCreateWithoutPhone_numbersInput, ShopUncheckedCreateWithoutPhone_numbersInput>
  }

  export type ShopUpsertWithoutPhone_numbersInput = {
    update: XOR<ShopUpdateWithoutPhone_numbersInput, ShopUncheckedUpdateWithoutPhone_numbersInput>
    create: XOR<ShopCreateWithoutPhone_numbersInput, ShopUncheckedCreateWithoutPhone_numbersInput>
  }

  export type ShopUpdateWithoutPhone_numbersInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUpdateManyWithoutShopInput
    owners?: UsersOnShopsUpdateManyWithoutShopInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopUncheckedUpdateWithoutPhone_numbersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutShopInput
    owners?: UsersOnShopsUncheckedUpdateManyWithoutShopInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateWithoutStockInput = {
    name: string
    description: string
    product_code: string
    shop: ShopCreateNestedOneWithoutProductsInput
    status: ProductStatus
    currencies?: CurrenciesOnProductsCreateNestedManyWithoutProductInput
    Wishlist?: WishlistCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoCreateNestedManyWithoutProductInput
    options?: OptionCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutStockInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    shopId: number
    currencies?: CurrenciesOnProductsUncheckedCreateNestedManyWithoutProductInput
    Wishlist?: WishlistUncheckedCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoUncheckedCreateNestedManyWithoutProductInput
    options?: OptionUncheckedCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutStockInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutStockInput, ProductUncheckedCreateWithoutStockInput>
  }

  export type ProductUpsertWithoutStockInput = {
    update: XOR<ProductUpdateWithoutStockInput, ProductUncheckedUpdateWithoutStockInput>
    create: XOR<ProductCreateWithoutStockInput, ProductUncheckedCreateWithoutStockInput>
  }

  export type ProductUpdateWithoutStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    shop?: ShopUpdateOneRequiredWithoutProductsInput
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    currencies?: CurrenciesOnProductsUpdateManyWithoutProductInput
    Wishlist?: WishlistUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUpdateManyWithoutProductInput
    options?: OptionUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutStockInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    shopId?: IntFieldUpdateOperationsInput | number
    currencies?: CurrenciesOnProductsUncheckedUpdateManyWithoutProductInput
    Wishlist?: WishlistUncheckedUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUncheckedUpdateManyWithoutProductInput
    options?: OptionUncheckedUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateWithoutFeatured_photosInput = {
    name: string
    description: string
    product_code: string
    shop: ShopCreateNestedOneWithoutProductsInput
    status: ProductStatus
    currencies?: CurrenciesOnProductsCreateNestedManyWithoutProductInput
    Wishlist?: WishlistCreateNestedOneWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    cover_photo: string
    options?: OptionCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutFeatured_photosInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    shopId: number
    currencies?: CurrenciesOnProductsUncheckedCreateNestedManyWithoutProductInput
    Wishlist?: WishlistUncheckedCreateNestedOneWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    cover_photo: string
    options?: OptionUncheckedCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutFeatured_photosInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutFeatured_photosInput, ProductUncheckedCreateWithoutFeatured_photosInput>
  }

  export type ProductUpsertWithoutFeatured_photosInput = {
    update: XOR<ProductUpdateWithoutFeatured_photosInput, ProductUncheckedUpdateWithoutFeatured_photosInput>
    create: XOR<ProductCreateWithoutFeatured_photosInput, ProductUncheckedCreateWithoutFeatured_photosInput>
  }

  export type ProductUpdateWithoutFeatured_photosInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    shop?: ShopUpdateOneRequiredWithoutProductsInput
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    currencies?: CurrenciesOnProductsUpdateManyWithoutProductInput
    Wishlist?: WishlistUpdateOneWithoutProductInput
    stock?: StockUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    options?: OptionUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutFeatured_photosInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    shopId?: IntFieldUpdateOperationsInput | number
    currencies?: CurrenciesOnProductsUncheckedUpdateManyWithoutProductInput
    Wishlist?: WishlistUncheckedUpdateOneWithoutProductInput
    stock?: StockUncheckedUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    options?: OptionUncheckedUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductCreateWithoutOrderInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    product: ProductCreateNestedOneWithoutOrderedProductInput
    option: OptionCreateNestedOneWithoutOrderedProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductUncheckedCreateWithoutOrderInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    productId: number
    optionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductCreateOrConnectWithoutOrderInput = {
    where: OrderedProductWhereUniqueInput
    create: XOR<OrderedProductCreateWithoutOrderInput, OrderedProductUncheckedCreateWithoutOrderInput>
  }

  export type OrderedProductCreateManyOrderInputEnvelope = {
    data: Enumerable<OrderedProductCreateManyOrderInput>
    skipDuplicates?: boolean
  }

  export type ShippingAddressCreateWithoutOrderInput = {
    id?: number
    address: AddressCreateNestedOneWithoutShippingAddressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingAddressUncheckedCreateWithoutOrderInput = {
    id?: number
    addressId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingAddressCreateOrConnectWithoutOrderInput = {
    where: ShippingAddressWhereUniqueInput
    create: XOR<ShippingAddressCreateWithoutOrderInput, ShippingAddressUncheckedCreateWithoutOrderInput>
  }

  export type UserCreateWithoutOrdersInput = {
    name: string
    email: string
    password: string
    addresses?: AddressCreateNestedManyWithoutUserInput
    role?: UserType
    shops?: UsersOnShopsCreateNestedManyWithoutUserInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    email: string
    password: string
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    role?: UserType
    shops?: UsersOnShopsUncheckedCreateNestedManyWithoutUserInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type OrderedProductUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderedProductWhereUniqueInput
    update: XOR<OrderedProductUpdateWithoutOrderInput, OrderedProductUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderedProductCreateWithoutOrderInput, OrderedProductUncheckedCreateWithoutOrderInput>
  }

  export type OrderedProductUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderedProductWhereUniqueInput
    data: XOR<OrderedProductUpdateWithoutOrderInput, OrderedProductUncheckedUpdateWithoutOrderInput>
  }

  export type OrderedProductUpdateManyWithWhereWithoutOrderInput = {
    where: OrderedProductScalarWhereInput
    data: XOR<OrderedProductUpdateManyMutationInput, OrderedProductUncheckedUpdateManyWithoutProductsInput>
  }

  export type OrderedProductScalarWhereInput = {
    AND?: Enumerable<OrderedProductScalarWhereInput>
    OR?: Enumerable<OrderedProductScalarWhereInput>
    NOT?: Enumerable<OrderedProductScalarWhereInput>
    id?: IntFilter | number
    quantity?: IntFilter | number
    price?: FloatFilter | number
    total?: FloatFilter | number
    sub_total?: FloatFilter | number
    discount?: FloatFilter | number
    orderId?: IntFilter | number
    productId?: IntFilter | number
    optionId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ShippingAddressUpsertWithoutOrderInput = {
    update: XOR<ShippingAddressUpdateWithoutOrderInput, ShippingAddressUncheckedUpdateWithoutOrderInput>
    create: XOR<ShippingAddressCreateWithoutOrderInput, ShippingAddressUncheckedCreateWithoutOrderInput>
  }

  export type ShippingAddressUpdateWithoutOrderInput = {
    address?: AddressUpdateOneRequiredWithoutShippingAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingAddressUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    addressId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUpdateManyWithoutUserInput
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    shops?: UsersOnShopsUpdateManyWithoutUserInput
    wishlists?: WishlistUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUncheckedUpdateManyWithoutUserInput
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    shops?: UsersOnShopsUncheckedUpdateManyWithoutUserInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateWithoutProductsInput = {
    id?: number
    productId: number
    shipping_address?: ShippingAddressCreateNestedOneWithoutOrderInput
    total_price: number
    user: UserCreateNestedOneWithoutOrdersInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUncheckedCreateWithoutProductsInput = {
    id?: number
    userId: number
    productId: number
    shipping_address?: ShippingAddressUncheckedCreateNestedOneWithoutOrderInput
    total_price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutProductsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutProductsInput, OrderUncheckedCreateWithoutProductsInput>
  }

  export type ProductCreateWithoutOrderedProductInput = {
    name: string
    description: string
    product_code: string
    shop: ShopCreateNestedOneWithoutProductsInput
    status: ProductStatus
    currencies?: CurrenciesOnProductsCreateNestedManyWithoutProductInput
    Wishlist?: WishlistCreateNestedOneWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoCreateNestedManyWithoutProductInput
    options?: OptionCreateNestedManyWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutOrderedProductInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    shopId: number
    currencies?: CurrenciesOnProductsUncheckedCreateNestedManyWithoutProductInput
    Wishlist?: WishlistUncheckedCreateNestedOneWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoUncheckedCreateNestedManyWithoutProductInput
    options?: OptionUncheckedCreateNestedManyWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutOrderedProductInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrderedProductInput, ProductUncheckedCreateWithoutOrderedProductInput>
  }

  export type OptionCreateWithoutOrderedProductInput = {
    id?: number
    name: string
    value: string
    product: ProductCreateNestedOneWithoutOptionsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionUncheckedCreateWithoutOrderedProductInput = {
    id?: number
    name: string
    value: string
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionCreateOrConnectWithoutOrderedProductInput = {
    where: OptionWhereUniqueInput
    create: XOR<OptionCreateWithoutOrderedProductInput, OptionUncheckedCreateWithoutOrderedProductInput>
  }

  export type OrderUpsertWithoutProductsInput = {
    update: XOR<OrderUpdateWithoutProductsInput, OrderUncheckedUpdateWithoutProductsInput>
    create: XOR<OrderCreateWithoutProductsInput, OrderUncheckedCreateWithoutProductsInput>
  }

  export type OrderUpdateWithoutProductsInput = {
    productId?: IntFieldUpdateOperationsInput | number
    shipping_address?: ShippingAddressUpdateOneWithoutOrderInput
    total_price?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutOrdersInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    shipping_address?: ShippingAddressUncheckedUpdateOneWithoutOrderInput
    total_price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutOrderedProductInput = {
    update: XOR<ProductUpdateWithoutOrderedProductInput, ProductUncheckedUpdateWithoutOrderedProductInput>
    create: XOR<ProductCreateWithoutOrderedProductInput, ProductUncheckedCreateWithoutOrderedProductInput>
  }

  export type ProductUpdateWithoutOrderedProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    shop?: ShopUpdateOneRequiredWithoutProductsInput
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    currencies?: CurrenciesOnProductsUpdateManyWithoutProductInput
    Wishlist?: WishlistUpdateOneWithoutProductInput
    stock?: StockUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUpdateManyWithoutProductInput
    options?: OptionUpdateManyWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutOrderedProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    shopId?: IntFieldUpdateOperationsInput | number
    currencies?: CurrenciesOnProductsUncheckedUpdateManyWithoutProductInput
    Wishlist?: WishlistUncheckedUpdateOneWithoutProductInput
    stock?: StockUncheckedUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUncheckedUpdateManyWithoutProductInput
    options?: OptionUncheckedUpdateManyWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUpsertWithoutOrderedProductInput = {
    update: XOR<OptionUpdateWithoutOrderedProductInput, OptionUncheckedUpdateWithoutOrderedProductInput>
    create: XOR<OptionCreateWithoutOrderedProductInput, OptionUncheckedCreateWithoutOrderedProductInput>
  }

  export type OptionUpdateWithoutOrderedProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutOptionsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUncheckedUpdateWithoutOrderedProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateWithoutOptionsInput = {
    name: string
    description: string
    product_code: string
    shop: ShopCreateNestedOneWithoutProductsInput
    status: ProductStatus
    currencies?: CurrenciesOnProductsCreateNestedManyWithoutProductInput
    Wishlist?: WishlistCreateNestedOneWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutOptionsInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    shopId: number
    currencies?: CurrenciesOnProductsUncheckedCreateNestedManyWithoutProductInput
    Wishlist?: WishlistUncheckedCreateNestedOneWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    cover_photo: string
    featured_photos?: FeaturedPhotoUncheckedCreateNestedManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedCreateNestedOneWithoutProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutOptionsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOptionsInput, ProductUncheckedCreateWithoutOptionsInput>
  }

  export type OrderedProductCreateWithoutOptionInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    order: OrderCreateNestedOneWithoutProductsInput
    product: ProductCreateNestedOneWithoutOrderedProductInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductUncheckedCreateWithoutOptionInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    orderId: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductCreateOrConnectWithoutOptionInput = {
    where: OrderedProductWhereUniqueInput
    create: XOR<OrderedProductCreateWithoutOptionInput, OrderedProductUncheckedCreateWithoutOptionInput>
  }

  export type OrderedProductCreateManyOptionInputEnvelope = {
    data: Enumerable<OrderedProductCreateManyOptionInput>
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutOptionsInput = {
    update: XOR<ProductUpdateWithoutOptionsInput, ProductUncheckedUpdateWithoutOptionsInput>
    create: XOR<ProductCreateWithoutOptionsInput, ProductUncheckedCreateWithoutOptionsInput>
  }

  export type ProductUpdateWithoutOptionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    shop?: ShopUpdateOneRequiredWithoutProductsInput
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    currencies?: CurrenciesOnProductsUpdateManyWithoutProductInput
    Wishlist?: WishlistUpdateOneWithoutProductInput
    stock?: StockUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    shopId?: IntFieldUpdateOperationsInput | number
    currencies?: CurrenciesOnProductsUncheckedUpdateManyWithoutProductInput
    Wishlist?: WishlistUncheckedUpdateOneWithoutProductInput
    stock?: StockUncheckedUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUncheckedUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductUpsertWithWhereUniqueWithoutOptionInput = {
    where: OrderedProductWhereUniqueInput
    update: XOR<OrderedProductUpdateWithoutOptionInput, OrderedProductUncheckedUpdateWithoutOptionInput>
    create: XOR<OrderedProductCreateWithoutOptionInput, OrderedProductUncheckedCreateWithoutOptionInput>
  }

  export type OrderedProductUpdateWithWhereUniqueWithoutOptionInput = {
    where: OrderedProductWhereUniqueInput
    data: XOR<OrderedProductUpdateWithoutOptionInput, OrderedProductUncheckedUpdateWithoutOptionInput>
  }

  export type OrderedProductUpdateManyWithWhereWithoutOptionInput = {
    where: OrderedProductScalarWhereInput
    data: XOR<OrderedProductUpdateManyMutationInput, OrderedProductUncheckedUpdateManyWithoutOrderedProductInput>
  }

  export type TownshipCreateWithoutAddressesInput = {
    name: string
    state: StateCreateNestedOneWithoutTownshipsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TownshipUncheckedCreateWithoutAddressesInput = {
    id?: number
    name: string
    stateId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TownshipCreateOrConnectWithoutAddressesInput = {
    where: TownshipWhereUniqueInput
    create: XOR<TownshipCreateWithoutAddressesInput, TownshipUncheckedCreateWithoutAddressesInput>
  }

  export type UserCreateWithoutAddressesInput = {
    name: string
    email: string
    password: string
    role?: UserType
    shops?: UsersOnShopsCreateNestedManyWithoutUserInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutAddressesInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: UserType
    shops?: UsersOnShopsUncheckedCreateNestedManyWithoutUserInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutAddressesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
  }

  export type ShippingAddressCreateWithoutAddressInput = {
    id?: number
    order: OrderCreateNestedOneWithoutShipping_addressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingAddressUncheckedCreateWithoutAddressInput = {
    id?: number
    orderId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShippingAddressCreateOrConnectWithoutAddressInput = {
    where: ShippingAddressWhereUniqueInput
    create: XOR<ShippingAddressCreateWithoutAddressInput, ShippingAddressUncheckedCreateWithoutAddressInput>
  }

  export type TownshipUpsertWithoutAddressesInput = {
    update: XOR<TownshipUpdateWithoutAddressesInput, TownshipUncheckedUpdateWithoutAddressesInput>
    create: XOR<TownshipCreateWithoutAddressesInput, TownshipUncheckedCreateWithoutAddressesInput>
  }

  export type TownshipUpdateWithoutAddressesInput = {
    name?: StringFieldUpdateOperationsInput | string
    state?: StateUpdateOneRequiredWithoutTownshipsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownshipUncheckedUpdateWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    stateId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutAddressesInput = {
    update: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
  }

  export type UserUpdateWithoutAddressesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    shops?: UsersOnShopsUpdateManyWithoutUserInput
    wishlists?: WishlistUpdateManyWithoutUserInput
    orders?: OrderUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserTypeFieldUpdateOperationsInput | UserType
    shops?: UsersOnShopsUncheckedUpdateManyWithoutUserInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserInput
    orders?: OrderUncheckedUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingAddressUpsertWithoutAddressInput = {
    update: XOR<ShippingAddressUpdateWithoutAddressInput, ShippingAddressUncheckedUpdateWithoutAddressInput>
    create: XOR<ShippingAddressCreateWithoutAddressInput, ShippingAddressUncheckedCreateWithoutAddressInput>
  }

  export type ShippingAddressUpdateWithoutAddressInput = {
    order?: OrderUpdateOneRequiredWithoutShipping_addressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShippingAddressUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownshipCreateWithoutStateInput = {
    name: string
    addresses?: AddressCreateNestedManyWithoutTownshipInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TownshipUncheckedCreateWithoutStateInput = {
    id?: number
    name: string
    addresses?: AddressUncheckedCreateNestedManyWithoutTownshipInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TownshipCreateOrConnectWithoutStateInput = {
    where: TownshipWhereUniqueInput
    create: XOR<TownshipCreateWithoutStateInput, TownshipUncheckedCreateWithoutStateInput>
  }

  export type TownshipCreateManyStateInputEnvelope = {
    data: Enumerable<TownshipCreateManyStateInput>
    skipDuplicates?: boolean
  }

  export type TownshipUpsertWithWhereUniqueWithoutStateInput = {
    where: TownshipWhereUniqueInput
    update: XOR<TownshipUpdateWithoutStateInput, TownshipUncheckedUpdateWithoutStateInput>
    create: XOR<TownshipCreateWithoutStateInput, TownshipUncheckedCreateWithoutStateInput>
  }

  export type TownshipUpdateWithWhereUniqueWithoutStateInput = {
    where: TownshipWhereUniqueInput
    data: XOR<TownshipUpdateWithoutStateInput, TownshipUncheckedUpdateWithoutStateInput>
  }

  export type TownshipUpdateManyWithWhereWithoutStateInput = {
    where: TownshipScalarWhereInput
    data: XOR<TownshipUpdateManyMutationInput, TownshipUncheckedUpdateManyWithoutTownshipsInput>
  }

  export type TownshipScalarWhereInput = {
    AND?: Enumerable<TownshipScalarWhereInput>
    OR?: Enumerable<TownshipScalarWhereInput>
    NOT?: Enumerable<TownshipScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    stateId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type StateCreateWithoutTownshipsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StateUncheckedCreateWithoutTownshipsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StateCreateOrConnectWithoutTownshipsInput = {
    where: StateWhereUniqueInput
    create: XOR<StateCreateWithoutTownshipsInput, StateUncheckedCreateWithoutTownshipsInput>
  }

  export type AddressCreateWithoutTownshipInput = {
    id?: number
    name: string
    adress: string
    user: UserCreateNestedOneWithoutAddressesInput
    ShippingAddress?: ShippingAddressCreateNestedOneWithoutAddressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUncheckedCreateWithoutTownshipInput = {
    id?: number
    name: string
    adress: string
    userId: number
    ShippingAddress?: ShippingAddressUncheckedCreateNestedOneWithoutAddressInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressCreateOrConnectWithoutTownshipInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutTownshipInput, AddressUncheckedCreateWithoutTownshipInput>
  }

  export type AddressCreateManyTownshipInputEnvelope = {
    data: Enumerable<AddressCreateManyTownshipInput>
    skipDuplicates?: boolean
  }

  export type StateUpsertWithoutTownshipsInput = {
    update: XOR<StateUpdateWithoutTownshipsInput, StateUncheckedUpdateWithoutTownshipsInput>
    create: XOR<StateCreateWithoutTownshipsInput, StateUncheckedCreateWithoutTownshipsInput>
  }

  export type StateUpdateWithoutTownshipsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateUncheckedUpdateWithoutTownshipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUpsertWithWhereUniqueWithoutTownshipInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutTownshipInput, AddressUncheckedUpdateWithoutTownshipInput>
    create: XOR<AddressCreateWithoutTownshipInput, AddressUncheckedCreateWithoutTownshipInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutTownshipInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutTownshipInput, AddressUncheckedUpdateWithoutTownshipInput>
  }

  export type AddressUpdateManyWithWhereWithoutTownshipInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutAddressesInput>
  }

  export type OrderCreateWithoutShipping_addressInput = {
    id?: number
    productId: number
    products?: OrderedProductCreateNestedManyWithoutOrderInput
    total_price: number
    user: UserCreateNestedOneWithoutOrdersInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUncheckedCreateWithoutShipping_addressInput = {
    id?: number
    userId: number
    productId: number
    products?: OrderedProductUncheckedCreateNestedManyWithoutOrderInput
    total_price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutShipping_addressInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput>
  }

  export type AddressCreateWithoutShippingAddressInput = {
    id?: number
    name: string
    adress: string
    township: TownshipCreateNestedOneWithoutAddressesInput
    user: UserCreateNestedOneWithoutAddressesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUncheckedCreateWithoutShippingAddressInput = {
    id?: number
    name: string
    adress: string
    townshipId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressCreateOrConnectWithoutShippingAddressInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutShippingAddressInput, AddressUncheckedCreateWithoutShippingAddressInput>
  }

  export type OrderUpsertWithoutShipping_addressInput = {
    update: XOR<OrderUpdateWithoutShipping_addressInput, OrderUncheckedUpdateWithoutShipping_addressInput>
    create: XOR<OrderCreateWithoutShipping_addressInput, OrderUncheckedCreateWithoutShipping_addressInput>
  }

  export type OrderUpdateWithoutShipping_addressInput = {
    productId?: IntFieldUpdateOperationsInput | number
    products?: OrderedProductUpdateManyWithoutOrderInput
    total_price?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutOrdersInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateWithoutShipping_addressInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    products?: OrderedProductUncheckedUpdateManyWithoutOrderInput
    total_price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUpsertWithoutShippingAddressInput = {
    update: XOR<AddressUpdateWithoutShippingAddressInput, AddressUncheckedUpdateWithoutShippingAddressInput>
    create: XOR<AddressCreateWithoutShippingAddressInput, AddressUncheckedCreateWithoutShippingAddressInput>
  }

  export type AddressUpdateWithoutShippingAddressInput = {
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    township?: TownshipUpdateOneRequiredWithoutAddressesInput
    user?: UserUpdateOneRequiredWithoutAddressesInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateWithoutShippingAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    townshipId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateManyUserInput = {
    id?: number
    name: string
    adress: string
    townshipId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersOnShopsCreateManyUserInput = {
    shopId: number
    assignedby: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistCreateManyUserInput = {
    id?: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateManyUserInput = {
    id?: number
    productId: number
    total_price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    township?: TownshipUpdateOneRequiredWithoutAddressesInput
    ShippingAddress?: ShippingAddressUpdateOneWithoutAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    townshipId?: IntFieldUpdateOperationsInput | number
    ShippingAddress?: ShippingAddressUncheckedUpdateOneWithoutAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    townshipId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsUpdateWithoutUserInput = {
    shop?: ShopUpdateOneRequiredWithoutOwnersInput
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsUncheckedUpdateWithoutUserInput = {
    shopId?: IntFieldUpdateOperationsInput | number
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsUncheckedUpdateManyWithoutShopsInput = {
    shopId?: IntFieldUpdateOperationsInput | number
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUpdateWithoutUserInput = {
    product?: ProductUpdateOneRequiredWithoutWishlistInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateManyWithoutWishlistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    productId?: IntFieldUpdateOperationsInput | number
    products?: OrderedProductUpdateManyWithoutOrderInput
    shipping_address?: ShippingAddressUpdateOneWithoutOrderInput
    total_price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    products?: OrderedProductUncheckedUpdateManyWithoutOrderInput
    shipping_address?: ShippingAddressUncheckedUpdateOneWithoutOrderInput
    total_price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    total_price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsCreateManyProductInput = {
    id?: number
    sell_price: number
    currencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeaturedPhotoCreateManyProductInput = {
    id?: number
    photo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionCreateManyProductInput = {
    id?: number
    name: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrenciesOnProductsUpdateWithoutProductInput = {
    sell_price?: FloatFieldUpdateOperationsInput | number
    currency?: CurrencyUpdateOneRequiredWithoutProductsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    sell_price?: FloatFieldUpdateOperationsInput | number
    currencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsUncheckedUpdateManyWithoutCurrenciesInput = {
    id?: IntFieldUpdateOperationsInput | number
    sell_price?: FloatFieldUpdateOperationsInput | number
    currencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturedPhotoUpdateWithoutProductInput = {
    photo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturedPhotoUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    photo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeaturedPhotoUncheckedUpdateManyWithoutFeatured_photosInput = {
    id?: IntFieldUpdateOperationsInput | number
    photo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    OrderedProduct?: OrderedProductUpdateManyWithoutOptionInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    OrderedProduct?: OrderedProductUncheckedUpdateManyWithoutOptionInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUncheckedUpdateManyWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsCreateManyCurrencyInput = {
    id?: number
    sell_price: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CurrenciesOnProductsUpdateWithoutCurrencyInput = {
    sell_price?: FloatFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutCurrenciesInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsUncheckedUpdateWithoutCurrencyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sell_price?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrenciesOnProductsUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sell_price?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneShopCreateManyShopInput = {
    id?: number
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateManyShopInput = {
    id?: number
    name: string
    description: string
    product_code: string
    status: ProductStatus
    cover_photo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsersOnShopsCreateManyShopInput = {
    userId: number
    assignedby: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhoneShopUpdateWithoutShopInput = {
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneShopUncheckedUpdateWithoutShopInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhoneShopUncheckedUpdateManyWithoutPhone_numbersInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpdateWithoutShopInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    currencies?: CurrenciesOnProductsUpdateManyWithoutProductInput
    Wishlist?: WishlistUpdateOneWithoutProductInput
    stock?: StockUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUpdateManyWithoutProductInput
    options?: OptionUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutShopInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    currencies?: CurrenciesOnProductsUncheckedUpdateManyWithoutProductInput
    Wishlist?: WishlistUncheckedUpdateOneWithoutProductInput
    stock?: StockUncheckedUpdateOneWithoutProductInput
    cover_photo?: StringFieldUpdateOperationsInput | string
    featured_photos?: FeaturedPhotoUncheckedUpdateManyWithoutProductInput
    options?: OptionUncheckedUpdateManyWithoutProductInput
    OrderedProduct?: OrderedProductUncheckedUpdateOneWithoutProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    product_code?: StringFieldUpdateOperationsInput | string
    status?: EnumProductStatusFieldUpdateOperationsInput | ProductStatus
    cover_photo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsUpdateWithoutShopInput = {
    user?: UserUpdateOneRequiredWithoutShopsInput
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsUncheckedUpdateWithoutShopInput = {
    userId?: IntFieldUpdateOperationsInput | number
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersOnShopsUncheckedUpdateManyWithoutOwnersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    assignedby?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductCreateManyOrderInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    productId: number
    optionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductUpdateWithoutOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutOrderedProductInput
    option?: OptionUpdateOneRequiredWithoutOrderedProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    optionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    optionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductCreateManyOptionInput = {
    id?: number
    quantity: number
    price: number
    total: number
    sub_total: number
    discount: number
    orderId: number
    productId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderedProductUpdateWithoutOptionInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutProductsInput
    product?: ProductUpdateOneRequiredWithoutOrderedProductInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductUncheckedUpdateWithoutOptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderedProductUncheckedUpdateManyWithoutOrderedProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sub_total?: FloatFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownshipCreateManyStateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TownshipUpdateWithoutStateInput = {
    name?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUpdateManyWithoutTownshipInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownshipUncheckedUpdateWithoutStateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    addresses?: AddressUncheckedUpdateManyWithoutTownshipInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TownshipUncheckedUpdateManyWithoutTownshipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateManyTownshipInput = {
    id?: number
    name: string
    adress: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateWithoutTownshipInput = {
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutAddressesInput
    ShippingAddress?: ShippingAddressUpdateOneWithoutAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateWithoutTownshipInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    adress?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    ShippingAddress?: ShippingAddressUncheckedUpdateOneWithoutAddressInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}