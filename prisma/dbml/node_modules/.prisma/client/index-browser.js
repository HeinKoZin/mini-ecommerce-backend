
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.10.0
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.10.0",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  product_code: 'product_code',
  status: 'status',
  shopId: 'shopId',
  cover_photo: 'cover_photo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CurrencyScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  code: 'code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CurrenciesOnProductsScalarFieldEnum = makeEnum({
  id: 'id',
  sell_price: 'sell_price',
  productId: 'productId',
  currencyId: 'currencyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ShopScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UsersOnShopsScalarFieldEnum = makeEnum({
  shopId: 'shopId',
  userId: 'userId',
  assignedby: 'assignedby',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.WishlistScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PhoneShopScalarFieldEnum = makeEnum({
  id: 'id',
  phone: 'phone',
  shopId: 'shopId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.StockScalarFieldEnum = makeEnum({
  id: 'id',
  quantity: 'quantity',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.FeaturedPhotoScalarFieldEnum = makeEnum({
  id: 'id',
  photo: 'photo',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.OrderScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  total_price: 'total_price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.OrderedProductScalarFieldEnum = makeEnum({
  id: 'id',
  quantity: 'quantity',
  price: 'price',
  total: 'total',
  sub_total: 'sub_total',
  discount: 'discount',
  orderId: 'orderId',
  productId: 'productId',
  optionId: 'optionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.OptionScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  value: 'value',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  adress: 'adress',
  townshipId: 'townshipId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.StateScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TownshipScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  stateId: 'stateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ShippingAddressScalarFieldEnum = makeEnum({
  id: 'id',
  addressId: 'addressId',
  orderId: 'orderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.UserType = makeEnum({
  ADMIN: 'ADMIN',
  USER: 'USER'
});

exports.ProductStatus = makeEnum({
  AVAILABLE: 'AVAILABLE',
  STOCK_OUT: 'STOCK_OUT',
  PRE_ORDER: 'PRE_ORDER'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Product: 'Product',
  Currency: 'Currency',
  CurrenciesOnProducts: 'CurrenciesOnProducts',
  Shop: 'Shop',
  UsersOnShops: 'UsersOnShops',
  Wishlist: 'Wishlist',
  PhoneShop: 'PhoneShop',
  Stock: 'Stock',
  FeaturedPhoto: 'FeaturedPhoto',
  Order: 'Order',
  OrderedProduct: 'OrderedProduct',
  Option: 'Option',
  Address: 'Address',
  State: 'State',
  Township: 'Township',
  ShippingAddress: 'ShippingAddress'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
